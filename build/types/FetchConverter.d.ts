import type { IMIDIConverter, MeasureTimemap } from './IMIDIConverter';
import { PlayerOptions } from './Player';
import type { IXSLTProcessor } from './interfaces/IXSLTProcessor';
/**
 * Implementation of IMIDIConverter that simply fetches given MIDI file and timemap JSON file URIs.
 *
 * The timemap JSON file can be generated using the script midi-timemap which is distributed with musicxml-midi
 * @see https://github.com/infojunkie/musicxml-midi/blob/main/src/js/midi-timemap.js
 * ASSUMPTION The MIDI file is itself generated using musicxml-midi.
 *
 * The timemap JSON structure is simple enough to be generated by other tools as well.
 */
export declare class FetchConverter implements IMIDIConverter {
    protected _midiOrUri: ArrayBuffer | string;
    protected _timemapOrUri?: string | MeasureTimemap | undefined;
    protected _timemap?: MeasureTimemap;
    protected _midi?: ArrayBuffer;
    protected _xsltProcessor: IXSLTProcessor;
    constructor(_midiOrUri: ArrayBuffer | string, _timemapOrUri?: string | MeasureTimemap | undefined, xsltProcessor?: IXSLTProcessor);
    initialize(musicXml: string, options: Required<PlayerOptions>): Promise<void>;
    get midi(): ArrayBuffer;
    get timemap(): MeasureTimemap;
    get version(): string;
}
//# sourceMappingURL=FetchConverter.d.ts.map