{
  "version": 3,
  "sources": ["../node_modules/spessasynth_core/src/utils/indexed_array.ts", "../node_modules/spessasynth_core/src/utils/byte_functions/string.ts", "../node_modules/spessasynth_core/src/utils/byte_functions/little_endian.ts", "../node_modules/spessasynth_core/src/utils/riff_chunk.ts", "../node_modules/spessasynth_core/src/utils/fill_with_defaults.ts", "../node_modules/spessasynth_core/src/utils/write_wav.ts", "../node_modules/spessasynth_core/src/utils/byte_functions/big_endian.ts", "../node_modules/spessasynth_core/src/utils/byte_functions/variable_length_quantity.ts", "../node_modules/spessasynth_core/src/utils/other.ts", "../node_modules/spessasynth_core/src/externals/fflate/fflate.min.js", "../node_modules/spessasynth_core/src/externals/fflate/fflate_wrapper.ts", "../node_modules/spessasynth_core/src/utils/loggin.ts", "../node_modules/spessasynth_core/src/utils/exports.ts", "../node_modules/spessasynth_core/src/midi/midi_message.ts", "../node_modules/spessasynth_core/src/midi/enums.ts", "../node_modules/spessasynth_core/src/midi/midi_tools/midi_writer.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/synth_constants.ts", "../node_modules/spessasynth_core/src/utils/midi_hacks.ts", "../node_modules/spessasynth_core/src/utils/sysex_detector.ts", "../node_modules/spessasynth_core/src/midi/midi_tools/get_gs_on.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/midi_patch.ts", "../node_modules/spessasynth_core/src/midi/midi_tools/rmidi_writer.ts", "../node_modules/spessasynth_core/src/midi/midi_tools/used_keys_loaded.ts", "../node_modules/spessasynth_core/src/midi/midi_tools/get_note_times.ts", "../node_modules/spessasynth_core/src/synthesizer/enums.ts", "../node_modules/spessasynth_core/src/midi/midi_tools/midi_editor.ts", "../node_modules/spessasynth_core/src/midi/xmf_loader.ts", "../node_modules/spessasynth_core/src/midi/midi_track.ts", "../node_modules/spessasynth_core/src/midi/midi_loader.ts", "../node_modules/spessasynth_core/src/utils/load_date.ts", "../node_modules/spessasynth_core/src/midi/basic_midi.ts", "../node_modules/spessasynth_core/src/midi/midi_tools/midi_builder.ts", "../node_modules/spessasynth_core/src/sequencer/process_event.ts", "../node_modules/spessasynth_core/src/sequencer/process_tick.ts", "../node_modules/spessasynth_core/src/sequencer/song_control.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/generator_types.ts", "../node_modules/spessasynth_core/src/soundbank/enums.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/controller_tables.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/controller_control/reset_controllers.ts", "../node_modules/spessasynth_core/src/sequencer/play.ts", "../node_modules/spessasynth_core/src/sequencer/sequencer.ts", "../node_modules/spessasynth_core/src/externals/stbvorbis_sync/stbvorbis_sync.min.js", "../node_modules/spessasynth_core/src/externals/stbvorbis_sync/stbvorbis_wrapper.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/unit_converter.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dsp_chain/volume_envelope.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/controller_control/master_parameters.ts", "../node_modules/spessasynth_core/src/utils/byte_functions/bit_mask.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/modulator_curves.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/modulator_source.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/modulator.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/generator.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_zone.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_global_zone.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_preset_zone.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_instrument_zone.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_instrument.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_preset.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/preset_selector.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/sound_bank_manager.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dsp_chain/stereo_panner.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dsp_chain/lowpass_filter.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/synth_processor_options.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/stopping_notes/voice_killing.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dsp_chain/modulation_envelope.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/audio_sample.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/voice.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/system_exclusive.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/snapshot/channel_snapshot.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/key_modifier_manager.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/snapshot/synthesizer_snapshot.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/master_parameters.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/internal_synth_values.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dsp_chain/lfo.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dsp_chain/wavetable_oscillator.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dsp_chain/render_voice.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/controller_control/data_entry/data_entry_coarse.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/controller_control/data_entry/awe32.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/controller_control/data_entry/data_entry_fine.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/controller_control/controller_change.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/portamento_time.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/note_on.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/stopping_notes/note_off.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_methods/program_change.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/dynamic_modulator_system.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/compute_modulator.ts", "../node_modules/spessasynth_core/src/synthesizer/audio_engine/engine_components/midi_channel.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/write/sdta.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_sample.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/samples.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/write/shdr.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/write/write_sf2_elements.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/write/write.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/dls_verifier.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/wave_sample.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/dls_sample.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/sample.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/default_dls_modulators.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/connection_source.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/connection_block.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/articulation.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/wave_link.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/region.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/instrument.ts", "../node_modules/spessasynth_core/src/soundbank/downloadable_sounds/downloadable_sounds.ts", "../node_modules/spessasynth_core/src/soundbank/basic_soundbank/basic_soundbank.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/generators.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/preset_zones.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/presets.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/instrument_zones.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/instruments.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/modulators.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/zones.ts", "../node_modules/spessasynth_core/src/soundbank/soundfont/read/soundfont.ts", "../node_modules/spessasynth_core/src/soundbank/sound_bank_loader.ts", "../node_modules/spessasynth_core/src/synthesizer/processor.ts", "../src/utils/other.ts", "../src/synthesizer/worklet/worklet_processor_name.ts", "../src/utils/fill_with_defaults.ts", "../src/sequencer/default_sequencer_options.ts", "../src/sequencer/midi_data.ts", "../src/sequencer/enums.ts", "../src/synthesizer/basic/basic_synthesizer_core.ts", "../src/synthesizer/worklet/worklet_synthesizer_core.ts", "../src/worklet_processor.ts"],
  "sourcesContent": ["/**\n * Indexed_array.ts\n * purpose: extends Uint8Array with a currentIndex property.\n */\n\nexport class IndexedByteArray extends Uint8Array {\n    /**\n     * The current index of the array.\n     */\n    public currentIndex = 0;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    public slice(start?: number, end?: number): IndexedByteArray {\n        const a = super.slice(start, end) as IndexedByteArray;\n        a.currentIndex = 0;\n        return a;\n    }\n}\n", "import { IndexedByteArray } from \"../indexed_array\";\n\n/**\n * Reads bytes as an ASCII string. This version works with any numeric array.\n * @param dataArray the array to read from.\n * @param bytes the amount of bytes to read.\n * @param offset the offset in the array to start reading from.\n * @returns the string.\n */\nexport function readBinaryString(\n    dataArray: ArrayLike<number>,\n    bytes = dataArray.length,\n    offset = 0\n) {\n    let string = \"\";\n    for (let i = 0; i < bytes; i++) {\n        const byte = dataArray[offset + i];\n        if (byte === 0) {\n            return string;\n        }\n\n        string += String.fromCharCode(byte);\n    }\n    return string;\n}\n\n/**\n * Reads bytes as an ASCII string from an IndexedByteArray.\n * @param dataArray the IndexedByteArray to read from.\n * @param bytes the amount of bytes to read.\n * @returns the string.\n */\nexport function readBinaryStringIndexed(\n    dataArray: IndexedByteArray,\n    bytes: number\n) {\n    const startIndex = dataArray.currentIndex;\n    dataArray.currentIndex += bytes;\n    return readBinaryString(dataArray, bytes, startIndex);\n}\n\n/**\n * Gets ASCII bytes from string.\n * @param string the string.\n * @param addZero adds a zero terminator at the end.\n * @param ensureEven ensures even byte count.\n * @returns the binary data.\n */\nexport function getStringBytes(\n    string: string,\n    addZero = false,\n    ensureEven = false\n): IndexedByteArray {\n    let len = string.length;\n    if (addZero) {\n        len++;\n    }\n    if (ensureEven && len % 2 !== 0) {\n        len++;\n    }\n    const arr = new IndexedByteArray(len);\n    writeBinaryStringIndexed(arr, string);\n    return arr;\n}\n\n/**\n * Writes ASCII bytes into a specified array.\n * @param string the string.\n * @param outArray the target array\n * @param padLength pad with zeros if the string is shorter\n * @returns modified _in-place_\n */\nexport function writeBinaryStringIndexed(\n    outArray: IndexedByteArray,\n    string: string,\n    padLength = 0\n): IndexedByteArray {\n    if (padLength > 0) {\n        if (string.length > padLength) {\n            string = string.slice(0, padLength);\n        }\n    }\n    for (let i = 0; i < string.length; i++) {\n        outArray[outArray.currentIndex++] = string.charCodeAt(i);\n    }\n\n    // Pad with zeros if needed\n    if (padLength > string.length) {\n        for (let i = 0; i < padLength - string.length; i++) {\n            outArray[outArray.currentIndex++] = 0;\n        }\n    }\n    return outArray;\n}\n", "import type { IndexedByteArray } from \"../indexed_array\";\n\n/**\n * Reads the number as little endian from an IndexedByteArray.\n * @param dataArray the array to read from.\n * @param bytesAmount the number of bytes to read.\n * @returns the number.\n */\nexport function readLittleEndianIndexed(\n    dataArray: IndexedByteArray,\n    bytesAmount: number\n): number {\n    const res = readLittleEndian(\n        dataArray,\n        bytesAmount,\n        dataArray.currentIndex\n    );\n    dataArray.currentIndex += bytesAmount;\n    return res;\n}\n\n/**\n * Reads the number as little endian.\n * @param dataArray the array to read from.\n * @param bytesAmount the number of bytes to read.\n * @param offset the offset to start reading at.\n * @returns the number.\n */\nexport function readLittleEndian(\n    dataArray: number[] | ArrayLike<number>,\n    bytesAmount: number,\n    offset = 0\n) {\n    let out = 0;\n    for (let i = 0; i < bytesAmount; i++) {\n        out |= dataArray[offset + i] << (i * 8);\n    }\n    // Make sure it stays unsigned\n    return out >>> 0;\n}\n\n/**\n * Writes a number as little endian seems to also work for negative numbers so yay?\n * @param dataArray the IndexedByteArray to write to.\n * @param number the number to write.\n * @param byteTarget the amount of bytes to use. Excess bytes will be set to zero.\n * @returns the Big endian representation of the number.\n */\nexport function writeLittleEndianIndexed(\n    dataArray: IndexedByteArray,\n    number: number,\n    byteTarget: number\n) {\n    for (let i = 0; i < byteTarget; i++) {\n        dataArray[dataArray.currentIndex++] = (number >> (i * 8)) & 0xff;\n    }\n}\n\n/**\n * Writes a WORD (SHORT)\n */\nexport function writeWord(dataArray: IndexedByteArray, word: number) {\n    dataArray[dataArray.currentIndex++] = word & 0xff;\n    dataArray[dataArray.currentIndex++] = word >> 8;\n}\n\n/**\n * Writes a DWORD (INT)\n */\nexport function writeDword(dataArray: IndexedByteArray, dword: number) {\n    writeLittleEndianIndexed(dataArray, dword, 4);\n}\n\n/**\n * Reads two bytes as a signed short.\n */\nexport function signedInt16(byte1: number, byte2: number): number {\n    const val = (byte2 << 8) | byte1;\n    if (val > 32767) {\n        return val - 65536;\n    }\n    return val;\n}\n\n/**\n * Reads a byte as a signed char.\n */\nexport function signedInt8(byte: number): number {\n    if (byte > 127) {\n        return byte - 256;\n    }\n    return byte;\n}\n", "import { IndexedByteArray } from \"./indexed_array\";\nimport {\n    readLittleEndianIndexed,\n    writeDword\n} from \"./byte_functions/little_endian\";\nimport {\n    readBinaryString,\n    readBinaryStringIndexed,\n    writeBinaryStringIndexed\n} from \"./byte_functions/string\";\nimport type {\n    DLSChunkFourCC,\n    DLSInfoFourCC,\n    SF2ChunkFourCC,\n    SF2InfoFourCC,\n    SoundBankInfoFourCC\n} from \"../soundbank/types\";\n\nimport type { RMIDInfoFourCC } from \"../midi/types\";\n\nexport type GenericRIFFFourCC = \"RIFF\" | \"LIST\" | \"INFO\";\nexport type WAVFourCC = \"wave\" | \"cue \" | \"fmt \";\nexport type FourCC =\n    | GenericRIFFFourCC\n    | SoundBankInfoFourCC\n    | SF2InfoFourCC\n    | SF2ChunkFourCC\n    | DLSInfoFourCC\n    | DLSChunkFourCC\n    | RMIDInfoFourCC\n    | WAVFourCC;\n\n/**\n * Riff_chunk.ts\n * reads a riff chunk and stores it as a class\n */\n\nexport class RIFFChunk {\n    /**\n     * The chunks FourCC code.\n     */\n    public readonly header: FourCC;\n\n    /**\n     * Chunk's size, in bytes.\n     */\n    public readonly size: number;\n\n    /**\n     * Chunk's binary data. Note that this will have a length of 0 if \"readData\" was set to false.\n     */\n    public readonly data: IndexedByteArray;\n\n    /**\n     * Creates a new RIFF chunk.\n     */\n    public constructor(header: FourCC, size: number, data: IndexedByteArray) {\n        this.header = header;\n        this.size = size;\n        this.data = data;\n    }\n}\n\nexport function readRIFFChunk(\n    dataArray: IndexedByteArray,\n    readData = true,\n    forceShift = false\n): RIFFChunk {\n    const header = readBinaryStringIndexed(dataArray, 4) as FourCC;\n\n    let size = readLittleEndianIndexed(dataArray, 4);\n    // @ts-expect-error Not all RIFF files are compliant\n    if (header === \"\") {\n        // Safeguard against evil DLS files\n        // The test case: CrysDLS v1.23.dls\n        // https://github.com/spessasus/spessasynth_core/issues/5\n        size = 0;\n    }\n    let chunkData: IndexedByteArray;\n    if (readData) {\n        chunkData = dataArray.slice(\n            dataArray.currentIndex,\n            dataArray.currentIndex + size\n        );\n    } else {\n        chunkData = new IndexedByteArray(0);\n    }\n    if (readData || forceShift) {\n        dataArray.currentIndex += size;\n        if (size % 2 !== 0) {\n            dataArray.currentIndex++;\n        }\n    }\n\n    return new RIFFChunk(header, size, chunkData);\n}\n\n/**\n * Writes a RIFF chunk correctly\n * @param header fourCC\n * @param data chunk data\n * @param addZeroByte add a zero byte into the chunk size\n * @param isList adds \"LIST\" as the chunk type and writes the actual type at the start of the data\n * @returns the binary data\n */\nexport function writeRIFFChunkRaw(\n    header: FourCC,\n    data: Uint8Array,\n    addZeroByte = false,\n    isList = false\n): IndexedByteArray {\n    if (header.length !== 4) {\n        throw new Error(`Invalid header length: ${header}`);\n    }\n    let dataStartOffset = 8;\n    let headerWritten = header;\n    let dataLength = data.length;\n    if (addZeroByte) {\n        dataLength++;\n    }\n    let writtenSize = dataLength;\n    if (isList) {\n        // Written header is LIST and the passed header is the first 4 bytes of chunk data\n        dataStartOffset += 4;\n        writtenSize += 4;\n        headerWritten = \"LIST\";\n    }\n    let finalSize = dataStartOffset + dataLength;\n    if (finalSize % 2 !== 0) {\n        // Pad byte does not get included in the size\n        finalSize++;\n    }\n\n    const outArray = new IndexedByteArray(finalSize);\n    // FourCC (\"RIFF\", \"LIST\", \"pdta\" etc.)\n    writeBinaryStringIndexed(outArray, headerWritten);\n    // Chunk size\n    writeDword(outArray, writtenSize);\n    if (isList) {\n        // List type (e.g. \"INFO\")\n        writeBinaryStringIndexed(outArray, header);\n    }\n    outArray.set(data, dataStartOffset);\n    return outArray;\n}\n\n/**\n * Writes RIFF chunk given binary blobs\n * @param header fourCC\n * @param chunks chunk data parts, it will be combined in order\n * @param isList adds \"LIST\" as the chunk type and writes the actual type at the start of the data\n * @returns the binary data\n */\nexport function writeRIFFChunkParts(\n    header: FourCC,\n    chunks: Uint8Array[],\n    isList = false\n): IndexedByteArray {\n    let dataOffset = 8;\n    let headerWritten = header;\n    const dataLength = chunks.reduce((len, c) => c.length + len, 0);\n    let writtenSize = dataLength;\n    if (isList) {\n        // Written header is LIST and the passed header is the first 4 bytes of chunk data\n        dataOffset += 4;\n        writtenSize += 4;\n        headerWritten = \"LIST\";\n    }\n    let finalSize = dataOffset + dataLength;\n    if (finalSize % 2 !== 0) {\n        // Pad byte does not get included in the size\n        finalSize++;\n    }\n\n    const outArray = new IndexedByteArray(finalSize);\n    // FourCC (\"RIFF\", \"LIST\", \"pdta\" etc.)\n    writeBinaryStringIndexed(outArray, headerWritten);\n    // Chunk size\n    writeDword(outArray, writtenSize);\n    if (isList) {\n        // List type (e.g. \"INFO\")\n        writeBinaryStringIndexed(outArray, header);\n    }\n    chunks.forEach((c) => {\n        outArray.set(c, dataOffset);\n        dataOffset += c.length;\n    });\n    return outArray;\n}\n\n/**\n * Finds a given type in a list.\n * @remarks\n * Also skips the current index to after the list FourCC.\n */\nexport function findRIFFListType(\n    collection: RIFFChunk[],\n    type: FourCC\n): RIFFChunk | undefined {\n    return collection.find((c) => {\n        if (c.header !== \"LIST\") {\n            return false;\n        }\n        c.data.currentIndex = 4;\n        return readBinaryString(c.data, 4) === type;\n    });\n}\n", "/**\n * Fills the object with default values.\n * @param obj object to fill.\n * @param defObj object to fill with.\n */\nexport function fillWithDefaults<T>(obj: Partial<T> | undefined, defObj: T): T {\n    return {\n        ...defObj,\n        ...(obj ?? {})\n    };\n}\n", "import { IndexedByteArray } from \"./indexed_array\";\nimport { writeBinaryStringIndexed } from \"./byte_functions/string\";\nimport { writeRIFFChunkParts, writeRIFFChunkRaw } from \"./riff_chunk\";\nimport { writeLittleEndianIndexed } from \"./byte_functions/little_endian\";\nimport { DEFAULT_WAV_WRITE_OPTIONS, type WaveWriteOptions } from \"./exports\";\nimport { fillWithDefaults } from \"./fill_with_defaults\";\n\n/**\n * Writes an audio into a valid WAV file.\n * @param audioData the audio data channels.\n * @param sampleRate the sample rate, in Hertz.\n * @param options Additional options for writing the file.\n * @returns the binary file.\n */\nexport function audioToWav(\n    audioData: Float32Array[],\n    sampleRate: number,\n    options: Partial<WaveWriteOptions> = DEFAULT_WAV_WRITE_OPTIONS\n): ArrayBuffer {\n    const length = audioData[0].length;\n    const numChannels = audioData.length;\n    const bytesPerSample = 2; // 16-bit PCM\n\n    const fullOptions = fillWithDefaults(options, DEFAULT_WAV_WRITE_OPTIONS);\n    const loop = fullOptions.loop;\n    const metadata = fullOptions.metadata;\n    // Prepare INFO chunk\n    let infoChunk = new IndexedByteArray(0);\n    const infoOn = Object.keys(metadata).length > 0;\n    // INFO chunk\n    if (infoOn) {\n        const encoder = new TextEncoder();\n        const infoChunks = [\n            writeRIFFChunkRaw(\n                \"ICMT\",\n                encoder.encode(\"Created with SpessaSynth\"),\n                true\n            )\n        ];\n        if (metadata.artist) {\n            infoChunks.push(\n                writeRIFFChunkRaw(\"IART\", encoder.encode(metadata.artist), true)\n            );\n        }\n        if (metadata.album) {\n            infoChunks.push(\n                writeRIFFChunkRaw(\"IPRD\", encoder.encode(metadata.album), true)\n            );\n        }\n        if (metadata.genre) {\n            infoChunks.push(\n                writeRIFFChunkRaw(\"IGNR\", encoder.encode(metadata.genre), true)\n            );\n        }\n        if (metadata.title) {\n            infoChunks.push(\n                writeRIFFChunkRaw(\"INAM\", encoder.encode(metadata.title), true)\n            );\n        }\n        infoChunk = writeRIFFChunkParts(\"INFO\", infoChunks, true);\n    }\n\n    // Prepare CUE chunk\n    let cueChunk = new IndexedByteArray(0);\n    const cueOn = loop?.end !== undefined && loop?.start !== undefined;\n    if (cueOn) {\n        const loopStartSamples = Math.floor(loop.start * sampleRate);\n        const loopEndSamples = Math.floor(loop.end * sampleRate);\n\n        const cueStart = new IndexedByteArray(24);\n        writeLittleEndianIndexed(cueStart, 0, 4); // DwIdentifier\n        writeLittleEndianIndexed(cueStart, 0, 4); // DwPosition\n        writeBinaryStringIndexed(cueStart, \"data\"); // Cue point ID\n        writeLittleEndianIndexed(cueStart, 0, 4); // ChunkStart, always 0\n        writeLittleEndianIndexed(cueStart, 0, 4); // BlockStart, always 0\n        writeLittleEndianIndexed(cueStart, loopStartSamples, 4); // SampleOffset\n\n        const cueEnd = new IndexedByteArray(24);\n        writeLittleEndianIndexed(cueEnd, 1, 4); // DwIdentifier\n        writeLittleEndianIndexed(cueEnd, 0, 4); // DwPosition\n        writeBinaryStringIndexed(cueEnd, \"data\"); // Cue point ID\n        writeLittleEndianIndexed(cueEnd, 0, 4); // ChunkStart, always 0\n        writeLittleEndianIndexed(cueEnd, 0, 4); // BlockStart, always 0\n        writeLittleEndianIndexed(cueEnd, loopEndSamples, 4); // SampleOffset\n\n        cueChunk = writeRIFFChunkParts(\"cue \", [\n            new IndexedByteArray([2, 0, 0, 0]), // Cue points count\n            cueStart,\n            cueEnd\n        ]);\n    }\n\n    // Prepare the header\n    const headerSize = 44;\n    const dataSize = length * numChannels * bytesPerSample; // 16-bit per channel\n    const fileSize =\n        headerSize + dataSize + infoChunk.length + cueChunk.length - 8; // Total file size minus the first 8 bytes\n    const header = new Uint8Array(headerSize);\n\n    // 'RIFF'\n    header.set([82, 73, 70, 70], 0);\n    // File length\n    header.set(\n        new Uint8Array([\n            fileSize & 0xff,\n            (fileSize >> 8) & 0xff,\n            (fileSize >> 16) & 0xff,\n            (fileSize >> 24) & 0xff\n        ]),\n        4\n    );\n    // 'WAVE'\n    header.set([87, 65, 86, 69], 8);\n    // 'fmt '\n    header.set([102, 109, 116, 32], 12);\n    // Fmt chunk length\n    header.set([16, 0, 0, 0], 16); // 16 for PCM\n    // Audio format (PCM)\n    header.set([1, 0], 20);\n    // Number of channels (2)\n    header.set([numChannels & 255, numChannels >> 8], 22);\n    // Sample rate\n    header.set(\n        new Uint8Array([\n            sampleRate & 0xff,\n            (sampleRate >> 8) & 0xff,\n            (sampleRate >> 16) & 0xff,\n            (sampleRate >> 24) & 0xff\n        ]),\n        24\n    );\n    // Byte rate (sample rate * block align)\n    const byteRate = sampleRate * numChannels * bytesPerSample; // 16-bit per channel\n    header.set(\n        new Uint8Array([\n            byteRate & 0xff,\n            (byteRate >> 8) & 0xff,\n            (byteRate >> 16) & 0xff,\n            (byteRate >> 24) & 0xff\n        ]),\n        28\n    );\n    // Block align (channels * bytes per sample)\n    header.set([numChannels * bytesPerSample, 0], 32); // N channels * 16-bit per channel / 8\n    // Bits per sample\n    header.set([16, 0], 34); // 16-bit\n\n    // Data chunk identifier 'data'\n    header.set([100, 97, 116, 97], 36);\n    // Data chunk length\n    header.set(\n        new Uint8Array([\n            dataSize & 0xff,\n            (dataSize >> 8) & 0xff,\n            (dataSize >> 16) & 0xff,\n            (dataSize >> 24) & 0xff\n        ]),\n        40\n    );\n\n    const wavData = new Uint8Array(fileSize + 8);\n    let offset = headerSize;\n    wavData.set(header, 0);\n\n    // Interleave audio data (combine channels)\n    let multiplier = 32767;\n    if (fullOptions.normalizeAudio) {\n        // Find min and max values to prevent clipping when converting to 16 bits\n        const numSamples = audioData[0].length;\n\n        let maxAbsValue = 0;\n\n        for (let ch = 0; ch < numChannels; ch++) {\n            const data = audioData[ch];\n            for (let i = 0; i < numSamples; i++) {\n                const sample = Math.abs(data[i]);\n                if (sample > maxAbsValue) {\n                    maxAbsValue = sample;\n                }\n            }\n        }\n\n        multiplier = maxAbsValue > 0 ? 32767 / maxAbsValue : 1;\n    }\n    for (let i = 0; i < length; i++) {\n        // Interleave both channels\n        audioData.forEach((d) => {\n            const sample = Math.min(32767, Math.max(-32768, d[i] * multiplier));\n            // Convert to 16-bit\n            wavData[offset++] = sample & 0xff;\n            wavData[offset++] = (sample >> 8) & 0xff;\n        });\n    }\n\n    if (infoOn) {\n        wavData.set(infoChunk, offset);\n        offset += infoChunk.length;\n    }\n    if (cueOn) {\n        wavData.set(cueChunk, offset);\n    }\n\n    return wavData.buffer;\n}\n", "import type { IndexedByteArray } from \"../indexed_array\";\n\n/**\n * Reads number as Big endian.\n * @param dataArray the array to read from.\n * @param bytesAmount the number of bytes to read.\n * @param offset the offset to start reading from.\n * @returns the number.\n */\nexport function readBigEndian(\n    dataArray: number[] | ArrayLike<number>,\n    bytesAmount: number,\n    offset = 0\n) {\n    let out = 0;\n    for (let i = 0; i < bytesAmount; i++) {\n        out = (out << 8) | dataArray[offset + i];\n    }\n    return out >>> 0;\n}\n\n/**\n * Reads number as Big endian from an IndexedByteArray.\n * @param dataArray the array to read from.\n * @param bytesAmount the number of bytes to read.\n * @returns the number.\n */\nexport function readBigEndianIndexed(\n    dataArray: IndexedByteArray,\n    bytesAmount: number\n) {\n    const res = readBigEndian(dataArray, bytesAmount, dataArray.currentIndex);\n    dataArray.currentIndex += bytesAmount;\n    return res;\n}\n\n/**\n * Writes a number as Big endian.\n * @param number the number to write.\n * @param bytesAmount the amount of bytes to use. Excess bytes will be set to zero.\n * @returns the Big endian representation of the number.\n */\nexport function writeBigEndian(number: number, bytesAmount: number) {\n    const bytes = new Array<number>(bytesAmount).fill(0);\n    for (let i = bytesAmount - 1; i >= 0; i--) {\n        bytes[i] = number & 0xff;\n        number >>= 8;\n    }\n\n    return bytes;\n}\n", "import type { IndexedByteArray } from \"../indexed_array\";\n\n/**\n * Reads VLQ from a MIDI byte array.\n * @param MIDIbyteArray the array to read from.\n * @returns the number.\n */\nexport function readVariableLengthQuantity(\n    MIDIbyteArray: IndexedByteArray\n): number {\n    let out = 0;\n    while (MIDIbyteArray) {\n        const byte = MIDIbyteArray[MIDIbyteArray.currentIndex++];\n        // Extract the first 7 bytes\n        out = (out << 7) | (byte & 127);\n\n        // If the last byte isn't 1, stop reading\n        if (byte >> 7 !== 1) {\n            break;\n        }\n    }\n    return out;\n}\n\n/**\n * Writes a VLQ from a number to a byte array.\n * @param number the number to write.\n * @returns the VLQ representation of the number.\n */\nexport function writeVariableLengthQuantity(number: number): number[] {\n    // Add the first byte\n    const bytes = [number & 127];\n    number >>= 7;\n\n    // Continue processing the remaining bytes\n    while (number > 0) {\n        bytes.unshift((number & 127) | 128);\n        number >>= 7;\n    }\n    return bytes;\n}\n", "/**\n * Other.ts\n * purpose: contains some useful functions that don't belong in any specific category\n */\n\n/**\n * Formats the given seconds to nice readable time\n * @param totalSeconds time in seconds\n */\nexport function formatTime(totalSeconds: number): {\n    seconds: number;\n    minutes: number;\n    time: string;\n} {\n    totalSeconds = Math.floor(totalSeconds);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = Math.round(totalSeconds - minutes * 60);\n    return {\n        minutes: minutes,\n        seconds: seconds,\n        time: `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`\n    };\n}\n\n/**\n * Does what it says\n */\nexport function arrayToHexString(arr: Iterable<number>): string {\n    let hexString = \"\";\n\n    for (const i of arr) {\n        const hex = i.toString(16).padStart(2, \"0\").toUpperCase();\n        hexString += hex;\n        hexString += \" \";\n    }\n\n    return hexString;\n}\n\nexport const consoleColors = {\n    warn: \"color: orange;\",\n    unrecognized: \"color: red;\",\n    info: \"color: aqua;\",\n    recognized: \"color: lime\",\n    value: \"color: yellow; background-color: black;\"\n};\n", "let tr;(()=>{var l=Uint8Array,T=Uint16Array,ur=Int32Array,W=new l([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),X=new l([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),wr=new l([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Y=function(r,a){for(var e=new T(31),f=0;f<31;++f)e[f]=a+=1<<r[f-1];for(var v=new ur(e[30]),f=1;f<30;++f)for(var g=e[f];g<e[f+1];++g)v[g]=g-e[f]<<5|f;return{b:e,r:v}},Z=Y(W,2),$=Z.b,cr=Z.r;$[28]=258,cr[258]=28;var j=Y(X,0),hr=j.b,Fr=j.r,_=new T(32768);for(i=0;i<32768;++i)c=(i&43690)>>1|(i&21845)<<1,c=(c&52428)>>2|(c&13107)<<2,c=(c&61680)>>4|(c&3855)<<4,_[i]=((c&65280)>>8|(c&255)<<8)>>1;var c,i,A=function(r,a,e){for(var f=r.length,v=0,g=new T(a);v<f;++v)r[v]&&++g[r[v]-1];var k=new T(a);for(v=1;v<a;++v)k[v]=k[v-1]+g[v-1]<<1;var b;if(e){b=new T(1<<a);var m=15-a;for(v=0;v<f;++v)if(r[v])for(var U=v<<4|r[v],x=a-r[v],n=k[r[v]-1]++<<x,o=n|(1<<x)-1;n<=o;++n)b[_[n]>>m]=U}else for(b=new T(f),v=0;v<f;++v)r[v]&&(b[v]=_[k[r[v]-1]++]>>15-r[v]);return b},M=new l(288);for(i=0;i<144;++i)M[i]=8;var i;for(i=144;i<256;++i)M[i]=9;var i;for(i=256;i<280;++i)M[i]=7;var i;for(i=280;i<288;++i)M[i]=8;var i,L=new l(32);for(i=0;i<32;++i)L[i]=5;var i,gr=A(M,9,1),br=A(L,5,1),q=function(r){for(var a=r[0],e=1;e<r.length;++e)r[e]>a&&(a=r[e]);return a},u=function(r,a,e){var f=a/8|0;return(r[f]|r[f+1]<<8)>>(a&7)&e},C=function(r,a){var e=a/8|0;return(r[e]|r[e+1]<<8|r[e+2]<<16)>>(a&7)},kr=function(r){return(r+7)/8|0},xr=function(r,a,e){return(a==null||a<0)&&(a=0),(e==null||e>r.length)&&(e=r.length),new l(r.subarray(a,e))},yr=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],h=function(r,a,e){var f=new Error(a||yr[r]);if(f.code=r,Error.captureStackTrace&&Error.captureStackTrace(f,h),!e)throw f;return f},Sr=function(r,a,e,f){var v=r.length,g=f?f.length:0;if(!v||a.f&&!a.l)return e||new l(0);var k=!e,b=k||a.i!=2,m=a.i;k&&(e=new l(v*3));var U=function(fr){var or=e.length;if(fr>or){var lr=new l(Math.max(or*2,fr));lr.set(e),e=lr}},x=a.f||0,n=a.p||0,o=a.b||0,S=a.l,I=a.d,z=a.m,D=a.n,G=v*8;do{if(!S){x=u(r,n,1);var H=u(r,n+1,3);if(n+=3,H)if(H==1)S=gr,I=br,z=9,D=5;else if(H==2){var N=u(r,n,31)+257,s=u(r,n+10,15)+4,d=N+u(r,n+5,31)+1;n+=14;for(var F=new l(d),P=new l(19),t=0;t<s;++t)P[wr[t]]=u(r,n+t*3,7);n+=s*3;for(var rr=q(P),Ar=(1<<rr)-1,Mr=A(P,rr,1),t=0;t<d;){var ar=Mr[u(r,n,Ar)];n+=ar&15;var w=ar>>4;if(w<16)F[t++]=w;else{var E=0,O=0;for(w==16?(O=3+u(r,n,3),n+=2,E=F[t-1]):w==17?(O=3+u(r,n,7),n+=3):w==18&&(O=11+u(r,n,127),n+=7);O--;)F[t++]=E}}var er=F.subarray(0,N),y=F.subarray(N);z=q(er),D=q(y),S=A(er,z,1),I=A(y,D,1)}else h(1);else{var w=kr(n)+4,J=r[w-4]|r[w-3]<<8,K=w+J;if(K>v){m&&h(0);break}b&&U(o+J),e.set(r.subarray(w,K),o),a.b=o+=J,a.p=n=K*8,a.f=x;continue}if(n>G){m&&h(0);break}}b&&U(o+131072);for(var Ur=(1<<z)-1,zr=(1<<D)-1,Q=n;;Q=n){var E=S[C(r,n)&Ur],p=E>>4;if(n+=E&15,n>G){m&&h(0);break}if(E||h(2),p<256)e[o++]=p;else if(p==256){Q=n,S=null;break}else{var nr=p-254;if(p>264){var t=p-257,B=W[t];nr=u(r,n,(1<<B)-1)+$[t],n+=B}var R=I[C(r,n)&zr],V=R>>4;R||h(3),n+=R&15;var y=hr[V];if(V>3){var B=X[V];y+=C(r,n)&(1<<B)-1,n+=B}if(n>G){m&&h(0);break}b&&U(o+131072);var vr=o+nr;if(o<y){var ir=g-y,Dr=Math.min(y,vr);for(ir+o<0&&h(3);o<Dr;++o)e[o]=f[ir+o]}for(;o<vr;++o)e[o]=e[o-y]}}a.l=S,a.p=Q,a.b=o,a.f=x,S&&(x=1,a.m=z,a.d=I,a.n=D)}while(!x);return o!=e.length&&k?xr(e,0,o):e.subarray(0,o)},Tr=new l(0);function mr(r,a){return Sr(r,{i:2},a&&a.out,a&&a.dictionary)}var Er=typeof TextDecoder<\"u\"&&new TextDecoder,pr=0;try{Er.decode(Tr,{stream:!0}),pr=1}catch{}tr=mr})();export{tr as inflateSync};\n", "// @ts-expect-error minified lib that I can't move\nimport { inflateSync } from \"./fflate.min\";\n\ntype inflateFunc = (input: Uint8Array) => Uint8Array<ArrayBuffer>;\n\n// @ts-expect-error minified lib that I can't move\nconst inf: inflateFunc = inflateSync as inflateFunc;\n\nexport { inf as inflateSync };\n", "let ENABLE_INFO = false;\nlet ENABLE_WARN = true;\nlet ENABLE_GROUP = false;\n\n/**\n * Enables or disables logging.\n * @param enableInfo enables info.\n * @param enableWarn enables warning.\n * @param enableGroup enables groups.\n */\nexport function SpessaSynthLogging(\n    enableInfo: boolean,\n    enableWarn: boolean,\n    enableGroup: boolean\n) {\n    ENABLE_INFO = enableInfo;\n    ENABLE_WARN = enableWarn;\n    ENABLE_GROUP = enableGroup;\n}\n\nexport function SpessaSynthInfo(...message: unknown[]) {\n    if (ENABLE_INFO) {\n        console.info(...message);\n    }\n}\n\nexport function SpessaSynthWarn(...message: unknown[]) {\n    if (ENABLE_WARN) {\n        console.warn(...message);\n    }\n}\n\nexport function SpessaSynthGroup(...message: unknown[]) {\n    if (ENABLE_GROUP) {\n        console.group(...message);\n    }\n}\n\nexport function SpessaSynthGroupCollapsed(...message: unknown[]) {\n    if (ENABLE_GROUP) {\n        console.groupCollapsed(...message);\n    }\n}\n\nexport function SpessaSynthGroupEnd() {\n    if (ENABLE_GROUP) {\n        console.groupEnd();\n    }\n}\n", "import { IndexedByteArray } from \"./indexed_array\";\nimport { audioToWav } from \"./write_wav\";\n\nimport { readBigEndian } from \"./byte_functions/big_endian\";\nimport { readLittleEndianIndexed } from \"./byte_functions/little_endian\";\nimport { readBinaryStringIndexed } from \"./byte_functions/string\";\nimport { readVariableLengthQuantity } from \"./byte_functions/variable_length_quantity\";\nimport { consoleColors } from \"./other\";\nimport { inflateSync } from \"../externals/fflate/fflate_wrapper\";\nimport {\n    SpessaSynthGroup,\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo,\n    SpessaSynthLogging,\n    SpessaSynthWarn\n} from \"./loggin\";\nimport type { MIDILoop } from \"../midi/types\";\n\nimport type { FourCC } from \"./riff_chunk\";\n\n// You shouldn't use these...\nconst SpessaSynthCoreUtils = {\n    consoleColors,\n    SpessaSynthInfo,\n    SpessaSynthWarn,\n    SpessaSynthGroupCollapsed,\n    // noinspection JSUnusedGlobalSymbols\n    SpessaSynthGroup,\n    SpessaSynthGroupEnd,\n    // noinspection JSUnusedGlobalSymbols\n    readBytesAsUintBigEndian: readBigEndian,\n    readLittleEndian: readLittleEndianIndexed,\n    readBytesAsString: readBinaryStringIndexed,\n    // noinspection JSUnusedGlobalSymbols\n    readVariableLengthQuantity,\n    inflateSync\n};\n\nexport {\n    IndexedByteArray,\n    audioToWav,\n    SpessaSynthLogging,\n    SpessaSynthCoreUtils,\n    type FourCC\n};\n\nexport const DEFAULT_WAV_WRITE_OPTIONS: WaveWriteOptions = {\n    normalizeAudio: true,\n    loop: undefined,\n    metadata: {}\n};\n\nexport interface WaveWriteOptions {\n    /**\n     * This will find the max sample point and set it to 1, and scale others with it. Recommended\n     */\n    normalizeAudio: boolean;\n    /**\n     * The loop start and end points in seconds. Undefined if no loop should be written.\n     */\n    loop?: MIDILoop;\n    /**\n     * The metadata to write into the file.\n     */\n    metadata: Partial<WaveMetadata>;\n}\n\nexport interface WaveMetadata {\n    /**\n     * The song's title.\n     */\n    title: string;\n    /**\n     * The song's artist.\n     */\n    artist: string;\n    /**\n     * The song's album.\n     */\n    album: string;\n    /**\n     * The song's genre.\n     */\n    genre: string;\n}\n", "/**\n * Midi_message.ts\n * purpose: contains enums for midi events and controllers and functions to parse them\n */\nimport type { MIDIMessageType } from \"./enums\";\n\nexport class MIDIMessage {\n    /**\n     * Absolute number of MIDI ticks from the start of the track.\n     */\n    public ticks: number;\n\n    /**\n     * The MIDI message status byte. Note that for meta events, it is the second byte. (not 0xFF)\n     */\n    public statusByte: MIDIMessageType;\n\n    /**\n     * Message's binary data\n     */\n    public data: Uint8Array<ArrayBuffer>;\n\n    /**\n     * Creates a new MIDI message\n     * @param ticks time of this message in absolute MIDI ticks\n     * @param byte the message status byte\n     * @param data the message's binary data\n     */\n    public constructor(\n        ticks: number,\n        byte: MIDIMessageType,\n        data: Uint8Array<ArrayBuffer>\n    ) {\n        this.ticks = ticks;\n        this.statusByte = byte;\n        this.data = data;\n    }\n}\n\n/**\n * Gets the status byte's channel\n * @param statusByte the MIDI status byte\n * @returns channel is -1 for system messages -2 for meta and -3 for sysex\n */\nexport function getChannel(statusByte: MIDIMessageType): number {\n    const eventType = statusByte & 0xf0;\n    const channel = statusByte & 0x0f;\n\n    let resultChannel = channel;\n\n    switch (eventType) {\n        // Midi (and meta and sysex headers)\n        case 0x80:\n        case 0x90:\n        case 0xa0:\n        case 0xb0:\n        case 0xc0:\n        case 0xd0:\n        case 0xe0:\n            break;\n\n        case 0xf0:\n            switch (channel) {\n                case 0x0:\n                    resultChannel = -3;\n                    break;\n\n                case 0x1:\n                case 0x2:\n                case 0x3:\n                case 0x4:\n                case 0x5:\n                case 0x6:\n                case 0x7:\n                case 0x8:\n                case 0x9:\n                case 0xa:\n                case 0xb:\n                case 0xc:\n                case 0xd:\n                case 0xe:\n                    resultChannel = -1;\n                    break;\n\n                case 0xf:\n                    resultChannel = -2;\n                    break;\n            }\n            break;\n\n        default:\n            resultChannel = -1;\n    }\n\n    return resultChannel;\n}\n\n/**\n * Gets the event's status and channel from the status byte\n * @param statusByte the status byte\n * @returns channel will be -1 for sysex and meta\n */\nexport function getEvent(statusByte: MIDIMessageType): {\n    channel: number;\n    status: number;\n} {\n    const status = statusByte & 0xf0;\n    const channel = statusByte & 0x0f;\n\n    let eventChannel = -1;\n    let eventStatus = statusByte;\n\n    if (status >= 0x80 && status <= 0xe0) {\n        eventChannel = channel;\n        eventStatus = status as MIDIMessageType;\n    }\n\n    return {\n        status: eventStatus,\n        channel: eventChannel\n    };\n}\n\nexport const dataBytesAmount = {\n    0x8: 2, // Note off\n    0x9: 2, // Note on\n    0xa: 2, // Note at\n    0xb: 2, // Cc change\n    0xc: 1, // Pg change\n    0xd: 1, // Channel after touch\n    0xe: 2 // Pitch wheel\n} as const;\n", "// All the midi statuses dictionary\nexport const midiMessageTypes = {\n    noteOff: 0x80,\n    noteOn: 0x90,\n    polyPressure: 0xa0,\n    controllerChange: 0xb0,\n    programChange: 0xc0,\n    channelPressure: 0xd0,\n    pitchWheel: 0xe0,\n    systemExclusive: 0xf0,\n    timecode: 0xf1,\n    songPosition: 0xf2,\n    songSelect: 0xf3,\n    tuneRequest: 0xf6,\n    clock: 0xf8,\n    start: 0xfa,\n    continue: 0xfb,\n    stop: 0xfc,\n    activeSensing: 0xfe,\n    reset: 0xff,\n    sequenceNumber: 0x00,\n    text: 0x01,\n    copyright: 0x02,\n    trackName: 0x03,\n    instrumentName: 0x04,\n    lyric: 0x05,\n    marker: 0x06,\n    cuePoint: 0x07,\n    programName: 0x08,\n    midiChannelPrefix: 0x20,\n    midiPort: 0x21,\n    endOfTrack: 0x2f,\n    setTempo: 0x51,\n    smpteOffset: 0x54,\n    timeSignature: 0x58,\n    keySignature: 0x59,\n    sequenceSpecific: 0x7f\n} as const;\n\nexport type MIDIMessageType =\n    (typeof midiMessageTypes)[keyof typeof midiMessageTypes];\n\n// All midi controllers dictionary\nexport const midiControllers = {\n    bankSelect: 0,\n    modulationWheel: 1,\n    breathController: 2,\n    undefinedCC3: 3,\n    footController: 4,\n    portamentoTime: 5,\n    dataEntryMSB: 6,\n    mainVolume: 7,\n    balance: 8,\n    undefinedCC9: 9,\n    pan: 10,\n    expressionController: 11,\n    effectControl1: 12,\n    effectControl2: 13,\n    undefinedCC14: 14,\n    undefinedCC15: 15,\n    generalPurposeController1: 16,\n    generalPurposeController2: 17,\n    generalPurposeController3: 18,\n    generalPurposeController4: 19,\n    undefinedCC20: 20,\n    undefinedCC21: 21,\n    undefinedCC22: 22,\n    undefinedCC23: 23,\n    undefinedCC24: 24,\n    undefinedCC25: 25,\n    undefinedCC26: 26,\n    undefinedCC27: 27,\n    undefinedCC28: 28,\n    undefinedCC29: 29,\n    undefinedCC30: 30,\n    undefinedCC31: 31,\n    bankSelectLSB: 32,\n    modulationWheelLSB: 33,\n    breathControllerLSB: 34,\n    undefinedCC3LSB: 35,\n    footControllerLSB: 36,\n    portamentoTimeLSB: 37,\n    dataEntryLSB: 38,\n    mainVolumeLSB: 39,\n    balanceLSB: 40,\n    undefinedCC9LSB: 41,\n    panLSB: 42,\n    expressionControllerLSB: 43,\n    effectControl1LSB: 44,\n    effectControl2LSB: 45,\n    undefinedCC14LSB: 46,\n    undefinedCC15LSB: 47,\n    undefinedCC16LSB: 48,\n    undefinedCC17LSB: 49,\n    undefinedCC18LSB: 50,\n    undefinedCC19LSB: 51,\n    undefinedCC20LSB: 52,\n    undefinedCC21LSB: 53,\n    undefinedCC22LSB: 54,\n    undefinedCC23LSB: 55,\n    undefinedCC24LSB: 56,\n    undefinedCC25LSB: 57,\n    undefinedCC26LSB: 58,\n    undefinedCC27LSB: 59,\n    undefinedCC28LSB: 60,\n    undefinedCC29LSB: 61,\n    undefinedCC30LSB: 62,\n    undefinedCC31LSB: 63,\n    sustainPedal: 64,\n    portamentoOnOff: 65,\n    sostenutoPedal: 66,\n    softPedal: 67,\n    legatoFootswitch: 68,\n    hold2Pedal: 69,\n    soundVariation: 70,\n    filterResonance: 71,\n    releaseTime: 72,\n    attackTime: 73,\n    brightness: 74,\n    decayTime: 75,\n    vibratoRate: 76,\n    vibratoDepth: 77,\n    vibratoDelay: 78,\n    soundController10: 79,\n    generalPurposeController5: 80,\n    generalPurposeController6: 81,\n    generalPurposeController7: 82,\n    generalPurposeController8: 83,\n    portamentoControl: 84,\n    undefinedCC85: 85,\n    undefinedCC86: 86,\n    undefinedCC87: 87,\n    undefinedCC88: 88,\n    undefinedCC89: 89,\n    undefinedCC90: 90,\n    reverbDepth: 91,\n    tremoloDepth: 92,\n    chorusDepth: 93,\n    detuneDepth: 94,\n    phaserDepth: 95,\n    dataIncrement: 96,\n    dataDecrement: 97,\n    nonRegisteredParameterLSB: 98,\n    nonRegisteredParameterMSB: 99,\n    registeredParameterLSB: 100,\n    registeredParameterMSB: 101,\n    undefinedCC102LSB: 102,\n    undefinedCC103LSB: 103,\n    undefinedCC104LSB: 104,\n    undefinedCC105LSB: 105,\n    undefinedCC106LSB: 106,\n    undefinedCC107LSB: 107,\n    undefinedCC108LSB: 108,\n    undefinedCC109LSB: 109,\n    undefinedCC110LSB: 110,\n    undefinedCC111LSB: 111,\n    undefinedCC112LSB: 112,\n    undefinedCC113LSB: 113,\n    undefinedCC114LSB: 114,\n    undefinedCC115LSB: 115,\n    undefinedCC116LSB: 116,\n    undefinedCC117LSB: 117,\n    undefinedCC118LSB: 118,\n    undefinedCC119LSB: 119,\n    allSoundOff: 120,\n    resetAllControllers: 121,\n    localControlOnOff: 122,\n    allNotesOff: 123,\n    omniModeOff: 124,\n    omniModeOn: 125,\n    monoModeOn: 126,\n    polyModeOn: 127\n} as const;\n\nexport type MIDIController =\n    (typeof midiControllers)[keyof typeof midiControllers];\n", "import { writeVariableLengthQuantity } from \"../../utils/byte_functions/variable_length_quantity\";\nimport { writeBigEndian } from \"../../utils/byte_functions/big_endian\";\nimport type { BasicMIDI } from \"../basic_midi\";\nimport { midiMessageTypes } from \"../enums\";\n\n/**\n * Exports the midi as a standard MIDI file\n * @param midi the MIDI to write\n */\nexport function writeMIDIInternal(midi: BasicMIDI): ArrayBuffer {\n    if (!midi.tracks) {\n        throw new Error(\"MIDI has no tracks!\");\n    }\n    const binaryTrackData: Uint8Array[] = [];\n    for (const track of midi.tracks) {\n        const binaryTrack = [];\n        let currentTick = 0;\n        let runningByte = undefined;\n        for (const event of track.events) {\n            // Ticks stored in MIDI are absolute, but SMF wants relative. Convert them here.\n            const deltaTicks = Math.max(0, event.ticks - currentTick);\n            // EndOfTrack is written automatically.\n            if (event.statusByte === midiMessageTypes.endOfTrack) {\n                currentTick += deltaTicks;\n                continue;\n            }\n            let messageData: number[];\n            // Determine the message\n            if (event.statusByte <= midiMessageTypes.sequenceSpecific) {\n                // This is a meta-message\n                // Syntax is FF<type><length><data>\n                messageData = [\n                    0xff,\n                    event.statusByte,\n                    ...writeVariableLengthQuantity(event.data.length),\n                    ...event.data\n                ];\n                // RP-001:\n                // Sysex events and meta-events cancel any running status which was in effect.\n                runningByte = undefined;\n            } else if (event.statusByte === midiMessageTypes.systemExclusive) {\n                // This is a system exclusive message\n                // Syntax is F0<length><data>\n                messageData = [\n                    0xf0,\n                    ...writeVariableLengthQuantity(event.data.length),\n                    ...event.data\n                ];\n                // RP-001:\n                // Sysex events and meta-events cancel any running status which was in effect.\n                runningByte = undefined;\n            } else {\n                // This is a midi message\n                messageData = [];\n                if (runningByte !== event.statusByte) {\n                    // Running byte was not the byte we want. Add the byte here.\n                    runningByte = event.statusByte;\n                    // Add the status byte to the midi\n                    messageData.push(event.statusByte);\n                }\n                // Add the data\n                messageData.push(...event.data);\n            }\n            // Write VLQ\n            binaryTrack.push(...writeVariableLengthQuantity(deltaTicks));\n            // Write the message\n            binaryTrack.push(...messageData);\n            currentTick += deltaTicks;\n        }\n        // Write endOfTrack\n        binaryTrack.push(0);\n        binaryTrack.push(0xff);\n        binaryTrack.push(midiMessageTypes.endOfTrack);\n        binaryTrack.push(0);\n        binaryTrackData.push(new Uint8Array(binaryTrack));\n    }\n\n    const writeText = (text: string, arr: number[]) => {\n        for (let i = 0; i < text.length; i++) {\n            arr.push(text.charCodeAt(i));\n        }\n    };\n\n    // Write the file\n    const binaryData: number[] = [];\n    // Write header\n    writeText(\"MThd\", binaryData); // MThd\n    binaryData.push(...writeBigEndian(6, 4)); // Length\n    binaryData.push(0, midi.format); // Format\n    binaryData.push(...writeBigEndian(midi.tracks.length, 2)); // Num tracks\n    binaryData.push(...writeBigEndian(midi.timeDivision, 2)); // Time division\n\n    // Write tracks\n    for (const track of binaryTrackData) {\n        // Write track header\n        writeText(\"MTrk\", binaryData); // MTrk\n        binaryData.push(...writeBigEndian(track.length, 4)); // Length\n        binaryData.push(...track); // Write data\n    }\n    return new Uint8Array(binaryData).buffer;\n}\n", "import type { SynthMethodOptions, SynthSystem } from \"../../types\";\n\n/**\n * Synthesizer's default voice cap.\n */\nexport const VOICE_CAP = 350;\n/**\n * Default MIDI drum channel.\n */\nexport const DEFAULT_PERCUSSION = 9;\n/**\n * MIDI channel count.\n */\nexport const MIDI_CHANNEL_COUNT = 16;\n/**\n * Default bank select and SysEx mode.\n */\nexport const DEFAULT_SYNTH_MODE: SynthSystem = \"gs\";\n\nexport const ALL_CHANNELS_OR_DIFFERENT_ACTION = -1;\n\n// Used globally to identify the embedded sound bank\n// This is used to prevent the embedded bank from being deleted.\nexport const EMBEDDED_SOUND_BANK_ID = `SPESSASYNTH_EMBEDDED_BANK_${Math.random()}_DO_NOT_DELETE`;\n\nexport const GENERATOR_OVERRIDE_NO_CHANGE_VALUE = 32767;\n\nexport const DEFAULT_SYNTH_METHOD_OPTIONS: SynthMethodOptions = {\n    time: 0\n};\n// If the note is released faster than that, it forced to last that long\n// This is used mostly for drum channels, where a lot of midis like to send instant note off after a note on\nexport const MIN_NOTE_LENGTH = 0.03;\n// This sounds way nicer for an instant hi-hat cutoff\nexport const MIN_EXCLUSIVE_LENGTH = 0.07;\nexport const SYNTHESIZER_GAIN = 1.0;\n", "import type { SynthSystem } from \"../synthesizer/types\";\n\nexport const XG_SFX_VOICE = 64;\n\nconst GM2_DEFAULT_BANK = 121;\n\n/**\n * A class for handling various ways of selecting patches (GS, XG, GM2)\n */\nexport class BankSelectHacks {\n    /**\n     * GM2 has a different default bank number\n     */\n    public static getDefaultBank(sys: SynthSystem) {\n        return sys === \"gm2\" ? GM2_DEFAULT_BANK : 0;\n    }\n\n    public static getDrumBank(sys: SynthSystem) {\n        switch (sys) {\n            default:\n                throw new Error(`${sys} doesn't have a bank MSB for drums.`);\n\n            case \"gm2\":\n                return 120;\n            case \"xg\":\n                return 127;\n        }\n    }\n\n    /**\n     * Checks if this bank number is XG drums\n     */\n    public static isXGDrums(bankMSB: number) {\n        return bankMSB === 120 || bankMSB === 126 || bankMSB === 127;\n    }\n\n    /**\n     * Checks if this MSB is a valid XG MSB\n     */\n    public static isValidXGMSB(bankMSB: number) {\n        return (\n            this.isXGDrums(bankMSB) ||\n            bankMSB === XG_SFX_VOICE ||\n            bankMSB === GM2_DEFAULT_BANK\n        );\n    }\n\n    public static isSystemXG(system: SynthSystem) {\n        return system === \"gm2\" || system === \"xg\";\n    }\n\n    public static addBankOffset(\n        bankMSB: number,\n        bankOffset: number,\n        xgDrums = true\n    ) {\n        if (this.isXGDrums(bankMSB) && xgDrums) {\n            return bankMSB;\n        }\n        return Math.min(bankMSB + bankOffset, 127);\n    }\n\n    public static subtrackBankOffset(\n        bankMSB: number,\n        bankOffset: number,\n        xgDrums = true\n    ) {\n        if (this.isXGDrums(bankMSB) && xgDrums) {\n            return bankMSB;\n        }\n        return Math.max(0, bankMSB - bankOffset);\n    }\n}\n", "import type { MIDIMessage } from \"../midi/midi_message\";\n\n/**\n * Checks if this is a XG ON system exclusive\n */\nexport function isXGOn(e: MIDIMessage) {\n    return (\n        e.data[0] === 0x43 && // Yamaha\n        e.data[2] === 0x4c && // XG ON\n        e.data[5] === 0x7e &&\n        e.data[6] === 0x00\n    );\n}\n\n/**\n * Checks if this is a GS Drum part system exclusive\n */\nexport function isGSDrumsOn(e: MIDIMessage) {\n    return (\n        e.data[0] === 0x41 && // Roland\n        e.data[2] === 0x42 && // GS\n        e.data[3] === 0x12 && // GS\n        e.data[4] === 0x40 && // System parameter\n        (e.data[5] & 0x10) !== 0 && // Part parameter\n        e.data[6] === 0x15\n    ); // Drum parts\n}\n\n/**\n * Checks if this is a GS ON system exclusive\n */\nexport function isGSOn(e: MIDIMessage) {\n    return (\n        e.data[0] === 0x41 && // Roland\n        e.data[2] === 0x42 && // GS\n        e.data[6] === 0x7f\n    ); // Mode set\n}\n\n/**\n * Checks if this is a GM ON system exclusive\n */\nexport function isGMOn(e: MIDIMessage) {\n    return (\n        e.data[0] === 0x7e && // Non realtime\n        e.data[2] === 0x09 && // Gm system\n        e.data[3] === 0x01\n    ); // Gm1\n}\n\n/**\n * Checks if this is a GM2 ON system exclusive\n */\nexport function isGM2On(e: MIDIMessage) {\n    return (\n        e.data[0] === 0x7e && // Non realtime\n        e.data[2] === 0x09 && // Gm system\n        e.data[3] === 0x03\n    ); // Gm2\n}\n", "import { MIDIMessage } from \"../midi_message\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { midiMessageTypes } from \"../enums\";\n\nexport function getGsOn(ticks: number): MIDIMessage {\n    return new MIDIMessage(\n        ticks,\n        midiMessageTypes.systemExclusive,\n        new IndexedByteArray([\n            0x41, // Roland\n            0x10, // Device ID (defaults to 16 on roland)\n            0x42, // GS\n            0x12, // Command ID (DT1) (whatever that means...)\n            0x40, // System parameter - Address\n            0x00, // Global parameter -  Address\n            0x7f, // GS Change - Address\n            0x00, // Turn on - Data\n            0x41, // Checksum\n            0xf7 // End of exclusive\n        ])\n    );\n}\n", "export interface MIDIPatch {\n    /**\n     * The MIDI program number.\n     */\n    program: number;\n\n    /**\n     * The MIDI bank MSB number.\n     */\n    bankMSB: number;\n\n    /**\n     * The MIDI bank LSB number.\n     */\n    bankLSB: number;\n\n    /**\n     * If the preset is marked as GM/GS drum preset. Note that XG drums do not have this flag.\n     */\n    isGMGSDrum: boolean;\n}\n\nexport interface MIDIPatchNamed extends MIDIPatch {\n    /**\n     * The name of the patch.\n     */\n    name: string;\n}\n\nexport class MIDIPatchTools {\n    /**\n     * Converts a MIDI patch to a string.\n     */\n    public static toMIDIString(patch: MIDIPatch) {\n        if (patch.isGMGSDrum) {\n            return `DRUM:${patch.program}`;\n        }\n        return `${patch.bankLSB}:${patch.bankMSB}:${patch.program}`;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets a MIDI patch from a string.\n     * @param string\n     */\n    public static fromMIDIString(string: string): MIDIPatch {\n        const parts = string.split(\":\");\n        if (parts.length > 3 || parts.length < 2) {\n            throw new Error(\"Invalid MIDI string:\");\n        }\n        if (string.startsWith(\"DRUM\")) {\n            return {\n                bankMSB: 0,\n                bankLSB: 0,\n                program: parseInt(parts[1]),\n                isGMGSDrum: true\n            };\n        } else {\n            return {\n                bankLSB: parseInt(parts[0]),\n                bankMSB: parseInt(parts[1]),\n                program: parseInt(parts[2]),\n                isGMGSDrum: false\n            };\n        }\n    }\n\n    /**\n     * Converts a named MIDI patch to string.\n     * @param patch\n     */\n    public static toNamedMIDIString(patch: MIDIPatchNamed) {\n        return `${MIDIPatchTools.toMIDIString(patch)} ${patch.name}`;\n    }\n\n    /**\n     * Checks if two MIDI patches match.\n     * @param patch1\n     * @param patch2\n     */\n    public static matches(patch1: MIDIPatch, patch2: MIDIPatch) {\n        if (patch1.isGMGSDrum || patch2.isGMGSDrum) {\n            // For drums only compare programs\n            return (\n                patch1.isGMGSDrum === patch2.isGMGSDrum &&\n                patch1.program === patch2.program\n            );\n        }\n        return (\n            patch1.program === patch2.program &&\n            patch1.bankLSB === patch2.bankLSB &&\n            patch1.bankMSB === patch2.bankMSB\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets a named MIDI patch from a string.\n     * @param string\n     */\n    public static fromNamedMIDIString(string: string): MIDIPatchNamed {\n        const firstSpace = string.indexOf(\" \");\n        if (firstSpace < 0) {\n            throw new Error(`Invalid named MIDI string: ${string}`);\n        }\n        const patch = this.fromMIDIString(string.substring(0, firstSpace));\n        const name = string.substring(firstSpace + 1);\n        return {\n            ...patch,\n            name\n        };\n    }\n\n    public static sorter(a: MIDIPatch, b: MIDIPatch): number {\n        if (a.program !== b.program) {\n            return a.program - b.program;\n        }\n\n        // Force drum presets to be last\n        if (a.isGMGSDrum && !b.isGMGSDrum) return 1;\n        if (!a.isGMGSDrum && b.isGMGSDrum) return -1;\n\n        if (a.bankMSB !== b.bankMSB) {\n            return a.bankMSB - b.bankMSB;\n        }\n\n        return a.bankLSB - b.bankLSB;\n    }\n}\n", "import { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { writeRIFFChunkParts, writeRIFFChunkRaw } from \"../../utils/riff_chunk\";\nimport { getStringBytes } from \"../../utils/byte_functions/string\";\nimport { MIDIMessage } from \"../midi_message\";\nimport {\n    SpessaSynthGroup,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo\n} from \"../../utils/loggin\";\nimport { consoleColors } from \"../../utils/other\";\nimport { writeLittleEndianIndexed } from \"../../utils/byte_functions/little_endian\";\nimport { DEFAULT_PERCUSSION } from \"../../synthesizer/audio_engine/engine_components/synth_constants\";\nimport { BankSelectHacks } from \"../../utils/midi_hacks\";\nimport {\n    isGM2On,\n    isGMOn,\n    isGSDrumsOn,\n    isGSOn,\n    isXGOn\n} from \"../../utils/sysex_detector\";\nimport {\n    midiControllers,\n    type MIDIMessageType,\n    midiMessageTypes\n} from \"../enums\";\nimport type { BasicSoundBank } from \"../../soundbank/basic_soundbank/basic_soundbank\";\nimport type { RMIDInfoData, RMIDInfoFourCC, RMIDIWriteOptions } from \"../types\";\nimport type { BasicMIDI } from \"../basic_midi\";\nimport { getGsOn } from \"./get_gs_on\";\nimport type { SynthSystem } from \"../../synthesizer/types\";\nimport {\n    type MIDIPatch,\n    MIDIPatchTools\n} from \"../../soundbank/basic_soundbank/midi_patch\";\n\nconst DEFAULT_COPYRIGHT = \"Created using SpessaSynth\";\n\nfunction correctBankOffsetInternal(\n    mid: BasicMIDI,\n    bankOffset: number,\n    soundBank: BasicSoundBank\n) {\n    // Add the offset to the bank.\n    // See https://github.com/spessasus/sf2-rmidi-specification#readme\n    // Also fix presets that don't exist\n    // Since midi player6 doesn't seem to default to 0 when non-existent...\n    let system: SynthSystem = \"gm\";\n    /**\n     * The unwanted system messages such as gm on\n     */\n    const unwantedSystems: { tNum: number; e: MIDIMessage }[] = [];\n\n    // It copies midiPorts everywhere else, but here 0 works so DO NOT CHANGE!\n    const ports = Array<number>(mid.tracks.length).fill(0);\n    const channelsAmount = 16 + Math.max(...mid.portChannelOffsetMap);\n    const channelsInfo: {\n        program: number;\n        drums: boolean;\n        lastBank?: MIDIMessage;\n        lastBankLSB?: MIDIMessage;\n        hasBankSelect: boolean;\n    }[] = [];\n    for (let i = 0; i < channelsAmount; i++) {\n        channelsInfo.push({\n            program: 0,\n            drums: i % 16 === DEFAULT_PERCUSSION, // Drums appear on 9 every 16 channels,\n            lastBank: undefined,\n            lastBankLSB: undefined,\n            hasBankSelect: false\n        });\n    }\n\n    mid.iterate((e, trackNum) => {\n        const portOffset = mid.portChannelOffsetMap[ports[trackNum]];\n        if (e.statusByte === midiMessageTypes.midiPort) {\n            ports[trackNum] = e.data[0];\n            return;\n        }\n        const status = e.statusByte & 0xf0;\n        if (\n            status !== midiMessageTypes.controllerChange &&\n            status !== midiMessageTypes.programChange &&\n            status !== midiMessageTypes.systemExclusive\n        ) {\n            return;\n        }\n\n        if (status === midiMessageTypes.systemExclusive) {\n            // Check for drum sysex\n            if (!isGSDrumsOn(e)) {\n                // Check for XG\n                if (isXGOn(e)) {\n                    system = \"xg\";\n                } else if (isGSOn(e)) {\n                    system = \"gs\";\n                } else if (isGMOn(e)) {\n                    // We do not want gm1\n                    system = \"gm\";\n                    unwantedSystems.push({\n                        tNum: trackNum,\n                        e: e\n                    });\n                } else if (isGM2On(e)) {\n                    system = \"gm2\";\n                }\n                return;\n            }\n            const sysexChannel =\n                [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15][\n                    e.data[5] & 0x0f\n                ] + portOffset;\n            channelsInfo[sysexChannel].drums = !!(\n                e.data[7] > 0 && e.data[5] >> 4\n            );\n            return;\n        }\n\n        // Program change\n        const chNum = (e.statusByte & 0xf) + portOffset;\n        const channel = channelsInfo[chNum];\n        if (status === midiMessageTypes.programChange) {\n            const sentProgram = e.data[0];\n            const patch: MIDIPatch = {\n                program: sentProgram,\n                bankLSB: channel.lastBankLSB?.data?.[1] ?? 0,\n                // Make sure to take bank offset into account\n                bankMSB: BankSelectHacks.subtrackBankOffset(\n                    channel.lastBank?.data?.[1] ?? 0,\n                    mid.bankOffset\n                ),\n                isGMGSDrum: channel.drums\n            };\n            const targetPreset = soundBank.getPreset(patch, system);\n            SpessaSynthInfo(\n                `%cInput patch: %c${MIDIPatchTools.toMIDIString(patch)}%c. Channel %c${chNum}%c. Changing patch to ${targetPreset.toString()}.`,\n                consoleColors.info,\n                consoleColors.unrecognized,\n                consoleColors.info,\n                consoleColors.recognized,\n                consoleColors.info\n            );\n            // Set the program number\n            e.data[0] = targetPreset.program;\n\n            if (targetPreset.isGMGSDrum && BankSelectHacks.isSystemXG(system)) {\n                // GM/GS drums returned, leave as is\n                // (drums are already set since we got GMGS, just the sound bank doesn't have any XG.)\n                return;\n            }\n\n            if (channel.lastBank === undefined) {\n                return;\n            }\n            channel.lastBank.data[1] = BankSelectHacks.addBankOffset(\n                targetPreset.bankMSB,\n                bankOffset,\n                targetPreset.isXGDrums\n            );\n            if (channel.lastBankLSB === undefined) {\n                return;\n            }\n            channel.lastBankLSB.data[1] = targetPreset.bankLSB;\n            return;\n        }\n\n        // Controller change\n        // We only care about bank-selects\n        const isLSB = e.data[0] === midiControllers.bankSelectLSB;\n        if (e.data[0] !== midiControllers.bankSelect && !isLSB) {\n            return;\n        }\n        // Bank select\n        channel.hasBankSelect = true;\n        // Interpret\n        if (isLSB) {\n            channel.lastBankLSB = e;\n        } else {\n            channel.lastBank = e;\n        }\n    });\n\n    // Add missing bank selects\n    // Add all bank selects that are missing for this track\n    channelsInfo.forEach((has, ch) => {\n        if (has.hasBankSelect) {\n            return;\n        }\n        // Find the first program change (for the given channel)\n        const midiChannel = ch % 16;\n        const status = midiMessageTypes.programChange | midiChannel;\n        // Find track with this channel being used\n        const portOffset = Math.floor(ch / 16) * 16;\n        const port = mid.portChannelOffsetMap.indexOf(portOffset);\n        const track = mid.tracks.find(\n            (t) => t.port === port && t.channels.has(midiChannel)\n        );\n        if (track === undefined) {\n            // This channel is not used at all\n            return;\n        }\n        let indexToAdd = track.events.findIndex((e) => e.statusByte === status);\n        if (indexToAdd === -1) {\n            // No program change...\n            // Add programs if they are missing from the track\n            // (need them to activate bank 1 for the embedded soundfont)\n            const programIndex = track.events.findIndex(\n                (e) =>\n                    e.statusByte > 0x80 &&\n                    e.statusByte < 0xf0 &&\n                    (e.statusByte & 0xf) === midiChannel\n            );\n            if (programIndex === -1) {\n                // No voices??? skip\n                return;\n            }\n            const programTicks = track.events[programIndex].ticks;\n            const targetProgram = soundBank.getPreset(\n                {\n                    bankMSB: 0,\n                    bankLSB: 0,\n                    program: 0,\n                    isGMGSDrum: false\n                },\n                system\n            ).program;\n            track.addEvent(\n                new MIDIMessage(\n                    programTicks,\n                    (midiMessageTypes.programChange |\n                        midiChannel) as MIDIMessageType,\n                    new IndexedByteArray([targetProgram])\n                ),\n                programIndex\n            );\n            indexToAdd = programIndex;\n        }\n        SpessaSynthInfo(\n            `%cAdding bank select for %c${ch}`,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        const ticks = track.events[indexToAdd].ticks;\n        const targetPreset = soundBank.getPreset(\n            {\n                bankLSB: 0,\n                bankMSB: 0,\n                program: has.program,\n                isGMGSDrum: has.drums\n            },\n            system\n        );\n        const targetBank = BankSelectHacks.addBankOffset(\n            targetPreset.bankMSB,\n            bankOffset,\n            targetPreset.isXGDrums\n        );\n        track.addEvent(\n            new MIDIMessage(\n                ticks,\n                (midiMessageTypes.controllerChange |\n                    midiChannel) as MIDIMessageType,\n                new IndexedByteArray([midiControllers.bankSelect, targetBank])\n            ),\n            indexToAdd\n        );\n    });\n\n    // Make sure to put gs if gm\n    if (system === \"gm\" && !BankSelectHacks.isSystemXG(system)) {\n        for (const m of unwantedSystems) {\n            const track = mid.tracks[m.tNum];\n            track.deleteEvent(track.events.indexOf(m.e));\n        }\n        let index = 0;\n        if (mid.tracks[0].events[0].statusByte === midiMessageTypes.trackName) {\n            index++;\n        }\n        mid.tracks[0].addEvent(getGsOn(0), index);\n    }\n}\n\nexport const DEFAULT_RMIDI_WRITE_OPTIONS: RMIDIWriteOptions = {\n    bankOffset: 0,\n    metadata: {},\n    correctBankOffset: true,\n    soundBank: undefined\n};\n\n/**\n * Writes an RMIDI file. Note that this method modifies the MIDI file in-place.\n * @param mid MIDI to modify.\n * @param soundBankBinary The binary sound bank to embed into the file.\n * @param options Extra options for writing the file.\n * @returns the binary data\n */\nexport function writeRMIDIInternal(\n    mid: BasicMIDI,\n    soundBankBinary: ArrayBuffer,\n    options: RMIDIWriteOptions\n): ArrayBuffer {\n    const metadata = options.metadata;\n    SpessaSynthGroup(\"%cWriting the RMIDI File...\", consoleColors.info);\n    SpessaSynthInfo(\"metadata\", metadata);\n    SpessaSynthInfo(\"Initial bank offset\", mid.bankOffset);\n    if (options.correctBankOffset) {\n        if (!options.soundBank) {\n            throw new Error(\n                \"Sound bank must be provided if correcting bank offset.\"\n            );\n        }\n        correctBankOffsetInternal(mid, options.bankOffset, options.soundBank);\n    }\n    const newMid = new IndexedByteArray(mid.writeMIDI());\n\n    // Apply metadata\n    metadata.name ??= mid.getName();\n    metadata.creationDate ??= new Date();\n    metadata.copyright ??= DEFAULT_COPYRIGHT;\n    metadata.software ??= \"SpessaSynth\";\n\n    Object.entries(metadata).forEach(\n        <K extends keyof RMIDInfoData>(v: unknown[]) => {\n            const val = v as [K, RMIDInfoData[K]];\n            if (val[1]) {\n                mid.setRMIDInfo(val[0], val[1]);\n            }\n        }\n    );\n\n    // Info data for RMID\n    const infoContent: Uint8Array[] = [];\n\n    Object.entries(mid.rmidiInfo).forEach((v) => {\n        const type = v[0] as keyof RMIDInfoData;\n        const data = v[1];\n        const writeInfo = (type: RMIDInfoFourCC) => {\n            infoContent.push(writeRIFFChunkRaw(type, data));\n        };\n        switch (type) {\n            case \"album\":\n                // Note that there are two album chunks: IPRD and IALB\n                // Spessasynth uses IPRD, but writes both\n                writeInfo(\"IALB\");\n                writeInfo(\"IPRD\");\n                break;\n\n            case \"software\":\n                writeInfo(\"ISFT\");\n                break;\n\n            case \"infoEncoding\":\n                writeInfo(\"IENC\");\n                break;\n\n            case \"creationDate\":\n                writeInfo(\"ICRD\");\n                break;\n\n            case \"picture\":\n                writeInfo(\"IPIC\");\n                break;\n\n            case \"name\":\n                writeInfo(\"INAM\");\n                break;\n\n            case \"artist\":\n                writeInfo(\"IART\");\n                break;\n\n            case \"genre\":\n                writeInfo(\"IGNR\");\n                break;\n\n            case \"copyright\":\n                writeInfo(\"ICOP\");\n                break;\n\n            case \"comment\":\n                writeInfo(\"ICMT\");\n                break;\n\n            case \"engineer\":\n                writeInfo(\"IENG\");\n                break;\n\n            case \"subject\":\n                writeInfo(\"ISBJ\");\n                break;\n\n            case \"midiEncoding\":\n                writeInfo(\"MENC\");\n                break;\n        }\n    });\n\n    // Bank offset\n    const DBNK = new IndexedByteArray(2);\n    writeLittleEndianIndexed(DBNK, options.bankOffset, 2);\n    infoContent.push(writeRIFFChunkRaw(\"DBNK\", DBNK));\n\n    // Combine and write out\n    SpessaSynthInfo(\"%cFinished!\", consoleColors.info);\n    SpessaSynthGroupEnd();\n    return writeRIFFChunkParts(\"RIFF\", [\n        getStringBytes(\"RMID\"),\n        writeRIFFChunkRaw(\"data\", newMid),\n        writeRIFFChunkParts(\"INFO\", infoContent, true),\n        new IndexedByteArray(soundBankBinary)\n    ]).buffer;\n}\n", "import { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin\";\nimport { consoleColors } from \"../../utils/other\";\nimport { DEFAULT_PERCUSSION } from \"../../synthesizer/audio_engine/engine_components/synth_constants\";\nimport { isGM2On, isGMOn, isGSDrumsOn, isGSOn, isXGOn } from \"../../utils/sysex_detector\";\nimport type { BasicMIDI } from \"../basic_midi\";\nimport type { BasicSoundBank } from \"../../soundbank/basic_soundbank/basic_soundbank\";\nimport type { BasicPreset } from \"../../soundbank/basic_soundbank/basic_preset\";\nimport type { SynthSystem } from \"../../synthesizer/types\";\nimport { type MIDIController, midiControllers, midiMessageTypes } from \"../enums\";\nimport type { SoundBankManager } from \"../../synthesizer/audio_engine/engine_components/sound_bank_manager\";\n\ninterface InternalChannelType {\n    preset: BasicPreset;\n    bankMSB: number;\n    bankLSB: number;\n    isDrum: boolean;\n}\n\n/**\n * Gets the used programs and keys for this MIDI file with a given sound bank.\n * @param mid\n * @param soundBank  the sound bank.\n * @returns  Map<patch, Set<key-velocity>>.\n */\nexport function getUsedProgramsAndKeys(\n    mid: BasicMIDI,\n    soundBank: BasicSoundBank | SoundBankManager\n): Map<BasicPreset, Set<string>> {\n    SpessaSynthGroupCollapsed(\n        \"%cSearching for all used programs and keys...\",\n        consoleColors.info\n    );\n    // Find every used preset and every key:velocity for each.\n    // Make sure to care about ports and drums.\n    const channelsAmount = 16 + Math.max(...mid.portChannelOffsetMap);\n    const channelPresets: InternalChannelType[] = [];\n\n    // Check for xg\n    let system: SynthSystem = \"gs\";\n\n    for (let i = 0; i < channelsAmount; i++) {\n        const isDrum = i % 16 === DEFAULT_PERCUSSION;\n        channelPresets.push({\n            preset: soundBank.getPreset(\n                {\n                    bankLSB: 0,\n                    bankMSB: 0,\n                    isGMGSDrum: isDrum,\n                    program: 0\n                },\n                system\n            ),\n            bankMSB: 0,\n            bankLSB: 0,\n            isDrum\n        });\n    }\n\n    /**\n     * Find all programs used and key-velocity combos in them\n     * bank:program each has a set of midiNote-velocity\n     */\n    const usedProgramsAndKeys = new Map<BasicPreset, Set<string>>();\n\n    const ports = mid.tracks.map((t) => t.port);\n\n    mid.iterate((event, trackNum) => {\n        if (event.statusByte === midiMessageTypes.midiPort) {\n            ports[trackNum] = event.data[0];\n            return;\n        }\n        const status = event.statusByte & 0xf0;\n        if (\n            status !== midiMessageTypes.noteOn &&\n            status !== midiMessageTypes.controllerChange &&\n            status !== midiMessageTypes.programChange &&\n            status !== midiMessageTypes.systemExclusive\n        ) {\n            return;\n        }\n        const channel =\n            (event.statusByte & 0xf) +\n                mid.portChannelOffsetMap[ports[trackNum]] || 0;\n        let ch = channelPresets[channel];\n        switch (status) {\n            case midiMessageTypes.programChange:\n                ch.preset = soundBank.getPreset(\n                    {\n                        bankMSB: ch.bankMSB,\n                        bankLSB: ch.bankLSB,\n                        program: event.data[0],\n                        isGMGSDrum: ch.isDrum\n                    },\n                    system\n                );\n                break;\n\n            case midiMessageTypes.controllerChange:\n                {\n                    switch (event.data[0] as MIDIController) {\n                        default:\n                            return;\n\n                        case midiControllers.bankSelectLSB:\n                            ch.bankLSB = event.data[1];\n                            break;\n\n                        case midiControllers.bankSelect:\n                            ch.bankMSB = event.data[1];\n                    }\n                }\n                break;\n\n            case midiMessageTypes.noteOn:\n                if (event.data[1] === 0) {\n                    // That's a note off\n                    return;\n                }\n\n                let combos = usedProgramsAndKeys.get(ch.preset);\n                if (!combos) {\n                    combos = new Set<string>();\n                    usedProgramsAndKeys.set(ch.preset, combos);\n                }\n\n                combos.add(`${event.data[0]}-${event.data[1]}`);\n                break;\n\n            case midiMessageTypes.systemExclusive:\n                // Check for drum sysex\n                {\n                    if (!isGSDrumsOn(event)) {\n                        // Check for XG\n                        if (isXGOn(event)) {\n                            system = \"xg\";\n                            SpessaSynthInfo(\n                                \"%cXG on detected!\",\n                                consoleColors.recognized\n                            );\n                        } else if (isGM2On(event)) {\n                            system = \"gm2\";\n                            SpessaSynthInfo(\n                                \"%cGM2 on detected!\",\n                                consoleColors.recognized\n                            );\n                        } else if (isGMOn(event)) {\n                            system = \"gm\";\n                            SpessaSynthInfo(\n                                \"%cGM on detected!\",\n                                consoleColors.recognized\n                            );\n                        } else if (isGSOn(event)) {\n                            system = \"gs\";\n                            SpessaSynthInfo(\n                                \"%cGS on detected!\",\n                                consoleColors.recognized\n                            );\n                        }\n                        return;\n                    }\n                    const sysexChannel =\n                        [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15][\n                            event.data[5] & 0x0f\n                        ] + mid.portChannelOffsetMap[ports[trackNum]];\n                    const isDrum = !!(event.data[7] > 0 && event.data[5] >> 4);\n                    ch = channelPresets[sysexChannel];\n                    ch.isDrum = isDrum;\n                }\n                break;\n        }\n    });\n\n    usedProgramsAndKeys.forEach((combos, preset) => {\n        if (combos.size === 0) {\n            SpessaSynthInfo(\n                `%cDetected change but no keys for %c${preset.name}`,\n                consoleColors.info,\n                consoleColors.value\n            );\n            usedProgramsAndKeys.delete(preset);\n        }\n    });\n\n    SpessaSynthGroupEnd();\n    return usedProgramsAndKeys;\n}\n", "import { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { readBigEndian } from \"../../utils/byte_functions/big_endian\";\nimport { DEFAULT_PERCUSSION } from \"../../synthesizer/audio_engine/engine_components/synth_constants\";\nimport type { BasicMIDI } from \"../basic_midi\";\nimport type { MIDIMessage } from \"../midi_message\";\nimport type { NoteTime } from \"../types\";\n\n/**\n * Calculates all note times in seconds.\n * @param midi the midi to use\n * @param minDrumLength the shortest a drum note (channel 10) can be, in seconds.\n * @returns an array of 16 channels, each channel containing its notes,\n * with their key number, velocity, absolute start time and length in seconds.\n */\nexport function getNoteTimesInternal(\n    midi: BasicMIDI,\n    minDrumLength = 0\n): NoteTime[][] {\n    /**\n     * Gets tempo from the midi message\n     * @param event the midi event\n     * @return the tempo in bpm\n     */\n    const getTempo = (event: MIDIMessage): number => {\n        // Simulate IndexedByteArray\n        event.data = new IndexedByteArray(event.data.buffer);\n        return 60000000 / readBigEndian(event.data, 3);\n    };\n\n    /**\n     * An array of 16 arrays (channels)\n     */\n    const noteTimes: NoteTime[][] = [];\n    // Flatten and sort by ticks\n    const trackData = midi.tracks.map((t) => t.events);\n    const events = trackData.flat();\n    events.sort((e1, e2) => e1.ticks - e2.ticks);\n\n    for (let i = 0; i < 16; i++) {\n        noteTimes.push([]);\n    }\n    let elapsedTime = 0;\n    let oneTickToSeconds = 60 / (120 * midi.timeDivision);\n    let eventIndex = 0;\n    let unfinished = 0;\n    const unfinishedNotes: NoteTime[][] = [];\n    for (let i = 0; i < 16; i++) {\n        unfinishedNotes.push([]);\n    }\n    const noteOff = (midiNote: number, channel: number) => {\n        const noteIndex = unfinishedNotes[channel].findIndex(\n            (n) => n.midiNote === midiNote\n        );\n        const note = unfinishedNotes[channel][noteIndex];\n        if (note) {\n            const time = elapsedTime - note.start;\n            note.length = time;\n            if (channel === DEFAULT_PERCUSSION) {\n                note.length = time < minDrumLength ? minDrumLength : time;\n            }\n            // Delete from unfinished\n            unfinishedNotes[channel].splice(noteIndex, 1);\n        }\n        unfinished--;\n    };\n    while (eventIndex < events.length) {\n        const event = events[eventIndex];\n\n        const status = event.statusByte >> 4;\n        const channel = event.statusByte & 0x0f;\n\n        // Note off\n        if (status === 0x8) {\n            noteOff(event.data[0], channel);\n        }\n        // Note on\n        else if (status === 0x9) {\n            if (event.data[1] === 0) {\n                // Never mind, its note off\n                noteOff(event.data[0], channel);\n            } else {\n                // Stop previous\n                noteOff(event.data[0], channel);\n                const noteTime = {\n                    midiNote: event.data[0],\n                    start: elapsedTime,\n                    length: -1,\n                    velocity: event.data[1] / 127\n                };\n                noteTimes[channel].push(noteTime);\n                unfinishedNotes[channel].push(noteTime);\n                unfinished++;\n            }\n        }\n        // Set tempo\n        else if (event.statusByte === 0x51) {\n            oneTickToSeconds = 60 / (getTempo(event) * midi.timeDivision);\n        }\n\n        if (++eventIndex >= events.length) {\n            break;\n        }\n\n        elapsedTime +=\n            oneTickToSeconds * (events[eventIndex].ticks - event.ticks);\n    }\n\n    // Finish the unfinished notes\n    if (unfinished > 0) {\n        // For every channel, for every note that is unfinished (has -1 length)\n        unfinishedNotes.forEach((channelNotes, channel) => {\n            channelNotes.forEach((note) => {\n                const time = elapsedTime - note.start;\n                note.length = time;\n                if (channel === DEFAULT_PERCUSSION) {\n                    note.length = time < minDrumLength ? minDrumLength : time;\n                }\n            });\n        });\n    }\n    return noteTimes;\n}\n", "export const interpolationTypes = {\n    linear: 0,\n    nearestNeighbor: 1,\n    hermite: 2\n} as const;\nexport type InterpolationType =\n    (typeof interpolationTypes)[keyof typeof interpolationTypes];\n\n// Data entry states for the MIDI data entry system.\n// These states are used to track the current state of data entry for MIDI controllers.\nexport const dataEntryStates = {\n    Idle: 0,\n    RPCoarse: 1,\n    RPFine: 2,\n    NRPCoarse: 3,\n    NRPFine: 4,\n    DataCoarse: 5,\n    DataFine: 6\n} as const;\n\nexport type DataEntryState =\n    (typeof dataEntryStates)[keyof typeof dataEntryStates];\n\nexport const customControllers = {\n    channelTuning: 0, // Cents, RPN for fine tuning\n    channelTransposeFine: 1, // Cents, only the decimal tuning, (e.g., transpose is 4.5,\n    // Then shift by 4 keys + tune by 50 cents)\n    modulationMultiplier: 2, // Cents, set by modulation depth RPN\n    masterTuning: 3, // Cents, set by system exclusive\n    channelTuningSemitones: 4, // Semitones, for RPN coarse tuning\n    channelKeyShift: 5, // Key shift: for system exclusive\n    sf2NPRNGeneratorLSB: 6 // Sf2 NPRN LSB for selecting a generator value\n} as const;\n\nexport type CustomController =\n    (typeof customControllers)[keyof typeof customControllers];\n", "import { MIDIMessage } from \"../midi_message\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport {\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo\n} from \"../../utils/loggin\";\nimport { consoleColors } from \"../../utils/other\";\n\nimport { DEFAULT_PERCUSSION } from \"../../synthesizer/audio_engine/engine_components/synth_constants\";\nimport { isGM2On, isGMOn, isGSOn, isXGOn } from \"../../utils/sysex_detector\";\nimport { BankSelectHacks } from \"../../utils/midi_hacks\";\nimport {\n    midiControllers,\n    type MIDIMessageType,\n    midiMessageTypes\n} from \"../enums\";\nimport { getGsOn } from \"./get_gs_on\";\nimport type {\n    DesiredChannelTranspose,\n    DesiredControllerChange,\n    DesiredProgramChange\n} from \"../types\";\nimport type { BasicMIDI } from \"../basic_midi\";\nimport type { SynthesizerSnapshot } from \"../../synthesizer/audio_engine/snapshot/synthesizer_snapshot\";\nimport type { SynthSystem } from \"../../synthesizer/types\";\nimport { customControllers } from \"../../synthesizer/enums\";\nimport { MIDIPatchTools } from \"../../soundbank/basic_soundbank/midi_patch\";\n\nfunction getControllerChange(\n    channel: number,\n    cc: number,\n    value: number,\n    ticks: number\n): MIDIMessage {\n    return new MIDIMessage(\n        ticks,\n        (midiMessageTypes.controllerChange | channel % 16) as MIDIMessageType,\n        new IndexedByteArray([cc, value])\n    );\n}\n\nfunction getDrumChange(channel: number, ticks: number): MIDIMessage {\n    const chanAddress =\n        0x10 |\n        [1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15][channel % 16];\n    // Excluding manufacturerID DeviceID and ModelID (and F7)\n    const sysexData = [\n        0x41, // Roland\n        0x10, // Device ID (defaults to 16 on roland)\n        0x42, // GS\n        0x12, // Command ID (DT1) (whatever that means...)\n        0x40, // System parameter           }\n        chanAddress, // Channel parameter   } Address\n        0x15, // Drum change                }\n        0x01 // Is Drums                    } Data\n    ];\n    // Calculate checksum\n    // https://cdn.roland.com/assets/media/pdf/F-20_MIDI_Imple_e01_W.pdf section 4\n    const sum = 0x40 + chanAddress + 0x15 + 0x01;\n    const checksum = 128 - (sum % 128);\n    // Add system exclusive to enable drums\n    return new MIDIMessage(\n        ticks,\n        midiMessageTypes.systemExclusive,\n        new IndexedByteArray([...sysexData, checksum, 0xf7])\n    );\n}\n\n/**\n * Allows easy editing of the file by removing channels, changing programs,\n * changing controllers and transposing channels. Note that this modifies the MIDI in-place.\n *\n * @param midi the midi to change\n * @param desiredProgramChanges - The programs to set on given channels.\n * @param desiredControllerChanges - The controllers to set on given channels.\n * @param desiredChannelsToClear - The channels to remove from the sequence.\n * @param desiredChannelsToTranspose - The channels to transpose.\n */\nexport function modifyMIDIInternal(\n    midi: BasicMIDI,\n    desiredProgramChanges: DesiredProgramChange[] = [],\n    desiredControllerChanges: DesiredControllerChange[] = [],\n    desiredChannelsToClear: number[] = [],\n    desiredChannelsToTranspose: DesiredChannelTranspose[] = []\n) {\n    SpessaSynthGroupCollapsed(\n        \"%cApplying changes to the MIDI file...\",\n        consoleColors.info\n    );\n\n    SpessaSynthInfo(\"Desired program changes:\", desiredProgramChanges);\n    SpessaSynthInfo(\"Desired CC changes:\", desiredControllerChanges);\n    SpessaSynthInfo(\"Desired channels to clear:\", desiredChannelsToClear);\n    SpessaSynthInfo(\n        \"Desired channels to transpose:\",\n        desiredChannelsToTranspose\n    );\n\n    const channelsToChangeProgram = new Set<number>();\n    desiredProgramChanges.forEach((c) => {\n        channelsToChangeProgram.add(c.channel);\n    });\n\n    // Go through all events one by one\n    let system: SynthSystem = \"gs\";\n    let addedGs = false;\n\n    // It copies midiPorts everywhere else, but here 0 works so DO NOT CHANGE!\n    /**\n     * Midi port number for the corresponding track\n     */\n    const midiPorts: number[] = midi.tracks.map((t) => t.port);\n    /**\n     * Midi port: channel offset\n     */\n    const midiPortChannelOffsets: Record<number, number> = {};\n    let midiPortChannelOffset = 0;\n\n    const assignMIDIPort = (trackNum: number, port: number) => {\n        // Do not assign ports to empty tracks\n\n        if (midi.tracks[trackNum].channels.size === 0) {\n            return;\n        }\n\n        // Assign new 16 channels if the port is not occupied yet\n        if (midiPortChannelOffset === 0) {\n            midiPortChannelOffset += 16;\n            midiPortChannelOffsets[port] = 0;\n        }\n\n        if (midiPortChannelOffsets[port] === undefined) {\n            midiPortChannelOffsets[port] = midiPortChannelOffset;\n            midiPortChannelOffset += 16;\n        }\n\n        midiPorts[trackNum] = port;\n    };\n\n    // Assign port offsets\n    midi.tracks.forEach((track, i) => {\n        assignMIDIPort(i, track.port);\n    });\n\n    const channelsAmount = midiPortChannelOffset;\n    /**\n     * Tracks if the channel already had its first note on\n     */\n    const isFirstNoteOn = Array<boolean>(channelsAmount).fill(true);\n\n    /**\n     * MIDI key transpose\n     */\n    const coarseTranspose = Array<number>(channelsAmount).fill(0);\n    /**\n     * RPN fine transpose\n     */\n    const fineTranspose = Array<number>(channelsAmount).fill(0);\n    desiredChannelsToTranspose.forEach((transpose) => {\n        const coarse = Math.trunc(transpose.keyShift);\n        const fine = transpose.keyShift - coarse;\n        coarseTranspose[transpose.channel] = coarse;\n        fineTranspose[transpose.channel] = fine;\n    });\n\n    midi.iterate((e, trackNum, eventIndexes) => {\n        const track = midi.tracks[trackNum];\n        const index = eventIndexes[trackNum];\n\n        const deleteThisEvent = () => {\n            track.deleteEvent(index);\n            eventIndexes[trackNum]--;\n        };\n\n        const addEventBefore = (e: MIDIMessage, offset = 0) => {\n            track.addEvent(e, index + offset);\n            eventIndexes[trackNum]++;\n        };\n\n        const portOffset = midiPortChannelOffsets[midiPorts[trackNum]] || 0;\n        if (e.statusByte === midiMessageTypes.midiPort) {\n            assignMIDIPort(trackNum, e.data[0]);\n            return;\n        }\n        // Don't clear meta\n        if (\n            e.statusByte <= midiMessageTypes.sequenceSpecific &&\n            e.statusByte >= midiMessageTypes.sequenceNumber\n        ) {\n            return;\n        }\n        const status = e.statusByte & 0xf0;\n        const midiChannel = e.statusByte & 0xf;\n        const channel = midiChannel + portOffset;\n        // Clear channel?\n        if (desiredChannelsToClear.includes(channel)) {\n            deleteThisEvent();\n            return;\n        }\n        switch (status) {\n            case midiMessageTypes.noteOn:\n                // Is it first?\n                if (isFirstNoteOn[channel]) {\n                    isFirstNoteOn[channel] = false;\n                    // All right, so this is the first note on\n                    // First: controllers\n                    // Because FSMP does not like program changes after cc changes in embedded midis\n                    // And since we use splice,\n                    // Controllers get added first, then programs before them\n                    // Now add controllers\n                    desiredControllerChanges\n                        .filter((c) => c.channel === channel)\n                        .forEach((change) => {\n                            const ccChange = getControllerChange(\n                                midiChannel,\n                                change.controllerNumber,\n                                change.controllerValue,\n                                e.ticks\n                            );\n                            addEventBefore(ccChange);\n                        });\n                    const fineTune = fineTranspose[channel];\n\n                    if (fineTune !== 0) {\n                        // Add rpn\n                        // 64 is the center, 96 = 50 cents up\n                        const centsCoarse = fineTune * 64 + 64;\n                        const rpnCoarse = getControllerChange(\n                            midiChannel,\n                            midiControllers.registeredParameterMSB,\n                            0,\n                            e.ticks\n                        );\n                        const rpnFine = getControllerChange(\n                            midiChannel,\n                            midiControllers.registeredParameterLSB,\n                            1,\n                            e.ticks\n                        );\n                        const dataEntryCoarse = getControllerChange(\n                            channel,\n                            midiControllers.dataEntryMSB,\n                            centsCoarse,\n                            e.ticks\n                        );\n                        const dataEntryFine = getControllerChange(\n                            midiChannel,\n                            midiControllers.dataEntryLSB,\n                            0,\n                            e.ticks\n                        );\n                        addEventBefore(dataEntryFine);\n                        addEventBefore(dataEntryCoarse);\n                        addEventBefore(rpnFine);\n                        addEventBefore(rpnCoarse);\n                    }\n\n                    if (channelsToChangeProgram.has(channel)) {\n                        const change = desiredProgramChanges.find(\n                            (c) => c.channel === channel\n                        );\n                        if (!change) {\n                            return;\n                        }\n                        SpessaSynthInfo(\n                            `%cSetting %c${change.channel}%c to %c${MIDIPatchTools.toMIDIString(change)}%c. Track num: %c${trackNum}`,\n                            consoleColors.info,\n                            consoleColors.recognized,\n                            consoleColors.info,\n                            consoleColors.recognized,\n                            consoleColors.info,\n                            consoleColors.recognized\n                        );\n\n                        // Note: this is in reverse.\n                        // The output event order is: drums -> lsb -> msb -> program change\n                        let desiredBankMSB = change.bankMSB;\n                        let desiredBankLSB = change.bankLSB;\n                        const desiredProgram = change.program;\n\n                        // Add program change\n                        const programChange = new MIDIMessage(\n                            e.ticks,\n                            (midiMessageTypes.programChange |\n                                midiChannel) as MIDIMessageType,\n                            new IndexedByteArray([desiredProgram])\n                        );\n                        addEventBefore(programChange);\n\n                        const addBank = (isLSB: boolean, v: number) => {\n                            const bankChange = getControllerChange(\n                                midiChannel,\n                                isLSB\n                                    ? midiControllers.bankSelectLSB\n                                    : midiControllers.bankSelect,\n                                v,\n                                e.ticks\n                            );\n                            addEventBefore(bankChange);\n                        };\n\n                        if (\n                            BankSelectHacks.isSystemXG(system) &&\n                            change.isGMGSDrum\n                        ) {\n                            // Best I can do is XG drums\n                            SpessaSynthInfo(\n                                `%cAdding XG Drum change on track %c${trackNum}`,\n                                consoleColors.recognized,\n                                consoleColors.value\n                            );\n                            desiredBankMSB =\n                                BankSelectHacks.getDrumBank(system);\n                            desiredBankLSB = 0;\n                        }\n\n                        // Add bank change\n                        addBank(false, desiredBankMSB);\n                        addBank(true, desiredBankLSB);\n\n                        if (\n                            change.isGMGSDrum &&\n                            !BankSelectHacks.isSystemXG(system) &&\n                            midiChannel !== DEFAULT_PERCUSSION\n                        ) {\n                            // Add gs drum change\n                            SpessaSynthInfo(\n                                `%cAdding GS Drum change on track %c${trackNum}`,\n                                consoleColors.recognized,\n                                consoleColors.value\n                            );\n                            addEventBefore(getDrumChange(midiChannel, e.ticks));\n                        }\n                    }\n                }\n                // Transpose key (for zero it won't change anyway)\n                e.data[0] += coarseTranspose[channel];\n                break;\n\n            case midiMessageTypes.noteOff:\n                e.data[0] += coarseTranspose[channel];\n                break;\n\n            case midiMessageTypes.programChange:\n                // Do we delete it?\n                if (channelsToChangeProgram.has(channel)) {\n                    // This channel has program change. BEGONE!\n                    deleteThisEvent();\n                    return;\n                }\n                break;\n\n            case midiMessageTypes.controllerChange:\n                {\n                    const ccNum = e.data[0];\n                    const changes = desiredControllerChanges.find(\n                        (c) =>\n                            c.channel === channel &&\n                            ccNum === c.controllerNumber\n                    );\n                    if (changes !== undefined) {\n                        // This controller is locked, BEGONE CHANGE!\n                        deleteThisEvent();\n                        return;\n                    }\n                    // Bank maybe?\n                    if (\n                        ccNum === midiControllers.bankSelect ||\n                        ccNum === midiControllers.bankSelectLSB\n                    ) {\n                        if (channelsToChangeProgram.has(channel)) {\n                            // BEGONE!\n                            deleteThisEvent();\n                        }\n                    }\n                }\n                break;\n\n            case midiMessageTypes.systemExclusive:\n                // Check for xg on\n                if (isXGOn(e)) {\n                    SpessaSynthInfo(\n                        \"%cXG system on detected\",\n                        consoleColors.info\n                    );\n                    system = \"xg\";\n                    addedGs = true; // Flag as true so gs won't get added\n                } else if (\n                    e.data[0] === 0x43 && // Yamaha\n                    e.data[2] === 0x4c && // XG\n                    e.data[3] === 0x08 && // Part parameter\n                    e.data[5] === 0x03 // Program change\n                ) {\n                    // Check for xg program change\n                    // Do we delete it?\n                    if (channelsToChangeProgram.has(e.data[4] + portOffset)) {\n                        // This channel has program change. BEGONE!\n                        deleteThisEvent();\n                    }\n                } else if (isGM2On(e)) {\n                    SpessaSynthInfo(\n                        \"%cGM2 system on detected\",\n                        consoleColors.info\n                    );\n                    system = \"gm2\";\n                    addedGs = true; // Flag as true so gs won't get added\n                } else if (isGSOn(e)) {\n                    // Check for GS on\n                    // That's a GS on, we're done here\n                    addedGs = true;\n                    SpessaSynthInfo(\n                        \"%cGS on detected!\",\n                        consoleColors.recognized\n                    );\n                    break;\n                } else if (isGMOn(e)) {\n                    // Check for GM on\n                    // That's a GM1 system change, remove it!\n                    SpessaSynthInfo(\n                        \"%cGM on detected, removing!\",\n                        consoleColors.info\n                    );\n                    deleteThisEvent();\n                    addedGs = false;\n                }\n        }\n    });\n    // Check for gs\n    if (!addedGs && desiredProgramChanges.length > 0) {\n        // Gs is not on, add it on the first track at index 0 (or 1 if track name is first)\n        let index = 0;\n        if (\n            midi.tracks[0].events[0].statusByte === midiMessageTypes.trackName\n        ) {\n            index++;\n        }\n        midi.tracks[0].addEvent(getGsOn(0), index);\n        SpessaSynthInfo(\"%cGS on not detected. Adding it.\", consoleColors.info);\n    }\n    midi.flush();\n    SpessaSynthGroupEnd();\n}\n\n/**\n * Modifies the sequence according to the locked presets and controllers in the given snapshot\n */\nexport function applySnapshotInternal(\n    midi: BasicMIDI,\n    snapshot: SynthesizerSnapshot\n) {\n    const channelsToTranspose: DesiredChannelTranspose[] = [];\n\n    const channelsToClear: number[] = [];\n    const programChanges: DesiredProgramChange[] = [];\n    const controllerChanges: DesiredControllerChange[] = [];\n    snapshot.channelSnapshots.forEach((channel, channelNumber) => {\n        if (channel.isMuted) {\n            channelsToClear.push(channelNumber);\n            return;\n        }\n        const transposeFloat =\n            channel.channelTransposeKeyShift +\n            channel.customControllers[customControllers.channelTransposeFine] /\n                100;\n        if (transposeFloat !== 0) {\n            channelsToTranspose.push({\n                channel: channelNumber,\n                keyShift: transposeFloat\n            });\n        }\n        if (channel.lockPreset) {\n            programChanges.push({\n                channel: channelNumber,\n                ...channel.patch\n            });\n        }\n        // Check for locked controllers and change them appropriately\n        channel.lockedControllers.forEach((l, ccNumber) => {\n            if (\n                !l ||\n                ccNumber > 127 ||\n                ccNumber === midiControllers.bankSelect\n            ) {\n                return;\n            }\n            const targetValue = channel.midiControllers[ccNumber] >> 7; // Channel controllers are stored as 14 bit values\n            controllerChanges.push({\n                channel: channelNumber,\n                controllerNumber: ccNumber,\n                controllerValue: targetValue\n            });\n        });\n    });\n    midi.modify(\n        programChanges,\n        controllerChanges,\n        channelsToClear,\n        channelsToTranspose\n    );\n}\n", "import {\n    getStringBytes,\n    readBinaryStringIndexed\n} from \"../utils/byte_functions/string\";\nimport {\n    SpessaSynthGroup,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo,\n    SpessaSynthWarn\n} from \"../utils/loggin\";\nimport { consoleColors } from \"../utils/other\";\nimport { readBigEndianIndexed } from \"../utils/byte_functions/big_endian\";\nimport { readVariableLengthQuantity } from \"../utils/byte_functions/variable_length_quantity\";\nimport { inflateSync } from \"../externals/fflate/fflate_wrapper\";\nimport { IndexedByteArray } from \"../utils/indexed_array\";\nimport type { BasicMIDI } from \"./basic_midi\";\nimport type { RMIDInfoData } from \"./types\";\n\nconst metadataTypes = {\n    XMFFileType: 0,\n    nodeName: 1,\n    nodeIDNumber: 2,\n    resourceFormat: 3,\n    filenameOnDisk: 4,\n    filenameExtensionOnDisk: 5,\n    macOSFileTypeAndCreator: 6,\n    mimeType: 7,\n    title: 8,\n    copyrightNotice: 9,\n    comment: 10,\n    autoStart: 11, // Node Name of the FileNode containing the SMF image to autostart when the XMF file loads\n    preload: 12, // Used to preload specific SMF and DLS file images.\n    contentDescription: 13, // RP-42a (https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp42.pdf)\n    ID3Metadata: 14 // RP-47 (https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp47.pdf)\n} as const;\n\ntype metadataTypes = (typeof metadataTypes)[keyof typeof metadataTypes];\n\nconst referenceTypeIds = {\n    inLineResource: 1,\n    inFileResource: 2,\n    inFileNode: 3,\n    externalFile: 4,\n    externalXMF: 5,\n    XMFFileURIandNodeID: 6\n} as const;\n\ntype referenceTypeIds =\n    (typeof referenceTypeIds)[keyof typeof referenceTypeIds];\n\nconst resourceFormatIDs = {\n    StandardMIDIFile: 0,\n    StandardMIDIFileType1: 1,\n    DLS1: 2,\n    DLS2: 3,\n    DLS22: 4,\n    mobileDLS: 5,\n    unknown: -1,\n    folder: -2\n} as const;\n\ntype resourceFormatStrings = keyof typeof resourceFormatIDs;\ntype resourceFormatIDs =\n    (typeof resourceFormatIDs)[keyof typeof resourceFormatIDs];\n\nconst formatTypeIDs = {\n    standard: 0,\n    MMA: 1,\n    registered: 2,\n    nonRegistered: 3\n} as const;\n\nconst unpackerIDs = {\n    none: 0,\n    MMAUnpacker: 1,\n    registered: 2,\n    nonRegistered: 3\n} as const;\n\ntype unpackerIDs = (typeof unpackerIDs)[keyof typeof unpackerIDs];\n\ntype InternalUnpackerType = Partial<{\n    id: unpackerIDs;\n    standardID: number;\n    manufacturerID: number;\n    manufacturerInternalID: number;\n    decodedSize: number;\n}>;\n\nclass XMFNode {\n    public length: number;\n    /**\n     * 0 means it's a file node\n     */\n    public itemCount: number;\n    public metadataLength: number;\n\n    public metadata: Record<string, string | number[] | IndexedByteArray> = {};\n\n    public nodeData: IndexedByteArray;\n\n    public innerNodes: XMFNode[] = [];\n\n    public packedContent = false;\n\n    public nodeUnpackers: InternalUnpackerType[] = [];\n\n    public resourceFormat: resourceFormatStrings = \"unknown\";\n\n    public referenceTypeID: referenceTypeIds;\n\n    public constructor(binaryData: IndexedByteArray) {\n        const nodeStartIndex = binaryData.currentIndex;\n        this.length = readVariableLengthQuantity(binaryData);\n        this.itemCount = readVariableLengthQuantity(binaryData);\n        // Header length\n        const headerLength = readVariableLengthQuantity(binaryData);\n        const readBytes = binaryData.currentIndex - nodeStartIndex;\n\n        const remainingHeader = headerLength - readBytes;\n        const headerData = binaryData.slice(\n            binaryData.currentIndex,\n            binaryData.currentIndex + remainingHeader\n        );\n        binaryData.currentIndex += remainingHeader;\n\n        this.metadataLength = readVariableLengthQuantity(headerData);\n\n        const metadataChunk = headerData.slice(\n            headerData.currentIndex,\n            headerData.currentIndex + this.metadataLength\n        );\n        headerData.currentIndex += this.metadataLength;\n\n        let fieldSpecifier: metadataTypes | string;\n        let key: string;\n        while (metadataChunk.currentIndex < metadataChunk.length) {\n            const firstSpecifierByte =\n                metadataChunk[metadataChunk.currentIndex];\n            if (firstSpecifierByte === 0) {\n                metadataChunk.currentIndex++;\n                fieldSpecifier = readVariableLengthQuantity(\n                    metadataChunk\n                ) as metadataTypes;\n                if (!Object.values(metadataTypes).includes(fieldSpecifier)) {\n                    SpessaSynthInfo(\n                        `Unknown field specifier: ${fieldSpecifier}`\n                    );\n                    key = `unknown_${fieldSpecifier}`;\n                } else {\n                    key =\n                        Object.keys(metadataTypes).find(\n                            (k) =>\n                                metadataTypes[\n                                    k as keyof typeof metadataTypes\n                                ] === fieldSpecifier\n                        ) ?? \"\";\n                }\n            } else {\n                // This is the length of string\n                const stringLength = readVariableLengthQuantity(metadataChunk);\n                fieldSpecifier = readBinaryStringIndexed(\n                    metadataChunk,\n                    stringLength\n                );\n                key = fieldSpecifier;\n            }\n\n            const numberOfVersions = readVariableLengthQuantity(metadataChunk);\n            if (numberOfVersions === 0) {\n                const dataLength = readVariableLengthQuantity(metadataChunk);\n                const contentsChunk = metadataChunk.slice(\n                    metadataChunk.currentIndex,\n                    metadataChunk.currentIndex + dataLength\n                );\n                metadataChunk.currentIndex += dataLength;\n                const formatID = readVariableLengthQuantity(contentsChunk);\n                // Text only\n                if (formatID < 4) {\n                    this.metadata[key] = readBinaryStringIndexed(\n                        contentsChunk,\n                        dataLength - 1\n                    );\n                } else {\n                    this.metadata[key] = contentsChunk.slice(\n                        contentsChunk.currentIndex\n                    );\n                }\n            } else {\n                // Throw new Error (\"International content is not supported.\");\n                // Skip the number of versions\n                SpessaSynthInfo(`International content: ${numberOfVersions}`);\n                // Length in bytes\n                // Skip the whole thing!\n                metadataChunk.currentIndex +=\n                    readVariableLengthQuantity(metadataChunk);\n            }\n        }\n\n        const unpackersStart = headerData.currentIndex;\n        const unpackersLength = readVariableLengthQuantity(headerData);\n        const unpackersData = headerData.slice(\n            headerData.currentIndex,\n            unpackersStart + unpackersLength\n        );\n        headerData.currentIndex = unpackersStart + unpackersLength;\n        if (unpackersLength > 0) {\n            this.packedContent = true;\n            while (unpackersData.currentIndex < unpackersLength) {\n                const unpacker: InternalUnpackerType = {};\n                unpacker.id = readVariableLengthQuantity(\n                    unpackersData\n                ) as unpackerIDs;\n                switch (unpacker.id) {\n                    case unpackerIDs.nonRegistered:\n                    case unpackerIDs.registered:\n                        SpessaSynthGroupEnd();\n                        throw new Error(\n                            `Unsupported unpacker ID: ${unpacker.id}`\n                        );\n\n                    default:\n                        SpessaSynthGroupEnd();\n                        throw new Error(\n                            `Unknown unpacker ID: ${unpacker.id as string}`\n                        );\n\n                    case unpackerIDs.none:\n                        unpacker.standardID =\n                            readVariableLengthQuantity(unpackersData);\n                        break;\n\n                    case unpackerIDs.MMAUnpacker:\n                        {\n                            let manufacturerID =\n                                unpackersData[unpackersData.currentIndex++];\n                            // One or three byte form, depending on if the first byte is zero\n                            if (manufacturerID === 0) {\n                                manufacturerID <<= 8;\n                                manufacturerID |=\n                                    unpackersData[unpackersData.currentIndex++];\n                                manufacturerID <<= 8;\n                                manufacturerID |=\n                                    unpackersData[unpackersData.currentIndex++];\n                            }\n                            const manufacturerInternalID =\n                                readVariableLengthQuantity(unpackersData);\n                            unpacker.manufacturerID = manufacturerID;\n                            unpacker.manufacturerInternalID =\n                                manufacturerInternalID;\n                        }\n                        break;\n                }\n                unpacker.decodedSize =\n                    readVariableLengthQuantity(unpackersData);\n                this.nodeUnpackers.push(unpacker);\n            }\n        }\n        binaryData.currentIndex = nodeStartIndex + headerLength;\n        this.referenceTypeID = readVariableLengthQuantity(\n            binaryData\n        ) as referenceTypeIds;\n        this.nodeData = binaryData.slice(\n            binaryData.currentIndex,\n            nodeStartIndex + this.length\n        );\n        binaryData.currentIndex = nodeStartIndex + this.length;\n        switch (this.referenceTypeID) {\n            case referenceTypeIds.inLineResource:\n                break;\n\n            case referenceTypeIds.externalXMF:\n            case referenceTypeIds.inFileNode:\n            case referenceTypeIds.XMFFileURIandNodeID:\n            case referenceTypeIds.externalFile:\n            case referenceTypeIds.inFileResource:\n                SpessaSynthGroupEnd();\n                throw new Error(\n                    `Unsupported reference type: ${this.referenceTypeID}`\n                );\n\n            default:\n                SpessaSynthGroupEnd();\n                throw new Error(\n                    `Unknown reference type: ${this.referenceTypeID as string}`\n                );\n        }\n\n        // Read the data\n        if (this.isFile) {\n            if (this.packedContent) {\n                const compressed = this.nodeData.slice(2, this.nodeData.length);\n                SpessaSynthInfo(\n                    `%cPacked content. Attempting to deflate. Target size: %c${this.nodeUnpackers[0].decodedSize}`,\n                    consoleColors.warn,\n                    consoleColors.value\n                );\n                try {\n                    this.nodeData = new IndexedByteArray(\n                        inflateSync(compressed).buffer\n                    );\n                } catch (e: unknown) {\n                    SpessaSynthGroupEnd();\n                    if (e instanceof Error) {\n                        throw new Error(\n                            `Error unpacking XMF file contents: ${e.message}.`\n                        );\n                    }\n                }\n            }\n            /**\n             * Interpret the content\n             */\n            const resourceFormat = this.metadata.resourceFormat as number[];\n            if (resourceFormat === undefined) {\n                SpessaSynthWarn(\"No resource format for this file node!\");\n            } else {\n                const formatTypeID = resourceFormat[0];\n                if (formatTypeID !== formatTypeIDs.standard) {\n                    SpessaSynthInfo(\n                        `Non-standard formatTypeID: ${resourceFormat.toString()}`\n                    );\n                    this.resourceFormat =\n                        resourceFormat.toString() as resourceFormatStrings;\n                }\n                const resourceFormatID = resourceFormat[1] as resourceFormatIDs;\n                if (\n                    !Object.values(resourceFormatIDs).includes(resourceFormatID)\n                ) {\n                    SpessaSynthInfo(\n                        `Unrecognized resource format: ${resourceFormatID}`\n                    );\n                } else {\n                    this.resourceFormat = Object.keys(resourceFormatIDs).find(\n                        (k) =>\n                            resourceFormatIDs[\n                                k as keyof typeof resourceFormatIDs\n                            ] === resourceFormatID\n                    ) as resourceFormatStrings;\n                }\n            }\n        } else {\n            // Folder node\n            this.resourceFormat = \"folder\";\n            while (this.nodeData.currentIndex < this.nodeData.length) {\n                const nodeStartIndex = this.nodeData.currentIndex;\n                const nodeLength = readVariableLengthQuantity(this.nodeData);\n                const nodeData = this.nodeData.slice(\n                    nodeStartIndex,\n                    nodeStartIndex + nodeLength\n                );\n                this.nodeData.currentIndex = nodeStartIndex + nodeLength;\n                this.innerNodes.push(new XMFNode(nodeData));\n            }\n        }\n    }\n\n    public get isFile() {\n        return this.itemCount === 0;\n    }\n}\n\n/**\n * Parses an XMF file\n * @param midi {BasicMIDI}\n * @param binaryData {IndexedByteArray}\n * @returns {IndexedByteArray} the file byte array\n */\nexport function loadXMF(\n    midi: BasicMIDI,\n    binaryData: IndexedByteArray\n): IndexedByteArray {\n    midi.bankOffset = 0;\n    // https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/xmf-v1a.pdf\n    // https://wiki.multimedia.cx/index.php?title=Extensible_Music_Format_(XMF)\n    const sanityCheck = readBinaryStringIndexed(binaryData, 4);\n    if (sanityCheck !== \"XMF_\") {\n        SpessaSynthGroupEnd();\n        throw new SyntaxError(\n            `Invalid XMF Header! Expected \"_XMF\", got \"${sanityCheck}\"`\n        );\n    }\n\n    SpessaSynthGroup(\"%cParsing XMF file...\", consoleColors.info);\n    const version = readBinaryStringIndexed(binaryData, 4);\n    SpessaSynthInfo(\n        `%cXMF version: %c${version}`,\n        consoleColors.info,\n        consoleColors.recognized\n    );\n    // https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp43.pdf\n    // Version 2.00 has additional bytes\n    if (version === \"2.00\") {\n        const fileTypeId = readBigEndianIndexed(binaryData, 4);\n        const fileTypeRevisionId = readBigEndianIndexed(binaryData, 4);\n        SpessaSynthInfo(\n            `%cFile Type ID: %c${fileTypeId}%c, File Type Revision ID: %c${fileTypeRevisionId}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n    }\n\n    // File length\n    readVariableLengthQuantity(binaryData);\n\n    const metadataTableLength = readVariableLengthQuantity(binaryData);\n    // Skip metadata\n    binaryData.currentIndex += metadataTableLength;\n\n    // Skip to tree root\n    binaryData.currentIndex = readVariableLengthQuantity(binaryData);\n    const rootNode = new XMFNode(binaryData);\n    let midiArray: IndexedByteArray | undefined = undefined;\n    /**\n     * Find the stuff we care about\n     */\n    const searchNode = (node: XMFNode) => {\n        const checkMeta = (\n            xmf: string,\n            rmid: keyof Omit<RMIDInfoData, \"picture\" | \"creationDate\">\n        ) => {\n            if (\n                node.metadata[xmf] !== undefined &&\n                typeof node.metadata[xmf] === \"string\"\n            ) {\n                midi.rmidiInfo[rmid] = getStringBytes(node.metadata[xmf]);\n            }\n        };\n        // Meta\n        checkMeta(\"nodeName\", \"name\");\n        checkMeta(\"title\", \"name\");\n        checkMeta(\"copyrightNotice\", \"copyright\");\n        checkMeta(\"comment\", \"comment\");\n        if (node.isFile) {\n            switch (node.resourceFormat) {\n                default:\n                    return;\n                case \"DLS1\":\n                case \"DLS2\":\n                case \"DLS22\":\n                case \"mobileDLS\":\n                    SpessaSynthInfo(\n                        \"%cFound embedded DLS!\",\n                        consoleColors.recognized\n                    );\n                    midi.embeddedSoundBank = node.nodeData.buffer;\n                    break;\n\n                case \"StandardMIDIFile\":\n                case \"StandardMIDIFileType1\":\n                    SpessaSynthInfo(\n                        \"%cFound embedded MIDI!\",\n                        consoleColors.recognized\n                    );\n                    midiArray = node.nodeData;\n                    break;\n            }\n        } else {\n            for (const n of node.innerNodes) {\n                searchNode(n);\n            }\n        }\n    };\n    searchNode(rootNode);\n    SpessaSynthGroupEnd();\n    if (!midiArray) {\n        throw new Error(\"No MIDI data in the XMF file!\");\n    }\n    return midiArray;\n}\n", "import { MIDIMessage } from \"./midi_message\";\nimport { IndexedByteArray } from \"../utils/indexed_array\";\n\nexport class MIDITrack {\n    /**\n     * The name of this track.\n     */\n    public name = \"\";\n    /**\n     * The MIDI port number used by the track.\n     */\n    public port = 0;\n    /**\n     * A set that contains the MIDI channels used by the track in the sequence.\n     */\n    public channels = new Set<number>();\n    /**\n     * All the MIDI messages of this track.\n     */\n    public events: Omit<MIDIMessage[], \"push\" | \"splice\"> = [];\n\n    public static copyFrom(track: MIDITrack) {\n        const t = new MIDITrack();\n        t.copyFrom(track);\n        return t;\n    }\n\n    public copyFrom(track: MIDITrack) {\n        this.name = track.name;\n        this.port = track.port;\n        this.channels = new Set(track.channels);\n        this.events = track.events.map(\n            (e) =>\n                new MIDIMessage(\n                    e.ticks,\n                    e.statusByte,\n                    new IndexedByteArray(e.data)\n                )\n        );\n    }\n\n    /**\n     * Adds an event to the track.\n     * @param event The event to add.\n     * @param index The index at which to add this event.\n     */\n    public addEvent(event: MIDIMessage, index: number) {\n        (this.events as MIDIMessage[]).splice(index, 0, event);\n    }\n\n    /**\n     * Removes an event from the track.\n     * @param index The index of the event to remove.\n     */\n    public deleteEvent(index: number) {\n        (this.events as MIDIMessage[]).splice(index, 1);\n    }\n\n    /**\n     * Appends an event to the end of the track.\n     * @param event The event to add.\n     */\n    public pushEvent(event: MIDIMessage) {\n        (this.events as MIDIMessage[]).push(event);\n    }\n}\n", "import { dataBytesAmount, getChannel, MIDIMessage } from \"./midi_message\";\nimport { IndexedByteArray } from \"../utils/indexed_array\";\nimport { consoleColors } from \"../utils/other\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo, SpessaSynthWarn } from \"../utils/loggin\";\nimport { readRIFFChunk } from \"../utils/riff_chunk\";\nimport { readVariableLengthQuantity } from \"../utils/byte_functions/variable_length_quantity\";\nimport { readBigEndianIndexed } from \"../utils/byte_functions/big_endian\";\nimport { readBinaryString, readBinaryStringIndexed } from \"../utils/byte_functions/string\";\nimport { readLittleEndian } from \"../utils/byte_functions/little_endian\";\nimport { type MIDIMessageType } from \"./enums\";\nimport { BasicMIDI } from \"./basic_midi\";\nimport { loadXMF } from \"./xmf_loader\";\nimport type { MIDIFormat, RMIDInfoFourCC } from \"./types\";\nimport { MIDITrack } from \"./midi_track\";\n\n/**\n * Midi_loader.ts\n * purpose:\n * parses a midi file for the sequencer,\n * including things like marker or CC 2/4 loop detection, copyright detection, etc.\n */\n\ninterface MIDIChunk {\n    type: string;\n    size: number;\n    data: IndexedByteArray;\n}\n\n/**\n * Loads a MIDI file (SMF, RMIDI, XMF) from a given ArrayBuffer.\n * @param outputMIDI The BasicMIDI instance to populate with the parsed MIDI data.\n * @param arrayBuffer The ArrayBuffer containing the binary file data.\n * @param fileName The optional name of the file, will be used if the MIDI file does not have a name.\n * @remarks\n * This function reads the MIDI file format, extracts the header and track chunks,\n * and populates the BasicMIDI instance with the parsed data.\n * It supports Standard MIDI Files (SMF), RIFF MIDI (RMIDI), and Extensible Music Format (XMF).\n * It also handles embedded soundbanks in RMIDI files.\n * If the file is an RMIDI file, it will extract the embedded soundbank and store\n * it in the `embeddedSoundFont` property of the BasicMIDI instance.\n * If the file is an XMF file, it will parse the XMF structure and extract the MIDI data.\n */\nexport function loadMIDIFromArrayBufferInternal(\n    outputMIDI: BasicMIDI,\n    arrayBuffer: ArrayBuffer,\n    fileName?: string\n) {\n    SpessaSynthGroupCollapsed(`%cParsing MIDI File...`, consoleColors.info);\n    outputMIDI.fileName = fileName;\n    const binaryData = new IndexedByteArray(arrayBuffer);\n    let smfFileBinary = binaryData;\n\n    const readMIDIChunk = (fileByteArray: IndexedByteArray): MIDIChunk => {\n        const type = readBinaryStringIndexed(fileByteArray, 4);\n        const size = readBigEndianIndexed(fileByteArray, 4);\n        const data = new IndexedByteArray(size);\n        const chunk: MIDIChunk = {\n            type,\n            size,\n            data\n        };\n\n        const dataSlice = fileByteArray.slice(\n            fileByteArray.currentIndex,\n            fileByteArray.currentIndex + chunk.size\n        );\n        chunk.data.set(dataSlice, 0);\n        fileByteArray.currentIndex += chunk.size;\n        return chunk;\n    };\n\n    // Check for rmid\n    const initialString = readBinaryString(binaryData, 4);\n    if (initialString === \"RIFF\") {\n        // Possibly an RMID file (https://github.com/spessasus/sf2-rmidi-specification#readme)\n        // Skip size\n        binaryData.currentIndex += 8;\n        const rmid = readBinaryStringIndexed(binaryData, 4);\n        if (rmid !== \"RMID\") {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(\n                `Invalid RMIDI Header! Expected \"RMID\", got \"${rmid}\"`\n            );\n        }\n        const riff = readRIFFChunk(binaryData);\n        if (riff.header !== \"data\") {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(\n                `Invalid RMIDI Chunk header! Expected \"data\", got \"${rmid}\"`\n            );\n        }\n        // OutputMIDI is a rmid, load the midi into an array for parsing\n        smfFileBinary = riff.data;\n\n        let isSF2RMIDI = false;\n        let foundDbnk = false;\n        // Keep loading chunks until we get the \"SFBK\" header\n        while (binaryData.currentIndex <= binaryData.length) {\n            const startIndex = binaryData.currentIndex;\n            const currentChunk = readRIFFChunk(binaryData, true);\n            if (currentChunk.header === \"RIFF\") {\n                const type = readBinaryStringIndexed(\n                    currentChunk.data,\n                    4\n                ).toLowerCase();\n                if (type === \"sfbk\" || type === \"sfpk\" || type === \"dls \") {\n                    SpessaSynthInfo(\n                        \"%cFound embedded soundbank!\",\n                        consoleColors.recognized\n                    );\n                    outputMIDI.embeddedSoundBank = binaryData.slice(\n                        startIndex,\n                        startIndex + currentChunk.size\n                    ).buffer;\n                } else {\n                    SpessaSynthWarn(`Unknown RIFF chunk: \"${type}\"`);\n                }\n                if (type === \"dls \") {\n                    // Assume bank offset of 0 by default. If we find any bank selects, then the offset is 1.\n                    outputMIDI.isDLSRMIDI = true;\n                } else {\n                    isSF2RMIDI = true;\n                }\n            } else if (currentChunk.header === \"LIST\") {\n                const type = readBinaryStringIndexed(currentChunk.data, 4);\n                if (type === \"INFO\") {\n                    SpessaSynthInfo(\n                        \"%cFound RMIDI INFO chunk!\",\n                        consoleColors.recognized\n                    );\n                    while (\n                        currentChunk.data.currentIndex <= currentChunk.size\n                    ) {\n                        const infoChunk = readRIFFChunk(\n                            currentChunk.data,\n                            true\n                        );\n                        const headerTyped = infoChunk.header as RMIDInfoFourCC;\n                        const infoData = infoChunk.data;\n                        switch (headerTyped) {\n                            default:\n                                SpessaSynthWarn(\n                                    `Unknown RMIDI Info: ${headerTyped as string}`\n                                );\n                                break;\n\n                            case \"INAM\":\n                                outputMIDI.rmidiInfo.name = infoData;\n                                break;\n\n                            case \"IALB\":\n                            case \"IPRD\":\n                                // Note that there are two album chunks: IPRD and IALB\n                                outputMIDI.rmidiInfo.album = infoData;\n                                break;\n\n                            case \"ICRT\":\n                            case \"ICRD\":\n                                // Older RMIDIs written by spessasynth erroneously used ICRT instead of ICRD.\n                                outputMIDI.rmidiInfo.creationDate = infoData;\n                                break;\n\n                            case \"IART\":\n                                outputMIDI.rmidiInfo.artist = infoData;\n                                break;\n\n                            case \"IGNR\":\n                                outputMIDI.rmidiInfo.genre = infoData;\n                                break;\n\n                            case \"IPIC\":\n                                outputMIDI.rmidiInfo.picture = infoData;\n                                break;\n\n                            case \"ICOP\":\n                                outputMIDI.rmidiInfo.copyright = infoData;\n                                break;\n\n                            case \"ICMT\":\n                                outputMIDI.rmidiInfo.comment = infoData;\n                                break;\n\n                            case \"IENG\":\n                                outputMIDI.rmidiInfo.engineer = infoData;\n                                break;\n\n                            case \"ISFT\":\n                                outputMIDI.rmidiInfo.software = infoData;\n                                break;\n\n                            case \"ISBJ\":\n                                outputMIDI.rmidiInfo.subject = infoData;\n                                break;\n\n                            case \"IENC\":\n                                outputMIDI.rmidiInfo.infoEncoding = infoData;\n                                break;\n\n                            case \"MENC\":\n                                outputMIDI.rmidiInfo.midiEncoding = infoData;\n                                break;\n\n                            case \"DBNK\":\n                                outputMIDI.bankOffset = readLittleEndian(\n                                    infoData,\n                                    2\n                                );\n                                foundDbnk = true;\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (isSF2RMIDI && !foundDbnk) {\n            outputMIDI.bankOffset = 1; // Defaults to 1\n        }\n\n        if (outputMIDI.isDLSRMIDI) {\n            // Assume bank offset of 0 by default. If we find any bank selects, then the offset is 1.\n            outputMIDI.bankOffset = 0;\n        }\n\n        // If no embedded bank, assume 0\n        if (outputMIDI.embeddedSoundBank === undefined) {\n            outputMIDI.bankOffset = 0;\n        }\n    } else if (initialString === \"XMF_\") {\n        // XMF file\n        smfFileBinary = loadXMF(outputMIDI, binaryData);\n    } else {\n        smfFileBinary = binaryData;\n    }\n    const headerChunk = readMIDIChunk(smfFileBinary);\n    if (headerChunk.type !== \"MThd\") {\n        SpessaSynthGroupEnd();\n        throw new SyntaxError(\n            `Invalid MIDI Header! Expected \"MThd\", got \"${headerChunk.type}\"`\n        );\n    }\n\n    if (headerChunk.size !== 6) {\n        SpessaSynthGroupEnd();\n        throw new RangeError(\n            `Invalid MIDI header chunk size! Expected 6, got ${headerChunk.size}`\n        );\n    }\n\n    // Format\n    outputMIDI.format = readBigEndianIndexed(headerChunk.data, 2) as MIDIFormat;\n    // Tracks count\n    const trackCount = readBigEndianIndexed(headerChunk.data, 2);\n    // Time division\n    outputMIDI.timeDivision = readBigEndianIndexed(headerChunk.data, 2);\n    // Read all the tracks\n    for (let i = 0; i < trackCount; i++) {\n        const track = new MIDITrack();\n        const trackChunk = readMIDIChunk(smfFileBinary);\n\n        if (trackChunk.type !== \"MTrk\") {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(\n                `Invalid track header! Expected \"MTrk\" got \"${trackChunk.type}\"`\n            );\n        }\n\n        /**\n         * MIDI running byte\n         */\n        let runningByte: MIDIMessageType | undefined = undefined;\n\n        let totalTicks = 0;\n        // Format 2 plays sequentially\n        if (outputMIDI.format === 2 && i > 0) {\n            totalTicks +=\n                outputMIDI.tracks[i - 1].events[\n                    outputMIDI.tracks[i - 1].events.length - 1\n                ].ticks;\n        }\n        // Loop until we reach the end of track\n        while (trackChunk.data.currentIndex < trackChunk.size) {\n            totalTicks += readVariableLengthQuantity(trackChunk.data);\n\n            // Check if the status byte is valid (IE. larger than 127)\n            const statusByteCheck =\n                trackChunk.data[trackChunk.data.currentIndex];\n\n            let statusByte: MIDIMessageType;\n            // If we have a running byte and the status byte isn't valid\n            if (runningByte !== undefined && statusByteCheck < 0x80) {\n                statusByte = runningByte;\n            } else {\n                if (statusByteCheck < 0x80) {\n                    // If we don't have a running byte and the status byte isn't valid, it's an error.\n                    SpessaSynthGroupEnd();\n                    throw new SyntaxError(\n                        `Unexpected byte with no running byte. (${statusByteCheck})`\n                    );\n                } else {\n                    // If the status byte is valid, use that\n                    statusByte = trackChunk.data[\n                        trackChunk.data.currentIndex++\n                    ] as MIDIMessageType;\n                }\n            }\n            const statusByteChannel = getChannel(statusByte);\n\n            let eventDataLength;\n\n            // Determine the message's length;\n            switch (statusByteChannel) {\n                case -1:\n                    // System common/realtime (no length)\n                    eventDataLength = 0;\n                    break;\n\n                case -2:\n                    // Meta (the next is the actual status byte)\n                    statusByte = trackChunk.data[\n                        trackChunk.data.currentIndex++\n                    ] as MIDIMessageType;\n                    eventDataLength = readVariableLengthQuantity(\n                        trackChunk.data\n                    );\n                    break;\n\n                case -3:\n                    // Sysex\n                    eventDataLength = readVariableLengthQuantity(\n                        trackChunk.data\n                    );\n                    break;\n\n                default:\n                    // Voice message\n                    // Gets the midi message length\n                    eventDataLength =\n                        dataBytesAmount[\n                            (statusByte >> 4) as keyof typeof dataBytesAmount\n                        ];\n                    // Save the status byte\n                    runningByte = statusByte;\n                    break;\n            }\n\n            // Put the event data into the array\n            const eventData = new IndexedByteArray(eventDataLength);\n            eventData.set(\n                trackChunk.data.slice(\n                    trackChunk.data.currentIndex,\n                    trackChunk.data.currentIndex + eventDataLength\n                ),\n                0\n            );\n            const event = new MIDIMessage(totalTicks, statusByte, eventData);\n            track.pushEvent(event);\n\n            // Advance the track chunk\n            trackChunk.data.currentIndex += eventDataLength;\n        }\n        outputMIDI.tracks.push(track);\n\n        SpessaSynthInfo(\n            `%cParsed %c${outputMIDI.tracks.length}%c / %c${outputMIDI.tracks.length}`,\n            consoleColors.info,\n            consoleColors.value,\n            consoleColors.info,\n            consoleColors.value\n        );\n    }\n\n    SpessaSynthInfo(`%cAll tracks parsed correctly!`, consoleColors.recognized);\n    // Parse the events (no need to sort as they are already sorted by the SMF specification)\n    outputMIDI.flush(false);\n    SpessaSynthGroupEnd();\n}\n", "// Attempt to load a date from string\nimport { SpessaSynthWarn } from \"./loggin\";\n\n// Needed because\n// Invalid date: \"sábado 26 setembro 2020, 16:40:14\". Replacing with the current date!\nconst translationPortuguese = new Map([\n    // Weekdays map (Portuguese to English)\n    [\"domingo\", \"Sunday\"],\n    [\"segunda-feira\", \"Monday\"],\n    [\"terça-feira\", \"Tuesday\"],\n    [\"quarta-feira\", \"Wednesday\"],\n    [\"quinta-feira\", \"Thursday\"],\n    [\"sexta-feira\", \"Friday\"],\n    [\"sábado\", \"Saturday\"],\n\n    // Months map (Portuguese to English)\n    [\"janeiro\", \"January\"],\n    [\"fevereiro\", \"February\"],\n    [\"março\", \"March\"],\n    [\"abril\", \"April\"],\n    [\"maio\", \"May\"],\n    [\"junho\", \"June\"],\n    [\"julho\", \"July\"],\n    [\"agosto\", \"August\"],\n    [\"setembro\", \"September\"],\n    [\"outubro\", \"October\"],\n    [\"novembro\", \"November\"],\n    [\"dezembro\", \"December\"]\n]);\n\nconst translations: Map<string, string>[] = [translationPortuguese];\n\nfunction tryTranslate(dateString: string) {\n    // Translating\n    for (const translation of translations) {\n        let translated = dateString;\n        translation.forEach((english, pt) => {\n            const regex = new RegExp(pt, \"gi\");\n            translated = translated.replace(regex, english);\n        });\n        const date = new Date(translated);\n        if (!isNaN(date.getTime())) {\n            return date;\n        }\n    }\n    return undefined;\n}\n\nfunction tryDotted(dateString: string) {\n    // Regex to match DD.MM.YYYY format\n    const match = /^(\\d{2})\\.(\\d{2})\\.(\\d{4})$/.exec(dateString);\n    if (match) {\n        const day = parseInt(match[1]);\n        const month = parseInt(match[2]) - 1;\n        const year = parseInt(match[3]);\n        const date = new Date(year, month, day);\n        if (!isNaN(date.getTime())) {\n            return date;\n        }\n    }\n    return undefined;\n}\n\nfunction tryAWE(dateString: string) {\n    // Regex to match a \"DD  MM YY\" (testcase: AWE32-MIDI-Conversions, sbk conversion so possibly SFEDT used that)\n    // Also \"DD MM YY\" (without double space)\n    const match = /^(\\d{1,2})\\s{1,2}(\\d{1,2})\\s{1,2}(\\d{2})$/.exec(dateString);\n    if (match) {\n        const day = match[1];\n        const month = (parseInt(match[2]) + 1).toString(); // Seems 0 indexed for some reason\n        const year = match[3];\n        // Format like string to let date decide if 2000 or 1900\n        const date = new Date(`${month}/${day}/${year}`);\n        if (!isNaN(date.getTime())) {\n            return date;\n        }\n    }\n    return undefined;\n}\n\nfunction tryYear(dateString: string) {\n    // Math exactly 4 numbers\n    const regex = /\\b\\d{4}\\b/;\n    const match = regex.exec(dateString);\n    return match ? new Date(match[0]) : undefined;\n}\n\nexport function parseDateString(dateString: string) {\n    // Trim the date. Testcase: \" 4  0  97\"\n    dateString = dateString.trim();\n    if (dateString.length < 1) {\n        return new Date();\n    }\n\n    // Remove \"st\" , \"nd\" , \"rd\",  \"th\", etc.\n    const filtered = dateString.replace(/\\b(\\d+)(st|nd|rd|th)\\b/g, \"$1\");\n    const date = new Date(filtered);\n    if (isNaN(date.getTime())) {\n        const translated = tryTranslate(dateString);\n        if (translated) {\n            return translated;\n        }\n        const dotted = tryDotted(dateString);\n        if (dotted) {\n            return dotted;\n        }\n        const awe = tryAWE(dateString);\n        if (awe) {\n            return awe;\n        }\n\n        const year = tryYear(dateString);\n        if (year) {\n            return year;\n        }\n\n        SpessaSynthWarn(\n            `Invalid date: \"${dateString}\". Replacing with the current date!`\n        );\n        return new Date();\n    }\n    return date;\n}\n", "import { getStringBytes, readBinaryString } from \"../utils/byte_functions/string\";\nimport { MIDIMessage } from \"./midi_message\";\nimport { readBigEndian } from \"../utils/byte_functions/big_endian\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo, SpessaSynthWarn } from \"../utils/loggin\";\nimport { consoleColors, formatTime } from \"../utils/other\";\nimport { writeMIDIInternal } from \"./midi_tools/midi_writer\";\nimport { DEFAULT_RMIDI_WRITE_OPTIONS, writeRMIDIInternal } from \"./midi_tools/rmidi_writer\";\nimport { getUsedProgramsAndKeys } from \"./midi_tools/used_keys_loaded\";\nimport { IndexedByteArray } from \"../utils/indexed_array\";\nimport { getNoteTimesInternal } from \"./midi_tools/get_note_times\";\nimport type { BasicSoundBank } from \"../soundbank/basic_soundbank/basic_soundbank\";\nimport type {\n    DesiredChannelTranspose,\n    DesiredControllerChange,\n    DesiredProgramChange,\n    MIDIFormat,\n    MIDILoop,\n    NoteTime,\n    RMIDInfoData,\n    RMIDIWriteOptions,\n    TempoChange\n} from \"./types\";\nimport { applySnapshotInternal, modifyMIDIInternal } from \"./midi_tools/midi_editor\";\nimport type { SynthesizerSnapshot } from \"../synthesizer/audio_engine/snapshot/synthesizer_snapshot\";\nimport { loadMIDIFromArrayBufferInternal } from \"./midi_loader\";\nimport { midiMessageTypes } from \"./enums\";\nimport type { GenericRange } from \"../soundbank/types\";\nimport { MIDITrack } from \"./midi_track\";\nimport { fillWithDefaults } from \"../utils/fill_with_defaults\";\nimport { parseDateString } from \"../utils/load_date\";\nimport type { BasicPreset } from \"../soundbank/basic_soundbank/basic_preset\";\nimport type { SoundBankManager } from \"../synthesizer/audio_engine/engine_components/sound_bank_manager\";\n\n/**\n * BasicMIDI is the base of a complete MIDI file.\n */\nexport class BasicMIDI {\n    /**\n     * The tracks in the sequence.\n     */\n    public tracks: MIDITrack[] = [];\n\n    /**\n     * The time division of the sequence, representing the number of MIDI ticks per beat.\n     */\n    public timeDivision = 0;\n\n    /**\n     * The duration of the sequence, in seconds.\n     */\n    public duration = 0;\n\n    /**\n     * The tempo changes in the sequence, ordered from the last change to the first.\n     * Each change is represented by an object with a MIDI tick position and a tempo value in beats per minute.\n     */\n    public tempoChanges: TempoChange[] = [{ ticks: 0, tempo: 120 }];\n\n    /**\n     * Any extra metadata found in the file.\n     * These messages were deemed \"interesting\" by the parsing algorithm\n     */\n    public extraMetadata: MIDIMessage[] = [];\n\n    /**\n     * An array containing the lyrics of the sequence.\n     */\n    public lyrics: MIDIMessage[] = [];\n\n    /**\n     * The tick position of the first note-on event in the MIDI sequence.\n     */\n    public firstNoteOn = 0;\n\n    /**\n     * The MIDI key range used in the sequence, represented by a minimum and maximum note value.\n     */\n    public keyRange: GenericRange = { min: 0, max: 127 };\n\n    /**\n     * The tick position of the last voice event (such as note-on, note-off, or control change) in the sequence.\n     */\n    public lastVoiceEventTick = 0;\n\n    /**\n     * An array of channel offsets for each MIDI port, using the SpessaSynth method.\n     * The index is the port number and the value is the channel offset.\n     */\n    public portChannelOffsetMap: number[] = [0];\n\n    /**\n     * The loop points (in ticks) of the sequence, including both start and end points.\n     */\n    public loop: MIDILoop = { start: 0, end: 0 };\n\n    /**\n     * The file name of the MIDI sequence, if provided during parsing.\n     */\n    public fileName?: string;\n\n    /**\n     * The format of the MIDI file, which can be 0, 1, or 2, indicating the type of the MIDI file.\n     */\n    public format: MIDIFormat = 0;\n\n    /**\n     * The RMID (Resource-Interchangeable MIDI) info data, if the file is RMID formatted.\n     * Otherwise, this object is empty.\n     * Info type: Chunk data as a binary array.\n     * Note that text chunks contain a terminal zero byte.\n     */\n    public rmidiInfo: Partial<\n        Record<keyof RMIDInfoData, Uint8Array<ArrayBuffer>>\n    > = {};\n\n    /**\n     * The bank offset used for RMID files.\n     */\n    public bankOffset = 0;\n\n    /**\n     * If the MIDI file is a Soft Karaoke file (.kar), this is set to true.\n     * https://www.mixagesoftware.com/en/midikit/help/HTML/karaoke_formats.html\n     */\n    public isKaraokeFile = false;\n\n    /**\n     * Indicates if this file is a Multi-Port MIDI file.\n     */\n    public isMultiPort = false;\n\n    /**\n     * If the MIDI file is a DLS RMIDI file.\n     */\n    public isDLSRMIDI = false;\n\n    /**\n     * The embedded sound bank in the MIDI file, represented as an ArrayBuffer, if available.\n     */\n    public embeddedSoundBank?: ArrayBuffer;\n\n    /**\n     * The raw, encoded MIDI name, represented as a Uint8Array.\n     * Useful when the MIDI file uses a different code page.\n     * Undefined if no MIDI name could be found.\n     */\n    protected binaryName?: Uint8Array;\n\n    /**\n     * The encoding of the RMIDI info in file, if specified.\n     */\n    public get infoEncoding() {\n        const encodingInfo = this.rmidiInfo.infoEncoding;\n        if (!encodingInfo) {\n            return undefined;\n        }\n        let lengthToRead = encodingInfo.byteLength;\n        // Some files don't have a terminal zero\n        if (encodingInfo[encodingInfo.byteLength - 1] === 0) {\n            lengthToRead--;\n        }\n        return readBinaryString(encodingInfo, lengthToRead);\n    }\n\n    /**\n     * Loads a MIDI file (SMF, RMIDI, XMF) from a given ArrayBuffer.\n     * @param arrayBuffer The ArrayBuffer containing the binary file data.\n     * @param fileName The optional name of the file, will be used if the MIDI file does not have a name.\n     */\n    public static fromArrayBuffer(\n        arrayBuffer: ArrayBuffer,\n        fileName = \"\"\n    ): BasicMIDI {\n        const mid = new BasicMIDI();\n        loadMIDIFromArrayBufferInternal(mid, arrayBuffer, fileName);\n        return mid;\n    }\n\n    /**\n     * Loads a MIDI file (SMF, RMIDI, XMF) from a given file.\n     * @param file The file to load.\n     */\n    public static async fromFile(file: File) {\n        const mid = new BasicMIDI();\n        loadMIDIFromArrayBufferInternal(\n            mid,\n            await file.arrayBuffer(),\n            file.name\n        );\n        return mid;\n    }\n\n    /**\n     * Copies a MIDI.\n     * @param mid The MIDI to copy.\n     * @returns The copied MIDI.\n     */\n    public static copyFrom(mid: BasicMIDI) {\n        const m = new BasicMIDI();\n        m.copyFrom(mid);\n        return m;\n    }\n\n    /**\n     * Copies a MIDI.\n     * @param mid The MIDI to copy.\n     */\n    public copyFrom(mid: BasicMIDI) {\n        this.copyMetadataFrom(mid);\n\n        this.embeddedSoundBank = mid?.embeddedSoundBank?.slice(0) ?? undefined; // Deep copy\n        this.tracks = mid.tracks.map((track) => MIDITrack.copyFrom(track)); // Deep copy of each track array\n    }\n\n    /**\n     * Converts MIDI ticks to time in seconds.\n     * @param ticks The time in MIDI ticks.\n     * @returns The time in seconds.\n     */\n    public midiTicksToSeconds(ticks: number): number {\n        ticks = Math.max(ticks, 0);\n        if (this.tempoChanges.length < 1) {\n            // One is added automatically, but the user may have tampered with it\n            throw new Error(\n                \"There are no tempo changes in the sequence. At least one is needed.\"\n            );\n        }\n\n        // Sanity check\n        if (this.tempoChanges[this.tempoChanges.length - 1].ticks !== 0) {\n            throw new Error(\n                `The last tempo change is not at 0 ticks. Got ${this.tempoChanges[this.tempoChanges.length - 1].ticks} ticks.`\n            );\n        }\n\n        // Tempo changes are reversed, so the first element is the last tempo change\n        // And the last element is the first tempo change\n        // (always at tick 0 and tempo 120)\n        // Find the last tempo change that has occurred\n        let tempoIndex = this.tempoChanges.findIndex((v) => v.ticks <= ticks);\n\n        let totalSeconds = 0;\n        while (tempoIndex < this.tempoChanges.length) {\n            const tempo = this.tempoChanges[tempoIndex++];\n            // Calculate the difference and tempo time\n            const ticksSinceLastTempo = ticks - tempo.ticks;\n            totalSeconds +=\n                (ticksSinceLastTempo * 60) / (tempo.tempo * this.timeDivision);\n            ticks = tempo.ticks;\n        }\n        return totalSeconds;\n    }\n\n    /**\n     * Gets the used programs and keys for this MIDI file with a given sound bank.\n     * @param soundbank the sound bank.\n     * @returns The output data is a key-value pair: preset -> Set<\"key-velocity\">\n     */\n    public getUsedProgramsAndKeys(\n        soundbank: BasicSoundBank | SoundBankManager\n    ): Map<BasicPreset, Set<string>> {\n        return getUsedProgramsAndKeys(this, soundbank);\n    }\n\n    /**\n     * Updates all internal values of the MIDI.\n     * @param sortEvents if the events should be sorted by ticks. Recommended to be true.\n     */\n    public flush(sortEvents = true) {\n        if (sortEvents) {\n            for (const t of this.tracks) {\n                // Sort the track by ticks\n                t.events.sort((e1, e2) => e1.ticks - e2.ticks);\n            }\n        }\n        this.parseInternal();\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Calculates all note times in seconds.\n     * @param minDrumLength the shortest a drum note (channel 10) can be, in seconds.\n     * @returns an array of 16 channels, each channel containing its notes,\n     * with their key number, velocity, absolute start time and length in seconds.\n     */\n    public getNoteTimes(minDrumLength = 0): NoteTime[][] {\n        return getNoteTimesInternal(this, minDrumLength);\n    }\n\n    /**\n     * Exports the midi as a standard MIDI file.\n     * @returns the binary file data.\n     */\n    public writeMIDI(): ArrayBuffer {\n        return writeMIDIInternal(this);\n    }\n\n    /**\n     * Writes an RMIDI file. Note that this method modifies the MIDI file in-place.\n     * @param soundBankBinary the binary sound bank to embed into the file.\n     * @param configuration Extra options for writing the file.\n     * @returns the binary file data.\n     */\n    public writeRMIDI(\n        soundBankBinary: ArrayBuffer,\n        configuration: Partial<RMIDIWriteOptions> = DEFAULT_RMIDI_WRITE_OPTIONS\n    ): ArrayBuffer {\n        return writeRMIDIInternal(\n            this,\n            soundBankBinary,\n            fillWithDefaults(configuration, DEFAULT_RMIDI_WRITE_OPTIONS)\n        );\n    }\n\n    /**\n     * Allows easy editing of the file by removing channels, changing programs,\n     * changing controllers and transposing channels. Note that this modifies the MIDI *in-place*.\n     * @param desiredProgramChanges - The programs to set on given channels.\n     * @param desiredControllerChanges - The controllers to set on given channels.\n     * @param desiredChannelsToClear - The channels to remove from the sequence.\n     * @param desiredChannelsToTranspose - The channels to transpose.\n     */\n    public modify(\n        desiredProgramChanges: DesiredProgramChange[] = [],\n        desiredControllerChanges: DesiredControllerChange[] = [],\n        desiredChannelsToClear: number[] = [],\n        desiredChannelsToTranspose: DesiredChannelTranspose[] = []\n    ) {\n        modifyMIDIInternal(\n            this,\n            desiredProgramChanges,\n            desiredControllerChanges,\n            desiredChannelsToClear,\n            desiredChannelsToTranspose\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Modifies the sequence *in-place* according to the locked presets and controllers in the given snapshot.\n     * @param snapshot the snapshot to apply.\n     */\n    public applySnapshot(snapshot: SynthesizerSnapshot) {\n        applySnapshotInternal(this, snapshot);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets the MIDI's decoded name.\n     * @param encoding The encoding to use if the MIDI uses an extended code page.\n     * @remarks\n     * Do not call in audioWorkletGlobalScope as it uses TextDecoder.\n     * RMIDI encoding overrides the provided encoding.\n     */\n    public getName(encoding = \"Shift_JIS\") {\n        let rawName = \"\";\n        const n = this.getRMIDInfo(\"name\");\n        if (n) {\n            return n.trim();\n        }\n        if (this.binaryName) {\n            encoding = this.getRMIDInfo(\"midiEncoding\") ?? encoding;\n            try {\n                const decoder = new TextDecoder(encoding);\n                // Trim since \"                                                                \"\n                // Is not a valid name\n                // MIDI file with that name: th07_10.mid\n                rawName = decoder.decode(this.binaryName).trim();\n            } catch (e) {\n                SpessaSynthWarn(`Failed to decode MIDI name: ${e as string}`);\n            }\n        }\n        return rawName || this.fileName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets the decoded extra metadata as text and removes any unneeded characters (such as \"@T\" for karaoke files)\n     * @param encoding The encoding to use if the MIDI uses an extended code page.\n     * @remarks\n     * Do not call in audioWorkletGlobalScope as it uses TextDecoder.\n     * RMIDI encoding overrides the provided encoding.\n     */\n    public getExtraMetadata(encoding = \"Shift_JIS\") {\n        encoding = this.infoEncoding ?? encoding;\n        const decoder = new TextDecoder(encoding);\n        return this.extraMetadata.map((d) => {\n            const decoded = decoder.decode(d.data);\n            return decoded.replace(/@T|@A/g, \"\").trim();\n        });\n    }\n\n    /**\n     * Sets a given RMIDI info value.\n     * @param infoType The type to set.\n     * @param infoData The value to set it to.\n     * @remarks\n     * This sets the Info encoding to utf-8.\n     */\n    public setRMIDInfo<K extends keyof RMIDInfoData>(\n        infoType: K,\n        infoData: RMIDInfoData[K]\n    ) {\n        this.rmidiInfo.infoEncoding = getStringBytes(\"utf-8\", true);\n        if (infoType === \"picture\") {\n            // TS2339: Property buffer does not exist on type string | ArrayBuffer | Date\n            // Property buffer does not exist on type string\n            this.rmidiInfo.picture = new Uint8Array(infoData as ArrayBuffer);\n        } else if (infoType === \"creationDate\") {\n            this.rmidiInfo.creationDate = getStringBytes(\n                (infoData as Date).toISOString(),\n                true\n            );\n        } else {\n            const encoded = new TextEncoder().encode(infoData as string);\n            // Add zero byte\n            this.rmidiInfo[infoType] = new Uint8Array([...encoded, 0]);\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets a given chunk from the RMIDI information, undefined if it does not exist.\n     * @param infoType The metadata type.\n     * @returns String, Date, ArrayBuffer or undefined.\n     */\n    public getRMIDInfo<K extends keyof RMIDInfoData>(\n        infoType: K\n    ): RMIDInfoData[K] | undefined {\n        if (!this.rmidiInfo[infoType]) {\n            return undefined;\n        }\n        const encoding = this.infoEncoding ?? \"UTF-8\";\n\n        if (infoType === \"picture\") {\n            return this.rmidiInfo[infoType].buffer as RMIDInfoData[K];\n        } else if (infoType === \"creationDate\") {\n            return parseDateString(\n                readBinaryString(this.rmidiInfo[infoType])\n            ) as RMIDInfoData[K];\n        }\n\n        try {\n            const decoder = new TextDecoder(encoding);\n            let infoBuffer = this.rmidiInfo[infoType];\n            if (infoBuffer[infoBuffer.length - 1] === 0) {\n                // Do not decode the terminal byte\n                infoBuffer = infoBuffer?.slice(0, infoBuffer.length - 1);\n            }\n            return decoder.decode(infoBuffer.buffer).trim() as RMIDInfoData[K];\n        } catch (e) {\n            SpessaSynthWarn(\n                `Failed to decode ${infoType} name: ${e as string}`\n            );\n            return undefined;\n        }\n    }\n\n    /**\n     * Iterates over the MIDI file, ordered by the time the events happen.\n     * @param callback The callback function to process each event.\n     */\n    public iterate(\n        callback: (\n            event: MIDIMessage,\n            trackNumber: number,\n            eventIndexes: number[]\n        ) => unknown\n    ) {\n        /**\n         * Indexes for tracks\n         */\n        const eventIndexes: number[] = Array<number>(this.tracks.length).fill(\n            0\n        );\n        let remainingTracks = this.tracks.length;\n        const findFirstEventIndex = () => {\n            let index = 0;\n            let ticks = Infinity;\n            this.tracks.forEach(({ events: track }, i) => {\n                if (eventIndexes[i] >= track.length) {\n                    return;\n                }\n                if (track[eventIndexes[i]].ticks < ticks) {\n                    index = i;\n                    ticks = track[eventIndexes[i]].ticks;\n                }\n            });\n            return index;\n        };\n        while (remainingTracks > 0) {\n            const trackNum = findFirstEventIndex();\n            const track = this.tracks[trackNum].events;\n            if (eventIndexes[trackNum] >= track.length) {\n                remainingTracks--;\n                continue;\n            }\n            const event: MIDIMessage = track[eventIndexes[trackNum]];\n            callback(event, trackNum, eventIndexes);\n            eventIndexes[trackNum]++;\n        }\n    }\n\n    /**\n     * INTERNAL USE ONLY!\n     */\n    protected copyMetadataFrom(mid: BasicMIDI) {\n        // Properties can be assigned\n        this.fileName = mid.fileName;\n        this.timeDivision = mid.timeDivision;\n        this.duration = mid.duration;\n        this.firstNoteOn = mid.firstNoteOn;\n        this.lastVoiceEventTick = mid.lastVoiceEventTick;\n        this.format = mid.format;\n        this.bankOffset = mid.bankOffset;\n        this.isKaraokeFile = mid.isKaraokeFile;\n        this.isMultiPort = mid.isMultiPort;\n        this.isDLSRMIDI = mid.isDLSRMIDI;\n        this.isDLSRMIDI = mid.isDLSRMIDI;\n\n        // Copying arrays\n        this.tempoChanges = [...mid.tempoChanges];\n        this.extraMetadata = mid.extraMetadata.map(\n            (m) =>\n                new MIDIMessage(\n                    m.ticks,\n                    m.statusByte,\n                    new IndexedByteArray(m.data)\n                )\n        );\n        this.lyrics = mid.lyrics.map(\n            (arr) =>\n                new MIDIMessage(\n                    arr.ticks,\n                    arr.statusByte,\n                    new IndexedByteArray(arr.data)\n                )\n        );\n        this.portChannelOffsetMap = [...mid.portChannelOffsetMap];\n        this.binaryName = mid?.binaryName?.slice();\n\n        // Copying objects\n        this.loop = { ...mid.loop };\n        this.keyRange = { ...mid.keyRange };\n        this.rmidiInfo = {};\n        Object.entries(mid.rmidiInfo).forEach((v) => {\n            const key = v[0];\n            const value = v[1];\n            this.rmidiInfo[key as keyof RMIDInfoData] = value.slice();\n        });\n    }\n\n    /**\n     * Parses internal MIDI values\n     */\n    protected parseInternal() {\n        SpessaSynthGroup(\"%cInterpreting MIDI events...\", consoleColors.info);\n        /**\n         * For karaoke files, text events starting with @T are considered titles,\n         * usually the first one is the title, and the latter is things such as \"sequenced by\" etc.\n         */\n        let karaokeHasTitle = false;\n\n        this.keyRange = { max: 0, min: 127 };\n\n        this.extraMetadata = [];\n\n        let nameDetected = false;\n        if (typeof this.rmidiInfo.name !== \"undefined\") {\n            // Name is already provided in RMIDInfo\n            nameDetected = true;\n        }\n\n        // Loop tracking\n        let loopStart = null;\n        let loopEnd = null;\n\n        for (const track of this.tracks) {\n            const usedChannels = new Set<number>();\n            let trackHasVoiceMessages = false;\n\n            for (let i = 0; i < track.events.length; i++) {\n                const e = track.events[i];\n                // Check if it's a voice message\n                if (e.statusByte >= 0x80 && e.statusByte < 0xf0) {\n                    trackHasVoiceMessages = true;\n                    // Last voice event tick\n                    if (e.ticks > this.lastVoiceEventTick) {\n                        this.lastVoiceEventTick = e.ticks;\n                    }\n\n                    // Interpret the voice message\n                    switch (e.statusByte & 0xf0) {\n                        // Cc change: loop points\n                        case midiMessageTypes.controllerChange:\n                            switch (e.data[0]) {\n                                case 2:\n                                case 116:\n                                    loopStart = e.ticks;\n                                    break;\n\n                                case 4:\n                                case 117:\n                                    if (loopEnd === null) {\n                                        loopEnd = e.ticks;\n                                    } else {\n                                        // This controller has occurred more than once;\n                                        // This means\n                                        // That it doesn't indicate the loop\n                                        loopEnd = 0;\n                                    }\n                                    break;\n\n                                case 0:\n                                    // Check RMID\n                                    if (\n                                        this.isDLSRMIDI &&\n                                        e.data[1] !== 0 &&\n                                        e.data[1] !== 127\n                                    ) {\n                                        SpessaSynthInfo(\n                                            \"%cDLS RMIDI with offset 1 detected!\",\n                                            consoleColors.recognized\n                                        );\n                                        this.bankOffset = 1;\n                                    }\n                            }\n                            break;\n\n                        // Note on: used notes tracking and key range\n                        case midiMessageTypes.noteOn: {\n                            usedChannels.add(e.statusByte & 0x0f);\n                            const note = e.data[0];\n                            this.keyRange.min = Math.min(\n                                this.keyRange.min,\n                                note\n                            );\n                            this.keyRange.max = Math.max(\n                                this.keyRange.max,\n                                note\n                            );\n                            break;\n                        }\n                    }\n                }\n                const eventText = readBinaryString(e.data);\n                // Interpret the message\n                switch (e.statusByte) {\n                    case midiMessageTypes.endOfTrack:\n                        if (i !== track.events.length - 1) {\n                            track.deleteEvent(i);\n                            i--;\n                            SpessaSynthWarn(\"Unexpected EndOfTrack. Removing!\");\n                        }\n                        break;\n\n                    case midiMessageTypes.setTempo:\n                        // Add the tempo change\n                        this.tempoChanges.push({\n                            ticks: e.ticks,\n                            tempo: 60000000 / readBigEndian(e.data, 3)\n                        });\n                        break;\n\n                    case midiMessageTypes.marker:\n                        // Check for loop markers\n                        {\n                            const text = eventText.trim().toLowerCase();\n                            switch (text) {\n                                default:\n                                    break;\n\n                                case \"start\":\n                                case \"loopstart\":\n                                    loopStart = e.ticks;\n                                    break;\n\n                                case \"loopend\":\n                                    loopEnd = e.ticks;\n                            }\n                        }\n                        break;\n\n                    case midiMessageTypes.copyright:\n                        this.extraMetadata.push(e);\n\n                        break;\n                    // Fallthrough\n\n                    case midiMessageTypes.lyric:\n                        // Note here: .kar files sometimes just use...\n                        // Lyrics instead of text because why not (of course)\n                        // Perform the same check for @KMIDI KARAOKE FILE\n                        if (\n                            eventText.trim().startsWith(\"@KMIDI KARAOKE FILE\")\n                        ) {\n                            this.isKaraokeFile = true;\n                            SpessaSynthInfo(\n                                \"%cKaraoke MIDI detected!\",\n                                consoleColors.recognized\n                            );\n                        }\n\n                        if (this.isKaraokeFile) {\n                            // Replace the type of the message with text\n                            e.statusByte = midiMessageTypes.text;\n                        } else {\n                            // Add lyrics like a regular midi file\n                            this.lyrics.push(e);\n                        }\n\n                    // Kar: treat the same as text\n                    // Fallthrough\n                    case midiMessageTypes.text: {\n                        // Possibly Soft Karaoke MIDI file\n                        // It has a text event at the start of the file\n                        // \"@KMIDI KARAOKE FILE\"\n                        const checkedText = eventText.trim();\n                        if (checkedText.startsWith(\"@KMIDI KARAOKE FILE\")) {\n                            this.isKaraokeFile = true;\n\n                            SpessaSynthInfo(\n                                \"%cKaraoke MIDI detected!\",\n                                consoleColors.recognized\n                            );\n                        } else if (this.isKaraokeFile) {\n                            // Check for @T (title)\n                            // Or @A because it is a title too sometimes?\n                            // IDK it's strange\n                            if (\n                                checkedText.startsWith(\"@T\") ||\n                                checkedText.startsWith(\"@A\")\n                            ) {\n                                if (!karaokeHasTitle) {\n                                    this.binaryName = e.data.slice(2);\n                                    karaokeHasTitle = true;\n                                    nameDetected = true;\n                                } else {\n                                    // Append to metadata\n                                    this.extraMetadata.push(e);\n                                }\n                            } else if (!checkedText.startsWith(\"@\")) {\n                                // Non @: the lyrics\n                                this.lyrics.push(e);\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            // Add used channels\n            track.channels = usedChannels;\n\n            // Track name\n            track.name = \"\";\n            const trackName = track.events.find(\n                (e) => e.statusByte === midiMessageTypes.trackName\n            );\n            // Don't add the first track's name as it's not metadata, it's the name!\n            if (trackName && this.tracks.indexOf(track) > 0) {\n                track.name = readBinaryString(trackName.data);\n                // If the track has no voice messages, its \"track name\" event (if it has any)\n                // Is some metadata.\n                // Add it to copyright\n                if (\n                    !trackHasVoiceMessages &&\n                    !track.name.toLowerCase().includes(\"setup\")\n                ) {\n                    this.extraMetadata.push(trackName);\n                }\n            }\n        }\n\n        // Reverse the tempo changes\n        this.tempoChanges.reverse();\n\n        SpessaSynthInfo(\n            `%cCorrecting loops, ports and detecting notes...`,\n            consoleColors.info\n        );\n\n        const firstNoteOns = [];\n        for (const t of this.tracks) {\n            const firstNoteOn = t.events.find(\n                (e) => (e.statusByte & 0xf0) === midiMessageTypes.noteOn\n            );\n            if (firstNoteOn) {\n                firstNoteOns.push(firstNoteOn.ticks);\n            }\n        }\n        this.firstNoteOn = Math.min(...firstNoteOns);\n\n        SpessaSynthInfo(\n            `%cFirst note-on detected at: %c${this.firstNoteOn}%c ticks!`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n\n        if (loopStart !== null && loopEnd === null) {\n            // Not a loop\n            loopStart = this.firstNoteOn;\n            loopEnd = this.lastVoiceEventTick;\n        } else {\n            loopStart ??= this.firstNoteOn;\n\n            if (loopEnd === null || loopEnd === 0) {\n                loopEnd = this.lastVoiceEventTick;\n            }\n        }\n\n        this.loop = { start: loopStart, end: loopEnd };\n\n        SpessaSynthInfo(\n            `%cLoop points: start: %c${this.loop.start}%c end: %c${this.loop.end}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n\n        // Determine ports\n        let portOffset = 0;\n        this.portChannelOffsetMap = [];\n        for (const track of this.tracks) {\n            track.port = -1;\n            if (track.channels.size === 0) {\n                continue;\n            }\n            for (const e of track.events) {\n                if (e.statusByte !== midiMessageTypes.midiPort) {\n                    continue;\n                }\n                const port = e.data[0];\n                track.port = port;\n                if (this.portChannelOffsetMap[port] === undefined) {\n                    this.portChannelOffsetMap[port] = portOffset;\n                    portOffset += 16;\n                }\n            }\n        }\n\n        // Fix empty port channel offsets (do a copy to turn empty slots into undefined so the map goes over them)\n        this.portChannelOffsetMap = [...this.portChannelOffsetMap].map(\n            (o) => o ?? 0\n        );\n\n        // Fix midi ports:\n        // Midi tracks without ports will have a value of -1\n        // If all ports have a value of -1, set it to 0,\n        // Otherwise take the first midi port and replace all -1 with it,\n        // Why would we do this?\n        // Some midis (for some reason) specify all channels to port 1 or else,\n        // But leave the conductor track with no port pref.\n        // This spessasynth to reserve the first 16 channels for the conductor track\n        // (which doesn't play anything) and use the additional 16 for the actual ports.\n        let defaultPort = Infinity;\n        for (const track of this.tracks) {\n            if (track.port !== -1) {\n                if (defaultPort > track.port) {\n                    defaultPort = track.port;\n                }\n            }\n        }\n        if (defaultPort === Infinity) {\n            defaultPort = 0;\n        }\n        for (const track of this.tracks) {\n            if (track.port === -1 || track.port === undefined) {\n                track.port = defaultPort;\n            }\n        }\n        // Add fake port if empty\n        if (this.portChannelOffsetMap.length === 0) {\n            this.portChannelOffsetMap = [0];\n        }\n        if (this.portChannelOffsetMap.length < 2) {\n            SpessaSynthInfo(\n                `%cNo additional MIDI Ports detected.`,\n                consoleColors.info\n            );\n        } else {\n            this.isMultiPort = true;\n            SpessaSynthInfo(`%cMIDI Ports detected!`, consoleColors.recognized);\n        }\n\n        // Midi name\n        if (!nameDetected) {\n            if (this.tracks.length > 1) {\n                // If more than 1 track and the first track has no notes,\n                // Just find the first trackName in the first track.\n                if (\n                    this.tracks[0].events.find(\n                        (message) =>\n                            message.statusByte >= midiMessageTypes.noteOn &&\n                            message.statusByte < midiMessageTypes.polyPressure\n                    ) === undefined\n                ) {\n                    const name = this.tracks[0].events.find(\n                        (message) =>\n                            message.statusByte === midiMessageTypes.trackName\n                    );\n                    if (name) {\n                        this.binaryName = name.data;\n                    }\n                }\n            } else {\n                // If only 1 track, find the first \"track name\" event\n                const name = this.tracks[0].events.find(\n                    (message) =>\n                        message.statusByte === midiMessageTypes.trackName\n                );\n                if (name) {\n                    this.binaryName = name.data;\n                }\n            }\n        }\n        // Remove empty strings\n        this.extraMetadata = this.extraMetadata.filter(\n            (c) => c.data.length > 0\n        );\n\n        // Sort lyrics (https://github.com/spessasus/spessasynth_core/issues/10)\n        this.lyrics.sort((a, b) => a.ticks - b.ticks);\n\n        // If the first event is not at 0 ticks, add a track name\n        // https://github.com/spessasus/SpessaSynth/issues/145\n        if (!this.tracks.some((t) => t.events[0].ticks === 0)) {\n            const track = this.tracks[0];\n            // Can copy\n            let b = this?.binaryName?.buffer as ArrayBuffer;\n            if (!b) {\n                b = new Uint8Array(0).buffer;\n            }\n            track.events.unshift(\n                new MIDIMessage(\n                    0,\n                    midiMessageTypes.trackName,\n                    new IndexedByteArray(b)\n                )\n            );\n        }\n        this.duration = this.midiTicksToSeconds(this.lastVoiceEventTick);\n        if (this.duration === 0) {\n            throw new Error(\"The MIDI file no duration.\");\n        }\n\n        // Invalidate raw name if empty\n        if (this.binaryName && this.binaryName.length < 1) {\n            this.binaryName = undefined;\n        }\n\n        SpessaSynthInfo(\n            `%cMIDI file parsed. Total tick time: %c${this.lastVoiceEventTick}%c, total seconds time: %c${formatTime(Math.ceil(this.duration)).time}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        SpessaSynthGroupEnd();\n    }\n}\n", "import { BasicMIDI } from \"../basic_midi\";\nimport { MIDIMessage } from \"../midi_message\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { type MIDIMessageType, midiMessageTypes } from \"../enums\";\nimport { MIDITrack } from \"../midi_track\";\nimport type { MIDIFormat } from \"../types\";\nimport { fillWithDefaults } from \"../../utils/fill_with_defaults\";\n\ninterface MIDIBuilderOptions {\n    /**\n     * The MIDI file's tick precision (how many ticks fit in a quarter note).\n     */\n    timeDivision: number;\n    /**\n     * The MIDI file's initial tempo in BPM.\n     */\n    initialTempo: number;\n\n    /**\n     * The MIDI file's MIDI track format.\n     */\n    format: MIDIFormat;\n\n    /**\n     * The MIDI file's name. Will be appended to the conductor track.\n     */\n    name: string;\n}\n\nconst DEFAULT_MIDI_BUILDER_OPTIONS: MIDIBuilderOptions = {\n    name: \"Untitled song\",\n    timeDivision: 480,\n    initialTempo: 120,\n    format: 0\n};\n\n/**\n * A class that helps to build a MIDI file from scratch.\n */\nexport class MIDIBuilder extends BasicMIDI {\n    private encoder = new TextEncoder();\n\n    /**\n     * Creates a new MIDI file.\n     * @param options The options for writing the file.\n     */\n    public constructor(\n        options: Partial<MIDIBuilderOptions> = DEFAULT_MIDI_BUILDER_OPTIONS\n    ) {\n        super();\n        this.setRMIDInfo(\"midiEncoding\", \"utf-8\");\n        const fullOptions = fillWithDefaults(\n            options,\n            DEFAULT_MIDI_BUILDER_OPTIONS\n        );\n        if (fullOptions.format === 2) {\n            throw new Error(\n                \"MIDI format 2 is not supported in the MIDI builder. Consider using format 1.\"\n            );\n        }\n        this.format = fullOptions.format;\n        this.timeDivision = fullOptions.timeDivision;\n        this.binaryName = this.encoder.encode(fullOptions.name);\n\n        // Create the first (conductor) track with the file name\n        this.addNewTrack(fullOptions.name);\n        this.addSetTempo(0, fullOptions.initialTempo);\n    }\n\n    /**\n     * Adds a new Set Tempo event.\n     * @param ticks the tick number of the event.\n     * @param tempo the tempo in beats per minute (BPM).\n     */\n    public addSetTempo(ticks: number, tempo: number) {\n        const array = new IndexedByteArray(3);\n\n        tempo = 60000000 / tempo;\n\n        // Extract each byte in big-endian order\n        array[0] = (tempo >> 16) & 0xff;\n        array[1] = (tempo >> 8) & 0xff;\n        array[2] = tempo & 0xff;\n\n        this.addEvent(ticks, 0, midiMessageTypes.setTempo, array);\n    }\n\n    /**\n     * Adds a new MIDI track.\n     * @param name the new track's name.\n     * @param port the new track's port.\n     */\n    public addNewTrack(name: string, port = 0) {\n        if (this.format === 0 && this.tracks.length > 0) {\n            throw new Error(\n                \"Can't add more tracks to MIDI format 0. Consider using format 1.\"\n            );\n        }\n        const track = new MIDITrack();\n        track.name = name;\n        track.port = port;\n        this.tracks.push(track);\n        this.addEvent(\n            0,\n            this.tracks.length - 1,\n            midiMessageTypes.trackName,\n            this.encoder.encode(name)\n        );\n        this.addEvent(0, this.tracks.length - 1, midiMessageTypes.midiPort, [\n            port\n        ]);\n    }\n\n    /**\n     * Adds a new MIDI Event.\n     * @param ticks the tick time of the event (absolute).\n     * @param track the track number to use.\n     * @param event the MIDI event number.\n     * @param eventData {Uint8Array|Iterable<number>} the raw event data.\n     */\n    public addEvent(\n        ticks: number,\n        track: number,\n        event: MIDIMessageType,\n        eventData: Uint8Array | Iterable<number>\n    ) {\n        if (!this.tracks[track]) {\n            throw new Error(\n                `Track ${track} does not exist. Add it via addTrack method.`\n            );\n        }\n        if (event < midiMessageTypes.noteOff) {\n            // Meta event\n            if (track > 0) {\n                throw new Error(\n                    `Meta events must be added to the first track, not track ${track}.`\n                );\n            }\n        } else {\n            // Voice event\n            if (this.format === 1 && track === 0) {\n                throw new Error(\n                    \"Can't add voice messages to the conductor track (0) in format 1. Consider using format 0 using a different track.\"\n                );\n            }\n        }\n        this.tracks[track].pushEvent(\n            new MIDIMessage(ticks, event, new IndexedByteArray(eventData))\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Adds a new Note On event.\n     * @param ticks the tick time of the event.\n     * @param track the track number to use.\n     * @param channel the channel to use.\n     * @param midiNote the midi note of the keypress.\n     * @param velocity the velocity of the keypress.\n     */\n    public addNoteOn(\n        ticks: number,\n        track: number,\n        channel: number,\n        midiNote: number,\n        velocity: number\n    ) {\n        channel %= 16;\n        midiNote %= 128;\n        velocity %= 128;\n        this.addEvent(\n            ticks,\n            track,\n            (midiMessageTypes.noteOn | channel) as MIDIMessageType,\n            [midiNote, velocity]\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Adds a new Note Off event.\n     * @param ticks the tick time of the event.\n     * @param track the track number to use.\n     * @param channel the channel to use.\n     * @param midiNote the midi note of the key release.\n     * @param velocity optional and unsupported by spessasynth.\n     */\n    public addNoteOff(\n        ticks: number,\n        track: number,\n        channel: number,\n        midiNote: number,\n        velocity = 64\n    ) {\n        channel %= 16;\n        midiNote %= 128;\n        this.addEvent(\n            ticks,\n            track,\n            (midiMessageTypes.noteOff | channel) as MIDIMessageType,\n            [midiNote, velocity]\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Adds a new Program Change event.\n     * @param ticks the tick time of the event.\n     * @param track the track number to use.\n     * @param channel the channel to use.\n     * @param programNumber the MIDI program to use.\n     */\n    public addProgramChange(\n        ticks: number,\n        track: number,\n        channel: number,\n        programNumber: number\n    ) {\n        channel %= 16;\n        programNumber %= 128;\n        this.addEvent(\n            ticks,\n            track,\n            (midiMessageTypes.programChange | channel) as MIDIMessageType,\n            [programNumber]\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Adds a new Controller Change event.\n     * @param ticks the tick time of the event.\n     * @param track the track number to use.\n     * @param channel the channel to use.\n     * @param controllerNumber the MIDI CC to use.\n     * @param controllerValue the new CC value.\n     */\n    public addControllerChange(\n        ticks: number,\n        track: number,\n        channel: number,\n        controllerNumber: number,\n        controllerValue: number\n    ) {\n        channel %= 16;\n        controllerNumber %= 128;\n        controllerValue %= 128;\n        this.addEvent(\n            ticks,\n            track,\n            (midiMessageTypes.controllerChange | channel) as MIDIMessageType,\n            [controllerNumber, controllerValue]\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Adds a new Pitch Wheel event.\n     * @param ticks the tick time of the event.\n     * @param track the track to use.\n     * @param channel the channel to use.\n     * @param MSB SECOND byte of the MIDI pitchWheel message.\n     * @param LSB FIRST byte of the MIDI pitchWheel message.\n     */\n    public addPitchWheel(\n        ticks: number,\n        track: number,\n        channel: number,\n        MSB: number,\n        LSB: number\n    ) {\n        channel %= 16;\n        MSB %= 128;\n        LSB %= 128;\n        this.addEvent(\n            ticks,\n            track,\n            (midiMessageTypes.pitchWheel | channel) as MIDIMessageType,\n            [LSB, MSB]\n        );\n    }\n}\n", "import { getEvent, MIDIMessage } from \"../midi/midi_message\";\nimport { consoleColors } from \"../utils/other\";\nimport { SpessaSynthInfo } from \"../utils/loggin\";\nimport { readBigEndian } from \"../utils/byte_functions/big_endian\";\nimport type { SpessaSynthSequencer } from \"./sequencer\";\nimport { type MIDIController, midiMessageTypes } from \"../midi/enums\";\n\n/**\n * Processes a MIDI event.\n * @param event The MIDI event to process.\n * @param trackIndex The index of the track the event belongs to.\n */\nexport function processEventInternal(\n    this: SpessaSynthSequencer,\n    event: MIDIMessage,\n    trackIndex: number\n) {\n    if (this.externalMIDIPlayback) {\n        // Do not send meta events\n        if (event.statusByte >= 0x80) {\n            this.sendMIDIMessage([event.statusByte, ...event.data]);\n            return;\n        }\n    }\n    const track = this._midiData!.tracks[trackIndex];\n    const statusByteData = getEvent(event.statusByte);\n    const offset =\n        this.midiPortChannelOffsets[this.currentMIDIPorts[trackIndex]] || 0;\n    statusByteData.channel += offset;\n    // Process the event\n    switch (statusByteData.status) {\n        case midiMessageTypes.noteOn: {\n            const velocity = event.data[1];\n            if (velocity > 0) {\n                this.synth.noteOn(\n                    statusByteData.channel,\n                    event.data[0],\n                    velocity\n                );\n                this.playingNotes.push({\n                    midiNote: event.data[0],\n                    channel: statusByteData.channel,\n                    velocity: velocity\n                });\n            } else {\n                this.synth.noteOff(statusByteData.channel, event.data[0]);\n                const toDelete = this.playingNotes.findIndex(\n                    (n) =>\n                        n.midiNote === event.data[0] &&\n                        n.channel === statusByteData.channel\n                );\n                if (toDelete !== -1) {\n                    this.playingNotes.splice(toDelete, 1);\n                }\n            }\n            break;\n        }\n\n        case midiMessageTypes.noteOff: {\n            this.synth.noteOff(statusByteData.channel, event.data[0]);\n            const toDelete = this.playingNotes.findIndex(\n                (n) =>\n                    n.midiNote === event.data[0] &&\n                    n.channel === statusByteData.channel\n            );\n            if (toDelete !== -1) {\n                this.playingNotes.splice(toDelete, 1);\n            }\n            break;\n        }\n\n        case midiMessageTypes.pitchWheel:\n            this.synth.pitchWheel(\n                statusByteData.channel,\n                (event.data[1] << 7) | event.data[0]\n            );\n            break;\n\n        case midiMessageTypes.controllerChange:\n            // Empty tracks cannot cc change\n            if (this._midiData!.isMultiPort && track.channels.size === 0) {\n                return;\n            }\n            this.synth.controllerChange(\n                statusByteData.channel,\n                event.data[0] as MIDIController,\n                event.data[1]\n            );\n            break;\n\n        case midiMessageTypes.programChange:\n            // Empty tracks cannot program change\n            if (this._midiData!.isMultiPort && track.channels.size === 0) {\n                return;\n            }\n            this.synth.programChange(statusByteData.channel, event.data[0]);\n            break;\n\n        case midiMessageTypes.polyPressure:\n            this.synth.polyPressure(\n                statusByteData.channel,\n                event.data[0],\n                event.data[1]\n            );\n            break;\n\n        case midiMessageTypes.channelPressure:\n            this.synth.channelPressure(statusByteData.channel, event.data[0]);\n            break;\n\n        case midiMessageTypes.systemExclusive:\n            this.synth.systemExclusive(event.data, offset);\n            break;\n\n        case midiMessageTypes.setTempo: {\n            let tempoBPM = 60000000 / readBigEndian(event.data, 3);\n            this.oneTickToSeconds =\n                60 / (tempoBPM * this._midiData!.timeDivision);\n            if (this.oneTickToSeconds === 0) {\n                this.oneTickToSeconds =\n                    60 / (120 * this._midiData!.timeDivision);\n                SpessaSynthInfo(\"invalid tempo! falling back to 120 BPM\");\n                tempoBPM = 120;\n            }\n            break;\n        }\n\n        // Recognized but ignored\n        case midiMessageTypes.timeSignature:\n        case midiMessageTypes.endOfTrack:\n        case midiMessageTypes.midiChannelPrefix:\n        case midiMessageTypes.songPosition:\n        case midiMessageTypes.activeSensing:\n        case midiMessageTypes.keySignature:\n        case midiMessageTypes.sequenceNumber:\n        case midiMessageTypes.sequenceSpecific:\n        case midiMessageTypes.text:\n        case midiMessageTypes.lyric:\n        case midiMessageTypes.copyright:\n        case midiMessageTypes.trackName:\n        case midiMessageTypes.marker:\n        case midiMessageTypes.cuePoint:\n        case midiMessageTypes.instrumentName:\n        case midiMessageTypes.programName:\n            break;\n\n        case midiMessageTypes.midiPort:\n            this.assignMIDIPort(trackIndex, event.data[0]);\n            break;\n\n        case midiMessageTypes.reset:\n            this.synth.stopAllChannels();\n            this.synth.resetAllControllers();\n            break;\n\n        default:\n            SpessaSynthInfo(\n                `%cUnrecognized Event: %c${event.statusByte}%c status byte: %c${Object.keys(\n                    midiMessageTypes\n                ).find(\n                    (k) =>\n                        midiMessageTypes[k as keyof typeof midiMessageTypes] ===\n                        statusByteData.status\n                )}`,\n                consoleColors.warn,\n                consoleColors.unrecognized,\n                consoleColors.warn,\n                consoleColors.value\n            );\n            break;\n    }\n    if (statusByteData.status >= 0 && statusByteData.status < 0x80) {\n        this.callEvent(\"metaEvent\", {\n            event,\n            trackIndex\n        });\n    }\n}\n", "import type { SpessaSynthSequencer } from \"./sequencer\";\n\n/**\n * Processes a single MIDI tick.\n * Call this every rendering quantum to process the sequencer events in real-time.\n */\nexport function processTick(this: SpessaSynthSequencer) {\n    if (this.paused || !this._midiData) {\n        return;\n    }\n    const currentTime = this.currentTime;\n    while (this.playedTime < currentTime) {\n        // Find the next event and process it\n        const trackIndex = this.findFirstEventIndex();\n        const track = this._midiData.tracks[trackIndex];\n        const event = track.events[this.eventIndexes[trackIndex]++];\n        this.processEvent(event, trackIndex);\n\n        // Find the next event\n        const nextTrackIndex = this.findFirstEventIndex();\n        const nextTrack = this._midiData.tracks[nextTrackIndex];\n        // Check for loop\n        if (this.loopCount > 0 && this._midiData.loop.end <= event.ticks) {\n            if (this.loopCount !== Infinity) {\n                this.loopCount--;\n                this.callEvent(\"loopCountChange\", {\n                    newCount: this.loopCount\n                });\n            }\n            this.setTimeTicks(this._midiData.loop.start);\n            return;\n        }\n        // Check for end of track\n        if (nextTrack.events.length <= this.eventIndexes[nextTrackIndex]) {\n            // Stop the playback\n            this.songIsFinished();\n            return;\n        }\n\n        const eventNext = nextTrack.events[this.eventIndexes[nextTrackIndex]];\n        this.playedTime +=\n            this.oneTickToSeconds * (eventNext.ticks - event.ticks);\n    }\n}\n", "import { consoleColors, formatTime } from \"../utils/other\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo, SpessaSynthWarn } from \"../utils/loggin\";\nimport { BasicMIDI } from \"../midi/basic_midi\";\nimport type { SpessaSynthSequencer } from \"./sequencer\";\n\n/**\n * Assigns a MIDI port channel offset to a track.\n * @param trackNum The track number to assign the port to.\n * @param port The MIDI port number to assign.\n */\nexport function assignMIDIPortInternal(\n    this: SpessaSynthSequencer,\n    trackNum: number,\n    port: number\n) {\n    // Do not assign ports to empty tracks\n    if (this._midiData!.tracks[trackNum].channels.size === 0) {\n        return;\n    }\n\n    // Assign new 16 channels if the port is not occupied yet\n    if (this.midiPortChannelOffset === 0) {\n        this.midiPortChannelOffset += 16;\n        this.midiPortChannelOffsets[port] = 0;\n    }\n\n    if (this.midiPortChannelOffsets[port] === undefined) {\n        if (this.synth.midiChannels.length < this.midiPortChannelOffset + 15) {\n            this.addNewMIDIPort();\n        }\n        this.midiPortChannelOffsets[port] = this.midiPortChannelOffset;\n        this.midiPortChannelOffset += 16;\n    }\n\n    this.currentMIDIPorts[trackNum] = port;\n}\n\n/**\n * Loads a new sequence internally.\n * @param parsedMidi The parsed MIDI data to load.\n */\nexport function loadNewSequenceInternal(\n    this: SpessaSynthSequencer,\n    parsedMidi: BasicMIDI\n) {\n    if (!parsedMidi.tracks) {\n        throw new Error(\"This MIDI has no tracks!\");\n    }\n\n    this.oneTickToSeconds = 60 / (120 * parsedMidi.timeDivision);\n    this._midiData = parsedMidi;\n\n    // Clear old embedded bank if exists\n    this.synth.clearEmbeddedBank();\n\n    // Check for embedded soundfont\n    if (this._midiData.embeddedSoundBank !== undefined) {\n        SpessaSynthInfo(\n            \"%cEmbedded soundbank detected! Using it.\",\n            consoleColors.recognized\n        );\n        this.synth.setEmbeddedSoundBank(\n            this._midiData.embeddedSoundBank,\n            this._midiData.bankOffset\n        );\n    }\n\n    SpessaSynthGroupCollapsed(\"%cPreloading samples...\", consoleColors.info);\n    // Smart preloading: load only samples used in the midi!\n    const used = this._midiData.getUsedProgramsAndKeys(\n        this.synth.soundBankManager\n    );\n    used.forEach((combos, preset) => {\n        SpessaSynthInfo(\n            `%cPreloading used samples on %c${preset.name}%c...`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        for (const combo of combos) {\n            const [midiNote, velocity] = combo.split(\"-\").map(Number);\n            this.synth.getVoicesForPreset(preset, midiNote, velocity, midiNote);\n        }\n    });\n    SpessaSynthGroupEnd();\n\n    // Copy over the port data\n    this.currentMIDIPorts = this._midiData.tracks.map((t) => t.port);\n\n    // Clear last port data\n    this.midiPortChannelOffset = 0;\n    this.midiPortChannelOffsets = {};\n    // Assign port offsets\n    this._midiData.tracks.forEach((track, trackIndex) => {\n        this.assignMIDIPort(trackIndex, track.port);\n    });\n    this.firstNoteTime = this._midiData.midiTicksToSeconds(\n        this._midiData.firstNoteOn\n    );\n    SpessaSynthInfo(\n        `%cTotal song time: ${formatTime(Math.ceil(this._midiData.duration)).time}`,\n        consoleColors.recognized\n    );\n    this.callEvent(\"songChange\", { songIndex: this._songIndex });\n\n    if (this._midiData.duration <= 0.2) {\n        SpessaSynthWarn(\n            `%cVery short song: (${formatTime(Math.round(this._midiData.duration)).time}). Disabling loop!`,\n            consoleColors.warn\n        );\n        this.loopCount = 0;\n    }\n    // Reset the time\n    this.currentTime = 0;\n}\n", "/**\n * All SoundFont2 Generator enumerations.\n */\nexport const generatorTypes = {\n    INVALID: -1, // Invalid generator\n    startAddrsOffset: 0, // Sample control - moves sample start point\n    endAddrOffset: 1, // Sample control - moves sample end point\n    startloopAddrsOffset: 2, // Loop control - moves loop start point\n    endloopAddrsOffset: 3, // Loop control - moves loop end point\n    startAddrsCoarseOffset: 4, // Sample control - moves sample start point in 32,768 increments\n    modLfoToPitch: 5, // Pitch modulation - modulation lfo pitch modulation in cents\n    vibLfoToPitch: 6, // Pitch modulation - vibrato lfo pitch modulation in cents\n    modEnvToPitch: 7, // Pitch modulation - modulation envelope pitch modulation in cents\n    initialFilterFc: 8, // Filter - lowpass filter cutoff in cents\n    initialFilterQ: 9, // Filter - lowpass filter resonance\n    modLfoToFilterFc: 10, // Filter modulation - modulation lfo lowpass filter cutoff in cents\n    modEnvToFilterFc: 11, // Filter modulation - modulation envelope lowpass filter cutoff in cents\n    endAddrsCoarseOffset: 12, // Ample control - move sample end point in 32,768 increments\n    modLfoToVolume: 13, // Modulation lfo - volume (tremolo), where 100 = 10dB\n    unused1: 14, // Unused\n    chorusEffectsSend: 15, // Effect send - how much is sent to chorus 0 - 1000\n    reverbEffectsSend: 16, // Effect send - how much is sent to reverb 0 - 1000\n    pan: 17, // Panning - where -500 = left, 0 = center, 500 = right\n    unused2: 18, // Unused\n    unused3: 19, // Unused\n    unused4: 20, // Unused\n    delayModLFO: 21, // Mod lfo - delay for mod lfo to start from zero\n    freqModLFO: 22, // Mod lfo - frequency of mod lfo, 0 = 8.176 Hz, units: f => 1200log2(f/8.176)\n    delayVibLFO: 23, // Vib lfo - delay for vibrato lfo to start from zero\n    freqVibLFO: 24, // Vib lfo - frequency of vibrato lfo, 0 = 8.176Hz, unit: f => 1200log2(f/8.176)\n    delayModEnv: 25, // Mod env - 0 = 1 s decay till mod env starts\n    attackModEnv: 26, // Mod env - attack of mod env\n    holdModEnv: 27, // Mod env - hold of mod env\n    decayModEnv: 28, // Mod env - decay of mod env\n    sustainModEnv: 29, // Mod env - sustain of mod env\n    releaseModEnv: 30, // Mod env - release of mod env\n    keyNumToModEnvHold: 31, // Mod env - also modulating mod envelope hold with key number\n    keyNumToModEnvDecay: 32, // Mod env - also modulating mod envelope decay with key number\n    delayVolEnv: 33, // Vol env - delay of envelope from zero (weird scale)\n    attackVolEnv: 34, // Vol env - attack of envelope\n    holdVolEnv: 35, // Vol env - hold of envelope\n    decayVolEnv: 36, // Vol env - decay of envelope\n    sustainVolEnv: 37, // Vol env - sustain of envelope\n    releaseVolEnv: 38, // Vol env - release of envelope\n    keyNumToVolEnvHold: 39, // Vol env - key number to volume envelope hold\n    keyNumToVolEnvDecay: 40, // Vol env - key number to volume envelope decay\n    instrument: 41, // Zone - instrument index to use for preset zone\n    reserved1: 42, // Reserved\n    keyRange: 43, // Zone - key range for which preset / instrument zone is active\n    velRange: 44, // Zone - velocity range for which preset / instrument zone is active\n    startloopAddrsCoarseOffset: 45, // Sample control - moves sample loop start point in 32,768 increments\n    keyNum: 46, // Zone - instrument only: always use this midi number (ignore what's pressed)\n    velocity: 47, // Zone - instrument only: always use this velocity (ignore what's pressed)\n    initialAttenuation: 48, // Zone - allows turning down the volume, 10 = -1dB\n    reserved2: 49, // Reserved\n    endloopAddrsCoarseOffset: 50, // Sample control - moves sample loop end point in 32,768 increments\n    coarseTune: 51, // Tune - pitch offset in semitones\n    fineTune: 52, // Tune - pitch offset in cents\n    sampleID: 53, // Sample - instrument zone only: which sample to use\n    sampleModes: 54, // Sample - 0 = no loop, 1 = loop, 2 = start on release, 3 = loop and play till the end in release phase\n    reserved3: 55, // Reserved\n    scaleTuning: 56, // Sample - the degree to which MIDI key number influences pitch, 100 = default\n    exclusiveClass: 57, // Sample - = cut = choke group\n    overridingRootKey: 58, // Sample - can override the sample's original pitch\n    unused5: 59, // Unused\n    endOper: 60, // End marker\n\n    // Additional generators that are used in system exclusives and will not be saved\n    vibLfoToVolume: 61,\n    vibLfoToFilterFc: 62\n} as const;\n\nexport type GeneratorType =\n    (typeof generatorTypes)[keyof typeof generatorTypes];\n\nexport const GENERATORS_AMOUNT = Object.keys(generatorTypes).length;\nexport const MAX_GENERATOR = Math.max(...Object.values(generatorTypes));\n/**\n * Min: minimum value, max: maximum value, def: default value, nrpn: nrpn scale...\n */\nconst generatorLimits: {\n    min: number;\n    max: number;\n    def: number;\n    nrpn: number;\n}[] = [];\n// Offsets\ngeneratorLimits[generatorTypes.startAddrsOffset] = {\n    min: 0,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.endAddrOffset] = {\n    min: -32768,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.startloopAddrsOffset] = {\n    min: -32768,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.endloopAddrsOffset] = {\n    min: -32768,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.startAddrsCoarseOffset] = {\n    min: 0,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\n\n// Pitch influence\ngeneratorLimits[generatorTypes.modLfoToPitch] = {\n    min: -12000,\n    max: 12000,\n    def: 0,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.vibLfoToPitch] = {\n    min: -12000,\n    max: 12000,\n    def: 0,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.modEnvToPitch] = {\n    min: -12000,\n    max: 12000,\n    def: 0,\n    nrpn: 2\n};\n\n// Lowpass\ngeneratorLimits[generatorTypes.initialFilterFc] = {\n    min: 1500,\n    max: 13500,\n    def: 13500,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.initialFilterQ] = {\n    min: 0,\n    max: 960,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.modLfoToFilterFc] = {\n    min: -12000,\n    max: 12000,\n    def: 0,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.vibLfoToFilterFc] = {\n    min: -12000,\n    max: 12000,\n    def: 0,\n    nrpn: 2\n}; // NON-STANDARD\ngeneratorLimits[generatorTypes.modEnvToFilterFc] = {\n    min: -12000,\n    max: 12000,\n    def: 0,\n    nrpn: 2\n};\n\ngeneratorLimits[generatorTypes.endAddrsCoarseOffset] = {\n    min: -32768,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\n\ngeneratorLimits[generatorTypes.modLfoToVolume] = {\n    min: -960,\n    max: 960,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.vibLfoToVolume] = {\n    min: -960,\n    max: 960,\n    def: 0,\n    nrpn: 1\n}; // NON-STANDARD\n\n// Effects, pan\ngeneratorLimits[generatorTypes.chorusEffectsSend] = {\n    min: 0,\n    max: 1000,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.reverbEffectsSend] = {\n    min: 0,\n    max: 1000,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.pan] = { min: -500, max: 500, def: 0, nrpn: 1 };\n\n// Lfo\ngeneratorLimits[generatorTypes.delayModLFO] = {\n    min: -12000,\n    max: 5000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.freqModLFO] = {\n    min: -16000,\n    max: 4500,\n    def: 0,\n    nrpn: 4\n};\ngeneratorLimits[generatorTypes.delayVibLFO] = {\n    min: -12000,\n    max: 5000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.freqVibLFO] = {\n    min: -16000,\n    max: 4500,\n    def: 0,\n    nrpn: 4\n};\n\n// Mod env\ngeneratorLimits[generatorTypes.delayModEnv] = {\n    min: -32768,\n    max: 5000,\n    def: -32768,\n    nrpn: 2\n}; // -32,768 indicates instant phase,\n// This is done to prevent click at the start of filter modenv\ngeneratorLimits[generatorTypes.attackModEnv] = {\n    min: -32768,\n    max: 8000,\n    def: -32768,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.holdModEnv] = {\n    min: -12000,\n    max: 5000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.decayModEnv] = {\n    min: -12000,\n    max: 8000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.sustainModEnv] = {\n    min: 0,\n    max: 1000,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.releaseModEnv] = {\n    min: -12000,\n    max: 8000,\n    def: -12000,\n    nrpn: 2\n};\n// Key num to mod env\ngeneratorLimits[generatorTypes.keyNumToModEnvHold] = {\n    min: -1200,\n    max: 1200,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.keyNumToModEnvDecay] = {\n    min: -1200,\n    max: 1200,\n    def: 0,\n    nrpn: 1\n};\n\n// Vol env\ngeneratorLimits[generatorTypes.delayVolEnv] = {\n    min: -12000,\n    max: 5000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.attackVolEnv] = {\n    min: -12000,\n    max: 8000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.holdVolEnv] = {\n    min: -12000,\n    max: 5000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.decayVolEnv] = {\n    min: -12000,\n    max: 8000,\n    def: -12000,\n    nrpn: 2\n};\ngeneratorLimits[generatorTypes.sustainVolEnv] = {\n    min: 0,\n    max: 1440,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.releaseVolEnv] = {\n    min: -12000,\n    max: 8000,\n    def: -12000,\n    nrpn: 2\n};\n// Key num to vol env\ngeneratorLimits[generatorTypes.keyNumToVolEnvHold] = {\n    min: -1200,\n    max: 1200,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.keyNumToVolEnvDecay] = {\n    min: -1200,\n    max: 1200,\n    def: 0,\n    nrpn: 1\n};\n\ngeneratorLimits[generatorTypes.startloopAddrsCoarseOffset] = {\n    min: -32768,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.keyNum] = {\n    min: -1,\n    max: 127,\n    def: -1,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.velocity] = {\n    min: -1,\n    max: 127,\n    def: -1,\n    nrpn: 1\n};\n\ngeneratorLimits[generatorTypes.initialAttenuation] = {\n    min: 0,\n    max: 1440,\n    def: 0,\n    nrpn: 1\n};\n\ngeneratorLimits[generatorTypes.endloopAddrsCoarseOffset] = {\n    min: -32768,\n    max: 32768,\n    def: 0,\n    nrpn: 1\n};\n\ngeneratorLimits[generatorTypes.coarseTune] = {\n    min: -120,\n    max: 120,\n    def: 0,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.fineTune] = {\n    min: -12700,\n    max: 12700,\n    def: 0,\n    nrpn: 1\n}; // This generator is used as initial pitch, hence this range\ngeneratorLimits[generatorTypes.scaleTuning] = {\n    min: 0,\n    max: 1200,\n    def: 100,\n    nrpn: 1\n};\ngeneratorLimits[generatorTypes.exclusiveClass] = {\n    min: 0,\n    max: 99999,\n    def: 0,\n    nrpn: 0\n};\ngeneratorLimits[generatorTypes.overridingRootKey] = {\n    min: 0 - 1,\n    max: 127,\n    def: -1,\n    nrpn: 0\n};\ngeneratorLimits[generatorTypes.sampleModes] = {\n    min: 0,\n    max: 3,\n    def: 0,\n    nrpn: 0\n};\nexport { generatorLimits };\n", "export * from \"./basic_soundbank/generator_types\";\nexport const sampleTypes = {\n    monoSample: 1,\n    rightSample: 2,\n    leftSample: 4,\n    linkedSample: 8,\n    romMonoSample: 32769,\n    romRightSample: 32770,\n    romLeftSample: 32772,\n    romLinkedSample: 32776\n} as const;\n\nexport type SampleType = (typeof sampleTypes)[keyof typeof sampleTypes];\n\nexport const modulatorSources = {\n    noController: 0,\n    noteOnVelocity: 2,\n    noteOnKeyNum: 3,\n    polyPressure: 10,\n    channelPressure: 13,\n    pitchWheel: 14,\n    pitchWheelRange: 16,\n    link: 127\n} as const;\n\nexport type ModulatorSourceEnum =\n    (typeof modulatorSources)[keyof typeof modulatorSources];\n\nexport const modulatorCurveTypes = {\n    linear: 0,\n    concave: 1,\n    convex: 2,\n    switch: 3\n} as const;\n\nexport type ModulatorCurveType =\n    (typeof modulatorCurveTypes)[keyof typeof modulatorCurveTypes];\n\nexport const modulatorTransformTypes = {\n    linear: 0,\n    absolute: 2\n} as const;\n\nexport type ModulatorTransformType =\n    (typeof modulatorTransformTypes)[keyof typeof modulatorTransformTypes];\n\n// Source curve type maps to a soundfont curve type in section 2.10, table 9\nexport type DLSTransform = ModulatorCurveType;\n\nexport const dlsSources = {\n    none: 0x0,\n    modLfo: 0x1,\n    velocity: 0x2,\n    keyNum: 0x3,\n    volEnv: 0x4,\n    modEnv: 0x5,\n    pitchWheel: 0x6,\n    polyPressure: 0x7,\n    channelPressure: 0x8,\n    vibratoLfo: 0x9,\n\n    modulationWheel: 0x81,\n    volume: 0x87,\n    pan: 0x8a,\n    expression: 0x8b,\n    // Note: these are flipped unintentionally in DLS2 table 9. Argh!\n    chorus: 0xdd,\n    reverb: 0xdb,\n\n    pitchWheelRange: 0x100,\n    fineTune: 0x101,\n    coarseTune: 0x102\n} as const;\n\nexport type DLSSource = (typeof dlsSources)[keyof typeof dlsSources];\n\nexport const dlsDestinations = {\n    none: 0x0, // No destination\n    gain: 0x1, // Linear gain\n    reserved: 0x2, // Reserved\n    pitch: 0x3, // Pitch in cents\n    pan: 0x4, // Pan 10ths of a percent\n    keyNum: 0x5, // MIDI key number\n    // Nuh uh, the channel controllers are not supported!\n    chorusSend: 0x80, // Chorus send level 10ths of a percent\n    reverbSend: 0x81, // Reverb send level 10ths of a percent\n\n    modLfoFreq: 0x104, // Modulation LFO frequency\n    modLfoDelay: 0x105, // Modulation LFO delay\n\n    vibLfoFreq: 0x114, // Vibrato LFO frequency\n    vibLfoDelay: 0x115, // Vibrato LFO delay\n\n    volEnvAttack: 0x206, // Volume envelope attack\n    volEnvDecay: 0x207, // Volume envelope decay\n    reservedEG1: 0x208, // Reserved\n    volEnvRelease: 0x209, // Volume envelope release\n    volEnvSustain: 0x20a, // Volume envelope sustain\n    volEnvDelay: 0x20b, // Volume envelope delay\n    volEnvHold: 0x20c, // Volume envelope hold\n\n    modEnvAttack: 0x30a, // Modulation envelope attack\n    modEnvDecay: 0x30b, // Modulation envelope decay\n    reservedEG2: 0x30c, // Reserved\n    modEnvRelease: 0x30d, // Modulation envelope release\n    modEnvSustain: 0x30e, // Modulation envelope sustain\n    modEnvDelay: 0x30f, // Modulation envelope delay\n    modEnvHold: 0x310, // Modulation envelope hold\n\n    filterCutoff: 0x500, // Low pass filter cutoff frequency\n    filterQ: 0x501 // Low pass filter resonance\n} as const;\n\nexport type DLSDestination =\n    (typeof dlsDestinations)[keyof typeof dlsDestinations];\n\nexport const DLSLoopTypes = {\n    forward: 0x0000,\n    loopAndRelease: 0x0001\n} as const;\n\nexport type DLSLoopType = (typeof DLSLoopTypes)[keyof typeof DLSLoopTypes];\n", "import { type MIDIController, midiControllers } from \"../../../midi/enums\";\nimport { customControllers } from \"../../enums\";\nimport { modulatorSources } from \"../../../soundbank/enums\";\n\n/*\n * A bit of explanation:\n * The controller table is stored as an int16 array, it stores 14-bit values.\n * This controller table is then extended with the modulatorSources section,\n * for example, pitch range and pitch range depth.\n * This allows us for precise control range and supports full pitch-wheel resolution.\n */\nexport const NON_CC_INDEX_OFFSET = 128;\nexport const CONTROLLER_TABLE_SIZE = 147;\n\n/**\n * An array with the default MIDI controller values. Note that these are 14-bit, not 7-bit.\n */\nexport const defaultMIDIControllerValues = new Int16Array(\n    CONTROLLER_TABLE_SIZE\n).fill(0);\nexport const setResetValue = (i: MIDIController, v: number) =>\n    (defaultMIDIControllerValues[i] = v << 7);\n\n// Values come from Falcosoft MidiPlayer 6\nsetResetValue(midiControllers.mainVolume, 100);\nsetResetValue(midiControllers.balance, 64);\nsetResetValue(midiControllers.expressionController, 127);\nsetResetValue(midiControllers.pan, 64);\n\nsetResetValue(midiControllers.portamentoOnOff, 127);\n\nsetResetValue(midiControllers.filterResonance, 64);\nsetResetValue(midiControllers.releaseTime, 64);\nsetResetValue(midiControllers.attackTime, 64);\nsetResetValue(midiControllers.brightness, 64);\n\nsetResetValue(midiControllers.decayTime, 64);\nsetResetValue(midiControllers.vibratoRate, 64);\nsetResetValue(midiControllers.vibratoDepth, 64);\nsetResetValue(midiControllers.vibratoDelay, 64);\nsetResetValue(midiControllers.generalPurposeController6, 64);\nsetResetValue(midiControllers.generalPurposeController8, 64);\n\nsetResetValue(midiControllers.registeredParameterLSB, 127);\nsetResetValue(midiControllers.registeredParameterMSB, 127);\nsetResetValue(midiControllers.nonRegisteredParameterLSB, 127);\nsetResetValue(midiControllers.nonRegisteredParameterMSB, 127);\n\nexport const PORTAMENTO_CONTROL_UNSET = 1;\n// Special case: portamento control\n// Since it is only 7-bit, only the values at multiple of 128 are allowed.\n// A value of just 1 indicates no key set, hence no portamento.\n// This is the \"initial unset portamento key\" flag.\ndefaultMIDIControllerValues[midiControllers.portamentoControl] =\n    PORTAMENTO_CONTROL_UNSET;\n\n// Pitch wheel\nsetResetValue(\n    (NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel) as MIDIController,\n    64\n);\nsetResetValue(\n    (NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange) as MIDIController,\n    2\n);\n\nexport const CUSTOM_CONTROLLER_TABLE_SIZE =\n    Object.keys(customControllers).length;\nexport const customResetArray = new Float32Array(CUSTOM_CONTROLLER_TABLE_SIZE);\ncustomResetArray[customControllers.modulationMultiplier] = 1;\n", "import { consoleColors } from \"../../../../utils/other\";\nimport { SpessaSynthInfo } from \"../../../../utils/loggin\";\nimport {\n    customResetArray,\n    defaultMIDIControllerValues,\n    NON_CC_INDEX_OFFSET,\n    PORTAMENTO_CONTROL_UNSET\n} from \"../../engine_components/controller_tables\";\nimport { DEFAULT_PERCUSSION, DEFAULT_SYNTH_MODE } from \"../../engine_components/synth_constants\";\nimport { BankSelectHacks } from \"../../../../utils/midi_hacks\";\nimport { type MIDIController, midiControllers } from \"../../../../midi/enums\";\nimport type { MIDIChannel } from \"../../engine_components/midi_channel\";\nimport type { SpessaSynthProcessor } from \"../../../processor\";\nimport { customControllers, dataEntryStates } from \"../../../enums\";\nimport { modulatorSources } from \"../../../../soundbank/enums\";\n\n/**\n * Executes a full system reset of all controllers.\n * This will reset all controllers to their default values,\n * except for the locked controllers.\n */\nexport function resetAllControllersInternal(\n    this: SpessaSynthProcessor,\n    log = true\n) {\n    if (log) {\n        SpessaSynthInfo(\"%cResetting all controllers!\", consoleColors.info);\n    }\n    this.privateProps.callEvent(\"allControllerReset\", undefined);\n    this.setMasterParameter(\"midiSystem\", DEFAULT_SYNTH_MODE);\n    if (!this.privateProps.drumPreset || !this.privateProps.defaultPreset) {\n        return;\n    }\n    for (\n        let channelNumber = 0;\n        channelNumber < this.midiChannels.length;\n        channelNumber++\n    ) {\n        const ch: MIDIChannel = this.midiChannels[channelNumber];\n\n        // Do not send CC changes as we call allControllerReset\n        ch.resetControllers(false);\n        ch.resetPreset();\n\n        for (let ccNum = 0; ccNum < 128; ccNum++) {\n            if (this.midiChannels[channelNumber].lockedControllers[ccNum]) {\n                // Was not reset so restore the value\n                this.privateProps.callEvent(\"controllerChange\", {\n                    channel: channelNumber,\n                    controllerNumber: ccNum,\n                    controllerValue:\n                        this.midiChannels[channelNumber].midiControllers[\n                            ccNum\n                        ] >> 7\n                });\n            }\n        }\n\n        // Restore pitch wheel\n        if (\n            !this.midiChannels[channelNumber].lockedControllers[\n                NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel\n            ]\n        ) {\n            const val =\n                this.midiChannels[channelNumber].midiControllers[\n                    NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel\n                ];\n            this.privateProps.callEvent(\"pitchWheel\", {\n                channel: channelNumber,\n                pitch: val\n            });\n        }\n\n        // Restore channel pressure\n        if (\n            !this.midiChannels[channelNumber].lockedControllers[\n                NON_CC_INDEX_OFFSET + modulatorSources.channelPressure\n            ]\n        ) {\n            const val =\n                this.midiChannels[channelNumber].midiControllers[\n                    NON_CC_INDEX_OFFSET + modulatorSources.channelPressure\n                ] >> 7;\n            this.privateProps.callEvent(\"channelPressure\", {\n                channel: channelNumber,\n                pressure: val\n            });\n        }\n    }\n    this.privateProps.tunings.length = 0;\n    this.privateProps.tunings.length = 0;\n    for (let i = 0; i < 128; i++) {\n        this.privateProps.tunings.push([]);\n    }\n\n    this.setMIDIVolume(1);\n}\n\n/**\n * Reset all controllers for channel.\n * This will reset all controllers to their default values,\n * except for the locked controllers.\n */\nexport function resetControllers(this: MIDIChannel, sendCCEvents = true) {\n    this.channelOctaveTuning.fill(0);\n\n    // Reset the array\n    for (let i = 0; i < defaultMIDIControllerValues.length; i++) {\n        if (this.lockedControllers[i]) {\n            continue;\n        }\n        const resetValue = defaultMIDIControllerValues[i];\n        if (this.midiControllers[i] !== resetValue && i < 127) {\n            if (i === midiControllers.portamentoControl) {\n                this.midiControllers[i] = PORTAMENTO_CONTROL_UNSET;\n            } else if (\n                i !== midiControllers.portamentoControl &&\n                i !== midiControllers.dataEntryMSB &&\n                i !== midiControllers.registeredParameterMSB &&\n                i !== midiControllers.registeredParameterLSB &&\n                i !== midiControllers.nonRegisteredParameterMSB &&\n                i !== midiControllers.nonRegisteredParameterLSB\n            ) {\n                this.controllerChange(\n                    i as MIDIController,\n                    resetValue >> 7,\n                    sendCCEvents\n                );\n            }\n        } else {\n            // Out of range, do a regular reset\n            this.midiControllers[i] = resetValue;\n        }\n    }\n    this.channelVibrato = { rate: 0, depth: 0, delay: 0 };\n    this.randomPan = false;\n\n    this.sysExModulators.resetModulators();\n\n    // Reset custom controllers\n    // Special case: transpose does not get affected\n    const transpose =\n        this.customControllers[customControllers.channelTransposeFine];\n    this.customControllers.set(customResetArray);\n    this.setCustomController(customControllers.channelTransposeFine, transpose);\n    this.resetParameters();\n}\n\nexport function resetPreset(this: MIDIChannel) {\n    this.setBankMSB(BankSelectHacks.getDefaultBank(this.channelSystem));\n    this.setBankLSB(0);\n    this.setGSDrums(false);\n\n    this.setDrums(this.channelNumber % 16 === DEFAULT_PERCUSSION);\n    this.programChange(0);\n}\n\nexport const nonResettableCCs = new Set<MIDIController>([\n    midiControllers.bankSelect,\n    midiControllers.bankSelectLSB,\n    midiControllers.mainVolume,\n    midiControllers.mainVolumeLSB,\n    midiControllers.pan,\n    midiControllers.panLSB,\n    midiControllers.reverbDepth,\n    midiControllers.tremoloDepth,\n    midiControllers.chorusDepth,\n    midiControllers.detuneDepth,\n    midiControllers.phaserDepth,\n    midiControllers.soundVariation,\n    midiControllers.filterResonance,\n    midiControllers.releaseTime,\n    midiControllers.attackTime,\n    midiControllers.brightness,\n    midiControllers.decayTime,\n    midiControllers.vibratoRate,\n    midiControllers.vibratoDepth,\n    midiControllers.vibratoDelay,\n    midiControllers.soundController10\n] as const);\n\n/**\n * https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp15.pdf\n * Reset controllers according to RP-15 Recommended Practice.\n */\nexport function resetControllersRP15Compliant(this: MIDIChannel) {\n    // Reset tunings\n    this.channelOctaveTuning.fill(0);\n\n    // Reset pitch bend\n    this.pitchWheel(8192);\n\n    this.channelVibrato = { rate: 0, depth: 0, delay: 0 };\n\n    for (let i = 0; i < 128; i++) {\n        const resetValue = defaultMIDIControllerValues[i];\n        if (\n            !nonResettableCCs.has(i as MIDIController) &&\n            resetValue !== this.midiControllers[i]\n        ) {\n            if (i === midiControllers.portamentoControl) {\n                this.midiControllers[i] = PORTAMENTO_CONTROL_UNSET;\n            } else {\n                this.controllerChange(i as MIDIController, resetValue >> 7);\n            }\n        }\n    }\n    this.resetGeneratorOverrides();\n    this.resetGeneratorOffsets();\n}\n\n/**\n * Reset all parameters to their default values.\n * This includes NRPN and RPN controllers, data entry state,\n * and generator overrides and offsets.\n */\nexport function resetParameters(this: MIDIChannel) {\n    /**\n     * Reset the state machine to idle\n     */\n    this.dataEntryState = dataEntryStates.Idle;\n    this.midiControllers[midiControllers.nonRegisteredParameterLSB] = 127 << 7;\n    this.midiControllers[midiControllers.nonRegisteredParameterMSB] = 127 << 7;\n    this.midiControllers[midiControllers.registeredParameterLSB] = 127 << 7;\n    this.midiControllers[midiControllers.registeredParameterMSB] = 127 << 7;\n    this.resetGeneratorOverrides();\n    this.resetGeneratorOffsets();\n}\n", "import { getEvent, MIDIMessage } from \"../midi/midi_message\";\nimport { defaultMIDIControllerValues } from \"../synthesizer/audio_engine/engine_components/controller_tables\";\nimport { nonResettableCCs } from \"../synthesizer/audio_engine/engine_methods/controller_control/reset_controllers\";\nimport {\n    type MIDIController,\n    midiControllers,\n    midiMessageTypes\n} from \"../midi/enums\";\nimport type { SpessaSynthSequencer } from \"./sequencer\";\nimport type { MIDITrack } from \"../midi/midi_track\";\nimport { readBigEndian } from \"../utils/byte_functions/big_endian\";\n\n// An array with preset default values\nconst defaultControllerArray = defaultMIDIControllerValues.slice(0, 128);\n\n/**\n * Plays the MIDI file to a specific time or ticks.\n * @param time in seconds.\n * @param ticks optional MIDI ticks, when given is used instead of time.\n * @returns true if the MIDI file is not finished.\n */\nexport function setTimeToInternal(\n    this: SpessaSynthSequencer,\n    time: number,\n    ticks: number | undefined = undefined\n): boolean {\n    if (!this._midiData) {\n        return false;\n    }\n    this.oneTickToSeconds = 60 / (120 * this._midiData.timeDivision);\n    // Reset everything\n    if (this.externalMIDIPlayback) {\n        this.sendMIDIReset();\n    } else {\n        this.synth.resetAllControllers();\n        this.synth.stopAllChannels(false);\n    }\n    this.playedTime = 0;\n    this.eventIndexes = Array<number>(this._midiData.tracks.length).fill(0);\n\n    // We save the pitch bends, programs and controllers here\n    // To only send them once after going through the events\n\n    const channelsToSave = this.synth.midiChannels.length;\n    /**\n     * Save pitch bends here and send them only after\n     */\n    const pitchWheels = Array<number>(channelsToSave).fill(8192);\n\n    /**\n     * Save programs here and send them only after\n     */\n    const programs: { program: number; bank: number; actualBank: number }[] =\n        [];\n    for (let i = 0; i < channelsToSave; i++) {\n        programs.push({\n            program: -1,\n            bank: 0,\n            actualBank: 0\n        });\n    }\n\n    const isCCNonSkippable = (cc: MIDIController) =>\n        cc === midiControllers.dataDecrement ||\n        cc === midiControllers.dataIncrement ||\n        cc === midiControllers.dataEntryMSB ||\n        cc === midiControllers.dataEntryLSB ||\n        cc === midiControllers.registeredParameterLSB ||\n        cc === midiControllers.registeredParameterMSB ||\n        cc === midiControllers.nonRegisteredParameterLSB ||\n        cc === midiControllers.nonRegisteredParameterMSB ||\n        cc === midiControllers.bankSelect ||\n        cc === midiControllers.bankSelectLSB ||\n        cc === midiControllers.resetAllControllers;\n\n    /**\n     * Save controllers here and send them only after\n     */\n    const savedControllers: number[][] = [];\n    for (let i = 0; i < channelsToSave; i++) {\n        savedControllers.push(\n            Array.from(defaultControllerArray) as MIDIController[]\n        );\n    }\n\n    // Save tempo changes\n    // Testcase:\n    // Piano Concerto No. 2 in G minor, Op 16 - I. Cadenza (Ky6000).mid\n    // With 46k changes!\n    let savedTempo: MIDIMessage | undefined = undefined;\n    let savedTempoTrack = 0;\n\n    /**\n     * RP-15 compliant reset\n     * https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp15.pdf\n     */\n    function resetAllControllers(chan: number) {\n        // Reset pitch bend\n        pitchWheels[chan] = 8192;\n        if (savedControllers?.[chan] === undefined) {\n            return;\n        }\n        for (let i = 0; i < defaultControllerArray.length; i++) {\n            if (!nonResettableCCs.has(i as MIDIController)) {\n                savedControllers[chan][i] = defaultControllerArray[\n                    i\n                ] as MIDIController;\n            }\n        }\n    }\n\n    while (true) {\n        // Find the next event\n        let trackIndex = this.findFirstEventIndex();\n        // Type assertion is required here because tsc is drunk...\n        const track: MIDITrack = this._midiData.tracks[trackIndex];\n        const event = track.events[this.eventIndexes[trackIndex]];\n        if (ticks !== undefined) {\n            if (event.ticks >= ticks) {\n                break;\n            }\n        } else {\n            if (this.playedTime >= time) {\n                break;\n            }\n        }\n\n        // Skip note ons\n        const info = getEvent(event.statusByte);\n        // Keep in mind midi ports to determine the channel!\n        const channel =\n            info.channel + (this.midiPortChannelOffsets[track.port] || 0);\n        switch (info.status) {\n            // Skip note messages\n            case midiMessageTypes.noteOn:\n                // Track portamento control as last note\n                savedControllers[channel] ??= Array.from(\n                    defaultControllerArray\n                ) as MIDIController[];\n                savedControllers[channel][midiControllers.portamentoControl] =\n                    event.data[0] as MIDIController;\n                break;\n\n            case midiMessageTypes.noteOff:\n                break;\n\n            // Skip pitch bend\n            case midiMessageTypes.pitchWheel:\n                pitchWheels[channel] = (event.data[1] << 7) | event.data[0];\n                break;\n\n            case midiMessageTypes.programChange: {\n                // Empty tracks cannot program change\n                if (this._midiData.isMultiPort && track.channels.size === 0) {\n                    break;\n                }\n                const p = programs[channel];\n                p.program = event.data[0];\n                p.actualBank = p.bank;\n                break;\n            }\n\n            case midiMessageTypes.controllerChange: {\n                // Empty tracks cannot controller change\n                if (this._midiData.isMultiPort && track.channels.size === 0) {\n                    break;\n                }\n                // Do not skip data entries\n                const controllerNumber = event.data[0] as MIDIController;\n                if (isCCNonSkippable(controllerNumber)) {\n                    const ccV = event.data[1];\n                    if (controllerNumber === midiControllers.bankSelect) {\n                        // Add the bank to be saved\n                        programs[channel].bank = ccV;\n                        break;\n                    } else if (\n                        controllerNumber === midiControllers.resetAllControllers\n                    ) {\n                        resetAllControllers(channel);\n                    }\n                    if (this.externalMIDIPlayback) {\n                        this.sendMIDICC(channel, controllerNumber, ccV);\n                    } else {\n                        this.synth.controllerChange(\n                            channel,\n                            controllerNumber,\n                            ccV\n                        );\n                    }\n                } else {\n                    savedControllers[channel] ??= Array.from(\n                        defaultControllerArray\n                    ) as MIDIController[];\n                    savedControllers[channel][controllerNumber] = event\n                        .data[1] as MIDIController;\n                }\n                break;\n            }\n\n            case midiMessageTypes.setTempo:\n                const tempoBPM = 60000000 / readBigEndian(event.data, 3);\n                this.oneTickToSeconds =\n                    60 / (tempoBPM * this._midiData.timeDivision);\n                savedTempo = event;\n                savedTempoTrack = trackIndex;\n                break;\n\n            default:\n                this.processEvent(event, trackIndex);\n                break;\n        }\n\n        this.eventIndexes[trackIndex]++;\n        // Find the next event\n        trackIndex = this.findFirstEventIndex();\n\n        const nextEvent =\n            this._midiData.tracks[trackIndex].events[\n                this.eventIndexes[trackIndex]\n            ];\n        if (nextEvent === undefined) {\n            this.stop();\n            return false;\n        }\n        this.playedTime +=\n            this.oneTickToSeconds * (nextEvent.ticks - event.ticks);\n    }\n\n    // Restoring saved controllers\n    if (this.externalMIDIPlayback) {\n        for (\n            let channelNumber = 0;\n            channelNumber < channelsToSave;\n            channelNumber++\n        ) {\n            // Restore pitch bends\n            if (pitchWheels[channelNumber] !== undefined) {\n                this.sendMIDIPitchWheel(\n                    channelNumber,\n                    pitchWheels[channelNumber] >> 7,\n                    pitchWheels[channelNumber] & 0x7f\n                );\n            }\n            if (savedControllers[channelNumber] !== undefined) {\n                // Every controller that has changed\n                savedControllers[channelNumber].forEach((value, index) => {\n                    if (\n                        value !== defaultControllerArray[index] &&\n                        !isCCNonSkippable(index as MIDIController)\n                    ) {\n                        this.sendMIDICC(channelNumber, index, value);\n                    }\n                });\n            }\n            // Restore programs\n            if (\n                programs[channelNumber].program >= 0 &&\n                programs[channelNumber].actualBank >= 0\n            ) {\n                const bank = programs[channelNumber].actualBank;\n                this.sendMIDICC(\n                    channelNumber,\n                    midiControllers.bankSelect,\n                    bank\n                );\n                this.sendMIDIProgramChange(\n                    channelNumber,\n                    programs[channelNumber].program\n                );\n            }\n        }\n    } else {\n        // For all synth channels\n        for (\n            let channelNumber = 0;\n            channelNumber < channelsToSave;\n            channelNumber++\n        ) {\n            // Restore pitch bends\n            if (pitchWheels[channelNumber] !== undefined) {\n                this.synth.pitchWheel(\n                    channelNumber,\n                    pitchWheels[channelNumber]\n                );\n            }\n            if (savedControllers[channelNumber] !== undefined) {\n                // Every controller that has changed\n                savedControllers[channelNumber].forEach((value, index) => {\n                    if (\n                        value !== defaultControllerArray[index] &&\n                        !isCCNonSkippable(index as MIDIController)\n                    ) {\n                        this.synth.controllerChange(\n                            channelNumber,\n                            index as MIDIController,\n                            value\n                        );\n                    }\n                });\n            }\n            // Restore programs\n            if (programs[channelNumber].actualBank >= 0) {\n                const p = programs[channelNumber];\n                if (p.program !== -1) {\n                    // A program change has occurred, apply the actual bank when program change was executed\n                    this.synth.controllerChange(\n                        channelNumber,\n                        midiControllers.bankSelect,\n                        p.actualBank\n                    );\n                    this.synth.programChange(channelNumber, p.program);\n                } else {\n                    // No program change, apply the current bank select\n                    this.synth.controllerChange(\n                        channelNumber,\n                        midiControllers.bankSelect,\n                        p.bank\n                    );\n                }\n            }\n        }\n    }\n\n    // Restoring tempo\n    if (savedTempo) {\n        this.callEvent(\"metaEvent\", {\n            event: savedTempo,\n            trackIndex: savedTempoTrack\n        });\n    }\n\n    // Restoring paused time\n    if (this.paused) {\n        this.pausedTime = this.playedTime;\n    }\n\n    return true;\n}\n", "import { processEventInternal } from \"./process_event\";\nimport { processTick } from \"./process_tick\";\nimport { assignMIDIPortInternal, loadNewSequenceInternal } from \"./song_control\";\nimport { setTimeToInternal } from \"./play\";\nimport { SpessaSynthWarn } from \"../utils/loggin\";\n\nimport { MIDI_CHANNEL_COUNT } from \"../synthesizer/audio_engine/engine_components/synth_constants\";\nimport { BasicMIDI } from \"../midi/basic_midi\";\nimport type { SpessaSynthProcessor } from \"../synthesizer/processor\";\nimport { midiControllers, midiMessageTypes } from \"../midi/enums\";\nimport type { SequencerEvent, SequencerEventData } from \"./types\";\n\nexport class SpessaSynthSequencer {\n    /**\n     * Sequencer's song list.\n     */\n    public songs: BasicMIDI[] = [];\n    /**\n     * The shuffled song indexes.\n     * This is used when shuffleMode is enabled.\n     */\n    public shuffledSongIndexes: number[] = [];\n    /**\n     * The synthesizer connected to the sequencer.\n     */\n    public readonly synth: SpessaSynthProcessor;\n    /**\n     * If the MIDI messages should be sent to an event instead of the synth.\n     * This is used by spessasynth_lib to pass them over to Web MIDI API.\n     */\n    public externalMIDIPlayback = false;\n    /**\n     * The loop count of the sequencer.\n     * If infinite, it will loop forever.\n     * If zero, the loop is disabled.\n     */\n    public loopCount = 0;\n    /**\n     * Indicates if the sequencer should skip to the first note on event.\n     * Defaults to true.\n     */\n    public skipToFirstNoteOn = true;\n\n    /**\n     * Called when the sequencer calls an event.\n     * @param event The event\n     */\n    public onEventCall?: (event: SequencerEvent) => unknown;\n    /**\n     * Processes a single MIDI tick.\n     * You should call this every rendering quantum to process the sequencer events in real-time.\n     */\n    public processTick: typeof processTick = processTick.bind(\n        this\n    ) as typeof processTick;\n    /**\n     * The time of the first note in seconds.\n     */\n    protected firstNoteTime = 0;\n    /**\n     * How long a single MIDI tick currently lasts in seconds.\n     */\n    protected oneTickToSeconds = 0;\n    /**\n     * The current event index for each track.\n     * This is used to track which event is currently being processed for each track.\n     */\n    protected eventIndexes: number[] = [];\n    /**\n     * The time that has already been played in the current song.\n     */\n    protected playedTime = 0;\n    /**\n     * The paused time of the sequencer.\n     * If the sequencer is not paused, this is undefined.\n     */\n    protected pausedTime?: number = -1;\n    /**\n     * Absolute time of the sequencer when it started playing.\n     * It is based on the synth's current time.\n     */\n    protected absoluteStartTime = 0;\n    /**\n     * Currently playing notes (for pausing and resuming)\n     */\n    protected playingNotes: {\n        midiNote: number;\n        channel: number;\n        velocity: number;\n    }[] = [];\n    /**\n     * MIDI Port number for each of the MIDI tracks in the current sequence.\n     */\n    protected currentMIDIPorts: number[] = [];\n    /**\n     * This is used to assign new MIDI port offsets to new ports.\n     */\n    protected midiPortChannelOffset = 0;\n    /**\n     * Channel offsets for each MIDI port.\n     * Stored as:\n     * Record<midi port, channel offset>\n     */\n    protected midiPortChannelOffsets: Record<number, number> = {};\n    protected assignMIDIPort = assignMIDIPortInternal.bind(this);\n    protected loadNewSequence = loadNewSequenceInternal.bind(this);\n    protected processEvent = processEventInternal.bind(this);\n    protected setTimeTo: typeof setTimeToInternal =\n        setTimeToInternal.bind(this);\n\n    /**\n     * Initializes a new Sequencer without any songs loaded.\n     * @param spessasynthProcessor the synthesizer processor to use with this sequencer.\n     */\n    public constructor(spessasynthProcessor: SpessaSynthProcessor) {\n        this.synth = spessasynthProcessor;\n        this.absoluteStartTime = this.synth.currentSynthTime;\n    }\n\n    protected _midiData?: BasicMIDI;\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * The currently loaded MIDI data.\n     */\n    public get midiData() {\n        return this._midiData;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * The length of the current sequence in seconds.\n     */\n    public get duration() {\n        return this._midiData?.duration ?? 0;\n    }\n\n    protected _songIndex = 0;\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * The current song index in the song list.\n     * If shuffleMode is enabled, this is the index of the shuffled song list.\n     */\n    public get songIndex(): number {\n        return this._songIndex;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * The current song index in the song list.\n     * If shuffleMode is enabled, this is the index of the shuffled song list.\n     */\n    public set songIndex(value: number) {\n        this._songIndex = value;\n        this._songIndex = Math.max(0, value % this.songs.length);\n        this.loadCurrentSong();\n    }\n\n    protected _shuffleMode = false;\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Controls if the sequencer should shuffle the songs in the song list.\n     * If true, the sequencer will play the songs in a random order.\n     */\n    public get shuffleMode(): boolean {\n        return this._shuffleMode;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Controls if the sequencer should shuffle the songs in the song list.\n     * If true, the sequencer will play the songs in a random order.\n     */\n    public set shuffleMode(on: boolean) {\n        this._shuffleMode = on;\n        if (on) {\n            this.shuffleSongIndexes();\n            this._songIndex = 0;\n            this.loadCurrentSong();\n        } else {\n            this._songIndex = this.shuffledSongIndexes[this._songIndex];\n        }\n    }\n\n    /**\n     * Internal playback rate.\n     */\n    protected _playbackRate = 1;\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * The sequencer's playback rate.\n     * This is the rate at which the sequencer plays back the MIDI data.\n     */\n    public get playbackRate() {\n        return this._playbackRate;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * The sequencer's playback rate.\n     * This is the rate at which the sequencer plays back the MIDI data.\n     * @param value the playback rate to set.\n     */\n    public set playbackRate(value: number) {\n        const time = this.currentTime;\n        this._playbackRate = value;\n        this.currentTime = time;\n    }\n\n    /**\n     * The current time of the sequencer.\n     * This is the time in seconds since the sequencer started playing.\n     */\n    public get currentTime() {\n        // Return the paused time if it's set to something other than undefined\n        if (this.pausedTime !== undefined) {\n            return this.pausedTime;\n        }\n\n        return (\n            (this.synth.currentSynthTime - this.absoluteStartTime) *\n            this._playbackRate\n        );\n    }\n\n    /**\n     * The current time of the sequencer.\n     * This is the time in seconds since the sequencer started playing.\n     * @param time the time to set in seconds.\n     */\n    public set currentTime(time) {\n        if (!this._midiData) {\n            return;\n        }\n        if (this.paused) {\n            this.pausedTime = time;\n        }\n        if (time > this._midiData.duration || time < 0) {\n            // Time is 0\n            if (this.skipToFirstNoteOn) {\n                this.setTimeTicks(this._midiData.firstNoteOn - 1);\n            } else {\n                this.setTimeTicks(0);\n            }\n        } else if (this.skipToFirstNoteOn && time < this.firstNoteTime) {\n            this.setTimeTicks(this._midiData.firstNoteOn - 1);\n            return;\n        } else {\n            this.playingNotes = [];\n            this.callEvent(\"timeChange\", { newTime: time });\n            if (this._midiData.duration === 0) {\n                SpessaSynthWarn(\"No duration!\");\n                this.callEvent(\"pause\", { isFinished: true });\n                return;\n            }\n            this.setTimeTo(time);\n            this.recalculateStartTime(time);\n        }\n    }\n\n    /**\n     * True if paused, false if playing or stopped\n     */\n    public get paused() {\n        return this.pausedTime !== undefined;\n    }\n\n    /**\n     * Starts or resumes the playback of the sequencer.\n     * If the sequencer is paused, it will resume from the paused time.\n     */\n    public play() {\n        if (!this._midiData) {\n            throw new Error(\"No songs loaded in the sequencer!\");\n        }\n\n        // Reset the time\n        if (this.currentTime >= this._midiData.duration) {\n            this.currentTime = 0;\n        }\n\n        // Unpause if paused\n        if (this.paused) {\n            // Adjust the start time\n            this.recalculateStartTime(this.pausedTime ?? 0);\n        }\n        if (!this.externalMIDIPlayback) {\n            this.playingNotes.forEach((n) => {\n                this.synth.noteOn(n.channel, n.midiNote, n.velocity);\n            });\n        }\n        this.pausedTime = undefined;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Pauses the playback.\n     */\n    public pause() {\n        this.pauseInternal(false);\n    }\n\n    /**\n     * Loads a new song list into the sequencer.\n     * @param midiBuffers the list of songs to load.\n     */\n    public loadNewSongList(midiBuffers: BasicMIDI[]) {\n        /**\n         * Parse the MIDIs (only the array buffers, MIDI is unchanged)\n         */\n        this.songs = midiBuffers;\n        if (this.songs.length < 1) {\n            return;\n        }\n        this._songIndex = 0;\n        this.shuffleSongIndexes();\n        this.callEvent(\"songListChange\", { newSongList: [...this.songs] });\n        this.loadCurrentSong();\n    }\n\n    protected callEvent<K extends keyof SequencerEventData>(\n        type: K,\n        data: SequencerEventData[K]\n    ) {\n        this?.onEventCall?.({\n            type,\n            data\n        } as SequencerEvent);\n    }\n\n    protected pauseInternal(isFinished: boolean) {\n        if (this.paused) {\n            return;\n        }\n        this.stop();\n        this.callEvent(\"pause\", { isFinished });\n    }\n\n    protected songIsFinished() {\n        if (this.songs.length === 1) {\n            this.pauseInternal(true);\n            return;\n        }\n        this._songIndex++;\n        this._songIndex %= this.songs.length;\n        this.loadCurrentSong();\n    }\n\n    /**\n     * Stops the playback\n     */\n    protected stop() {\n        this.pausedTime = this.currentTime;\n        // Disable sustain\n        for (let i = 0; i < 16; i++) {\n            this.synth.controllerChange(i, midiControllers.sustainPedal, 0);\n        }\n        this.synth.stopAllChannels();\n        if (this.externalMIDIPlayback) {\n            for (const note of this.playingNotes) {\n                this.sendMIDIMessage([\n                    midiMessageTypes.noteOff | note.channel % 16,\n                    note.midiNote\n                ]);\n            }\n            for (let c = 0; c < MIDI_CHANNEL_COUNT; c++) {\n                this.sendMIDICC(c, midiControllers.allNotesOff, 0);\n            }\n        }\n    }\n\n    /**\n     * @returns the index of the first to the current played time\n     */\n    protected findFirstEventIndex() {\n        let index = 0;\n        let ticks = Infinity;\n        this._midiData!.tracks.forEach((track, i) => {\n            if (this.eventIndexes[i] >= track.events.length) {\n                return;\n            }\n            const event = track.events[this.eventIndexes[i]];\n            if (event.ticks < ticks) {\n                index = i;\n                ticks = event.ticks;\n            }\n        });\n        return index;\n    }\n\n    /**\n     * Adds a new port (16 channels) to the synth.\n     */\n    protected addNewMIDIPort() {\n        for (let i = 0; i < 16; i++) {\n            this.synth.createMIDIChannel();\n        }\n    }\n\n    protected sendMIDIMessage(message: number[]) {\n        if (!this.externalMIDIPlayback) {\n            return;\n        }\n        this.callEvent(\"midiMessage\", { message });\n    }\n\n    protected sendMIDIReset() {\n        this.sendMIDIMessage([midiMessageTypes.reset]);\n        for (let ch = 0; ch < MIDI_CHANNEL_COUNT; ch++) {\n            this.sendMIDIMessage([\n                midiMessageTypes.controllerChange | ch,\n                midiControllers.allSoundOff,\n                0\n            ]);\n            this.sendMIDIMessage([\n                midiMessageTypes.controllerChange | ch,\n                midiControllers.resetAllControllers,\n                0\n            ]);\n        }\n    }\n\n    protected loadCurrentSong() {\n        let index = this._songIndex;\n        if (this._shuffleMode) {\n            index = this.shuffledSongIndexes[this._songIndex];\n        }\n        this.loadNewSequence(this.songs[index]);\n    }\n\n    protected shuffleSongIndexes() {\n        const indexes = this.songs.map((_, i) => i);\n        this.shuffledSongIndexes = [];\n        while (indexes.length > 0) {\n            const index = indexes[Math.floor(Math.random() * indexes.length)];\n            this.shuffledSongIndexes.push(index);\n            indexes.splice(indexes.indexOf(index), 1);\n        }\n    }\n\n    protected sendMIDICC(channel: number, type: number, value: number) {\n        channel %= 16;\n        if (!this.externalMIDIPlayback) {\n            return;\n        }\n        this.sendMIDIMessage([\n            midiMessageTypes.controllerChange | channel,\n            type,\n            value\n        ]);\n    }\n\n    protected sendMIDIProgramChange(channel: number, program: number) {\n        channel %= 16;\n        if (!this.externalMIDIPlayback) {\n            return;\n        }\n        this.sendMIDIMessage([\n            midiMessageTypes.programChange | channel,\n            program\n        ]);\n    }\n\n    /**\n     * Sets the pitch of the given channel\n     * @param channel usually 0-15: the channel to change pitch\n     * @param MSB SECOND byte of the MIDI pitchWheel message\n     * @param LSB FIRST byte of the MIDI pitchWheel message\n     */\n    protected sendMIDIPitchWheel(channel: number, MSB: number, LSB: number) {\n        channel %= 16;\n        if (!this.externalMIDIPlayback) {\n            return;\n        }\n        this.sendMIDIMessage([midiMessageTypes.pitchWheel | channel, LSB, MSB]);\n    }\n\n    /**\n     * Sets the time in MIDI ticks.\n     * @param ticks the MIDI ticks to set the time to.\n     */\n    protected setTimeTicks(ticks: number) {\n        if (!this._midiData) {\n            return;\n        }\n        this.playingNotes = [];\n        const seconds = this._midiData.midiTicksToSeconds(ticks);\n        this.callEvent(\"timeChange\", { newTime: seconds });\n        const isNotFinished = this.setTimeTo(0, ticks);\n        this.recalculateStartTime(this.playedTime);\n        if (!isNotFinished) {\n            return;\n        }\n    }\n\n    /**\n     * Recalculates the absolute start time of the sequencer.\n     * @param time the time in seconds to recalculate the start time for.\n     */\n    protected recalculateStartTime(time: number) {\n        this.absoluteStartTime =\n            this.synth.currentSynthTime - time / this._playbackRate;\n    }\n}\n", "export var stbvorbis=void 0!==stbvorbis?stbvorbis:{};let isReady=!1,readySolver;stbvorbis.isInitialized=new Promise(A=>readySolver=A);var atob=function(A){var I,g,B,E,Q,C,i,h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",o=\"\",G=0;A=A.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do E=h.indexOf(A.charAt(G++)),Q=h.indexOf(A.charAt(G++)),C=h.indexOf(A.charAt(G++)),i=h.indexOf(A.charAt(G++)),I=E<<2|Q>>4,g=(15&Q)<<4|C>>2,B=(3&C)<<6|i,o+=String.fromCharCode(I),64!==C&&(o+=String.fromCharCode(g)),64!==i&&(o+=String.fromCharCode(B));while(G<A.length);return o};!function(){var A,I,g,B,E,Q,C,i,h,o,G,D,a,S,F,R,s,w,y,c,n,U,$=void 0!==$?$:{};$.wasmBinary=Uint8Array.from(atob(\"\"),function(A){return A.charCodeAt(0)});var $=void 0!==$?$:{},e={};for(A in $)$.hasOwnProperty(A)&&(e[A]=$[A]);$.arguments=[],$.thisProgram=\"./this.program\",$.quit=function(A,I){throw I},$.preRun=[],$.postRun=[];var t=!1,k=!1,N=!1,r=!1;t=\"object\"==typeof window,k=\"function\"==typeof importScripts,N=\"object\"==typeof process&&\"function\"==typeof require&&!t&&!k,r=!t&&!N&&!k;var Y=\"\";function J(A){return $.locateFile?$.locateFile(A,Y):Y+A}N?(Y=\"\"+\"/\",$.read=function A(B,E){var Q;return I||(I=undefined),g||(g=undefined),B=g.normalize(B),Q=I.readFileSync(B),E?Q:Q.toString()},$.readBinary=function A(I){var g=$.read(I,!0);return g.buffer||(g=new Uint8Array(g)),_(g.buffer),g},process.argv.length>1&&($.thisProgram=process.argv[1].replace(/\\\\/g,\"/\")),$.arguments=process.argv.slice(2),\"undefined\"!=typeof module&&(/undefined!=$/),process.on(\"uncaughtException\",function(A){if(!(A instanceof II))throw A}),process.on(\"unhandledRejection\",function(A,I){process.exit(1)}),$.quit=function(A){process.exit(A)},$.inspect=function(){return\"[Emscripten Module object]\"}):r?(\"undefined\"!=typeof read&&($.read=function A(I){return read(I)}),$.readBinary=function A(I){var g;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(I)):(_(\"object\"==typeof(g=read(I,\"binary\"))),g)},\"undefined\"!=typeof scriptArgs?$.arguments=scriptArgs:\"undefined\"!=typeof arguments&&($.arguments=arguments),\"function\"==typeof quit&&($.quit=function(A){quit(A)})):(t||k)&&(t?document.currentScript&&(Y=document.currentScript.src):Y=self.location.href,Y=0!==Y.indexOf(\"blob:\")?Y.split(\"/\").slice(0,-1).join(\"/\")+\"/\":\"\",$.read=function A(I){var g=new XMLHttpRequest;return g.open(\"GET\",I,!1),g.send(null),g.responseText},k&&($.readBinary=function A(I){var g=new XMLHttpRequest;return g.open(\"GET\",I,!1),g.responseType=\"arraybuffer\",g.send(null),new Uint8Array(g.response)}),$.readAsync=function A(I,g,B){var E=new XMLHttpRequest;E.open(\"GET\",I,!0),E.responseType=\"arraybuffer\",E.onload=function A(){if(200==E.status||0==E.status&&E.response){g(E.response);return}B()},E.onerror=B,E.send(null)},$.setWindowTitle=function(A){document.title=A});var f=$.print||(\"undefined\"!=typeof console?console.log.bind(console):\"undefined\"!=typeof print?print:null),H=$.printErr||(\"undefined\"!=typeof printErr?printErr:\"undefined\"!=typeof console&&console.warn.bind(console)||f);for(A in e)e.hasOwnProperty(A)&&($[A]=e[A]);function L(A){var I=S;return S=S+A+15&-16,I}function M(A){var I=h[c>>2],g=I+A+15&-16;return(h[c>>2]=g,g>=AN&&!Ae())?(h[c>>2]=I,0):I}function d(A,I){return I||(I=16),A=Math.ceil(A/I)*I}function q(A){switch(A){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":case\"float\":return 4;case\"i64\":case\"double\":return 8;default:if(\"*\"===A[A.length-1])return 4;if(\"i\"!==A[0])return 0;var I=parseInt(A.substr(1));return _(I%8==0),I/8}}function K(A){K.shown||(K.shown={}),K.shown[A]||(K.shown[A]=1,H(A))}e=void 0;var l={\"f64-rem\":function(A,I){return A%I},debugger:function(){}},u=[];function b(A,I){for(var g=0,B=g;B<g+0;B++)if(!u[B])return u[B]=A,1+B;throw\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\"}function X(A){u[A-1]=null}var m={};function Z(A,I){if(A){_(I),m[I]||(m[I]={});var g=m[I];return g[A]||(1===I.length?g[A]=function g(){return V(I,A)}:2===I.length?g[A]=function g(B){return V(I,A,[B])}:g[A]=function g(){return V(I,A,Array.prototype.slice.call(arguments))}),g[A]}}function x(A,I,g){return g?+(A>>>0)+4294967296*+(I>>>0):+(A>>>0)+4294967296*+(0|I)}function V(A,I,g){return g&&g.length?$[\"dynCall_\"+A].apply(null,[I].concat(g)):$[\"dynCall_\"+A].call(null,I)}var p=0,W=0;function _(A,I){A||IE(\"Assertion failed: \"+I)}function T(A){var I=$[\"_\"+A];return _(I,\"Cannot call unknown function \"+A+\", make sure it is exported\"),I}var v={stackSave:function(){IA()},stackRestore:function(){A9()},arrayToC:function(A){var I,g,B=A5(A.length);return I=A,g=B,E.set(I,g),B},stringToC:function(A){var I=0;if(null!=A&&0!==A){var g=(A.length<<2)+1;I=A5(g),Ai(A,I,g)}return I}},O={string:v.stringToC,array:v.arrayToC};function j(A,I,g,B,E){var Q=T(A),C=[],i=0;if(B)for(var h=0;h<B.length;h++){var o=O[g[h]];o?(0===i&&(i=IA()),C[h]=o(B[h])):C[h]=B[h]}var G,D=Q.apply(null,C);return D=(G=D,\"string\"===I?Ag(G):\"boolean\"===I?Boolean(G):G),0!==i&&A9(i),D}function P(A,I,g,B){switch(\"*\"===(g=g||\"i8\").charAt(g.length-1)&&(g=\"i32\"),g){case\"i1\":case\"i8\":E[A>>0]=I;break;case\"i16\":C[A>>1]=I;break;case\"i32\":h[A>>2]=I;break;case\"i64\":tempI64=[I>>>0,+Ax(tempDouble=I)>=1?tempDouble>0?(0|Ap(+A6(tempDouble/4294967296),4294967295))>>>0:~~+AV((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0,],h[A>>2]=tempI64[0],h[A+4>>2]=tempI64[1];break;case\"float\":G[A>>2]=I;break;case\"double\":D[A>>3]=I;break;default:IE(\"invalid type for setValue: \"+g)}}function z(A,I,g){switch(\"*\"===(I=I||\"i8\").charAt(I.length-1)&&(I=\"i32\"),I){case\"i1\":case\"i8\":return E[A>>0];case\"i16\":return C[A>>1];case\"i32\":case\"i64\":return h[A>>2];case\"float\":return G[A>>2];case\"double\":return D[A>>3];default:IE(\"invalid type for getValue: \"+I)}return null}function AA(A,I,g,B){\"number\"==typeof A?(i=!0,o=A):(i=!1,o=A.length);var C=\"string\"==typeof I?I:null;if(G=4==g?B:[\"function\"==typeof A8?A8:L,A5,L,M,][void 0===g?2:g](Math.max(o,C?1:I.length)),i){for(B=G,_((3&G)==0),D=G+(-4&o);B<D;B+=4)h[B>>2]=0;for(D=G+o;B<D;)E[B++>>0]=0;return G}if(\"i8\"===C)return A.subarray||A.slice?Q.set(A,G):Q.set(new Uint8Array(A),G),G;for(var i,o,G,D,a,S,F,R=0;R<o;){var s=A[R];if(0===(a=C||I[R])){R++;continue}\"i64\"==a&&(a=\"i32\"),P(G+R,s,a),F!==a&&(S=q(a),F=a),R+=S}return G}function AI(A){return F?A0?A8(A):M(A):L(A)}function Ag(A,I){if(0===I||!A)return\"\";for(var g,B,E,C=0,i=0;C|=B=Q[A+i>>0],(0!=B||I)&&(i++,!I||i!=I););I||(I=i);var h=\"\";if(C<128){for(;I>0;)E=String.fromCharCode.apply(String,Q.subarray(A,A+Math.min(I,1024))),h=h?h+E:E,A+=1024,I-=1024;return h}return g=A,function A(I,g){for(var B=g;I[B];)++B;if(B-g>16&&I.subarray&&AQ)return AQ.decode(I.subarray(g,B));for(var E,Q,C,i,h,o,G=\"\";;){if(!(E=I[g++]))return G;if(!(128&E)){G+=String.fromCharCode(E);continue}if(Q=63&I[g++],(224&E)==192){G+=String.fromCharCode((31&E)<<6|Q);continue}if(C=63&I[g++],(240&E)==224?E=(15&E)<<12|Q<<6|C:(i=63&I[g++],(248&E)==240?E=(7&E)<<18|Q<<12|C<<6|i:(h=63&I[g++],E=(252&E)==248?(3&E)<<24|Q<<18|C<<12|i<<6|h:(1&E)<<30|Q<<24|C<<18|i<<12|h<<6|(o=63&I[g++]))),E<65536)G+=String.fromCharCode(E);else{var D=E-65536;G+=String.fromCharCode(55296|D>>10,56320|1023&D)}}}(Q,g)}function AB(A){for(var I=\"\";;){var g=E[A++>>0];if(!g)return I;I+=String.fromCharCode(g)}}function AE(A,I){return function A(I,g,B){for(var Q=0;Q<I.length;++Q)E[g++>>0]=I.charCodeAt(Q);B||(E[g>>0]=0)}(A,I,!1)}var AQ=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function AC(A,I,g,B){if(!(B>0))return 0;for(var E=g,Q=g+B-1,C=0;C<A.length;++C){var i=A.charCodeAt(C);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&A.charCodeAt(++C)),i<=127){if(g>=Q)break;I[g++]=i}else if(i<=2047){if(g+1>=Q)break;I[g++]=192|i>>6,I[g++]=128|63&i}else if(i<=65535){if(g+2>=Q)break;I[g++]=224|i>>12,I[g++]=128|i>>6&63,I[g++]=128|63&i}else if(i<=2097151){if(g+3>=Q)break;I[g++]=240|i>>18,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}else if(i<=67108863){if(g+4>=Q)break;I[g++]=248|i>>24,I[g++]=128|i>>18&63,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}else{if(g+5>=Q)break;I[g++]=252|i>>30,I[g++]=128|i>>24&63,I[g++]=128|i>>18&63,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}}return I[g]=0,g-E}function Ai(A,I,g){return AC(A,Q,I,g)}function Ah(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&(B=65536+((1023&B)<<10)|1023&A.charCodeAt(++g)),B<=127?++I:B<=2047?I+=2:B<=65535?I+=3:B<=2097151?I+=4:B<=67108863?I+=5:I+=6}return I}var Ao=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function AG(A){for(var I=A,g=I>>1;C[g];)++g;if((I=g<<1)-A>32&&Ao)return Ao.decode(Q.subarray(A,I));for(var B=0,E=\"\";;){var i=C[A+2*B>>1];if(0==i)return E;++B,E+=String.fromCharCode(i)}}function AD(A,I,g){if(void 0===g&&(g=2147483647),g<2)return 0;for(var B=I,E=(g-=2)<2*A.length?g/2:A.length,Q=0;Q<E;++Q){var i=A.charCodeAt(Q);C[I>>1]=i,I+=2}return C[I>>1]=0,I-B}function Aa(A){return 2*A.length}function AS(A){for(var I=0,g=\"\";;){var B=h[A+4*I>>2];if(0==B)return g;if(++I,B>=65536){var E=B-65536;g+=String.fromCharCode(55296|E>>10,56320|1023&E)}else g+=String.fromCharCode(B)}}function AF(A,I,g){if(void 0===g&&(g=2147483647),g<4)return 0;for(var B=I,E=B+g-4,Q=0;Q<A.length;++Q){var C=A.charCodeAt(Q);if(C>=55296&&C<=57343&&(C=65536+((1023&C)<<10)|1023&A.charCodeAt(++Q)),h[I>>2]=C,(I+=4)+4>E)break}return h[I>>2]=0,I-B}function AR(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&++g,I+=4}return I}function As(A){var I=Ah(A)+1,g=A8(I);return g&&AC(A,E,g,I),g}function Aw(A){var I=Ah(A)+1,g=A5(I);return AC(A,E,g,I),g}function Ay(A){return A}function Ac(){var A,I=function A(){var I=Error();if(!I.stack){try{throw Error(0)}catch(g){I=g}if(!I.stack)return\"(no stack trace available)\"}return I.stack.toString()}();return $.extraStackTrace&&(I+=\"\\n\"+$.extraStackTrace()),(A=I).replace(/__Z[\\w\\d_]+/g,function(A){var I,g=I=A;return A===g?A:A+\" [\"+g+\"]\"})}function An(A,I){return A%I>0&&(A+=I-A%I),A}function AU(A){$.buffer=B=A}function A$(){$.HEAP8=E=new Int8Array(B),$.HEAP16=C=new Int16Array(B),$.HEAP32=h=new Int32Array(B),$.HEAPU8=Q=new Uint8Array(B),$.HEAPU16=i=new Uint16Array(B),$.HEAPU32=o=new Uint32Array(B),$.HEAPF32=G=new Float32Array(B),$.HEAPF64=D=new Float64Array(B)}function Ae(){var A=$.usingWasm?65536:16777216,I=2147483648-A;if(h[c>>2]>I)return!1;var g=AN;for(AN=Math.max(AN,16777216);AN<h[c>>2];)AN=AN<=536870912?An(2*AN,A):Math.min(An((3*AN+2147483648)/4,A),I);var B=$.reallocBuffer(AN);return B&&B.byteLength==AN?(AU(B),A$(),!0):(AN=g,!1)}a=S=R=s=w=y=c=0,F=!1,$.reallocBuffer||($.reallocBuffer=function(A){try{if(ArrayBuffer.transfer)I=ArrayBuffer.transfer(B,A);else{var I,g=E;I=new ArrayBuffer(A),new Int8Array(I).set(g)}}catch(Q){return!1}return!!Az(I)&&I});try{(n=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\"byteLength\").get))(new ArrayBuffer(4))}catch(At){n=function(A){return A.byteLength}}var Ak=$.TOTAL_STACK||5242880,AN=$.TOTAL_MEMORY||16777216;function Ar(){return AN}function AY(A){for(;A.length>0;){var I=A.shift();if(\"function\"==typeof I){I();continue}var g=I.func;\"number\"==typeof g?void 0===I.arg?$.dynCall_v(g):$.dynCall_vi(g,I.arg):g(void 0===I.arg?null:I.arg)}}AN<Ak&&H(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+AN+\"! (TOTAL_STACK=\"+Ak+\")\"),$.buffer?B=$.buffer:(\"object\"==typeof WebAssembly&&\"function\"==typeof WebAssembly.Memory?($.wasmMemory=new WebAssembly.Memory({initial:AN/65536}),B=$.wasmMemory.buffer):B=new ArrayBuffer(AN),$.buffer=B),A$();var AJ=[],Af=[],AH=[],AL=[],AM=[],A0=!1,Ad=!1;function Aq(A){AJ.unshift(A)}function AK(A){Af.unshift(A)}function Al(A){AH.unshift(A)}function Au(A){AL.unshift(A)}function Ab(A){AM.unshift(A)}function AX(A,I,g){var B,Q;K(\"writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!\"),g&&(B=E[Q=I+Ah(A)]),Ai(A,I,1/0),g&&(E[Q]=B)}function Am(A,I,g){return A>=0?A:I<=32?2*Math.abs(1<<I-1)+A:Math.pow(2,I)+A}function AZ(A,I,g){if(A<=0)return A;var B=I<=32?Math.abs(1<<I-1):Math.pow(2,I-1);return A>=B&&(I<=32||A>B)&&(A=-2*B+A),A}var Ax=Math.abs,AV=Math.ceil,A6=Math.floor,Ap=Math.min,A7=0,A1=null,AW=null;function A_(A){return A}$.preloadedImages={},$.preloadedAudios={};var AT=\"data:application/octet-stream;base64,\";function A2(A){return String.prototype.startsWith?A.startsWith(AT):0===A.indexOf(AT)}!function A(){var I=\"main.wast\",g=\"main.wasm\",B=\"main.temp.asm\";A2(I)||(I=J(I)),A2(g)||(g=J(g)),A2(B)||(B=J(B));var E={global:null,env:null,asm2wasm:l,parent:$},Q=null;function C(A){return A}function i(){try{if($.wasmBinary)return new Uint8Array($.wasmBinary);if($.readBinary)return $.readBinary(g);throw\"both async and sync fetching of the wasm failed\"}catch(A){IE(A)}}$.asmPreload=$.asm;var h=$.reallocBuffer,o=function(A){A=An(A,$.usingWasm?65536:16777216);var I=$.buffer.byteLength;if($.usingWasm)try{var g=$.wasmMemory.grow((A-I)/65536);if(-1!==g)return $.buffer=$.wasmMemory.buffer;return null}catch(B){return null}};$.reallocBuffer=function(A){return\"asmjs\"===G?h(A):o(A)};var G=\"\";$.asm=function(A,I,B){var C;if(!(I=C=I).table){var h,o=$.wasmTableSize;void 0===o&&(o=1024);var G=$.wasmMaxTableSize;\"object\"==typeof WebAssembly&&\"function\"==typeof WebAssembly.Table?void 0!==G?I.table=new WebAssembly.Table({initial:o,maximum:G,element:\"anyfunc\"}):I.table=new WebAssembly.Table({initial:o,element:\"anyfunc\"}):I.table=Array(o),$.wasmTable=I.table}return I.memoryBase||(I.memoryBase=$.STATIC_BASE),I.tableBase||(I.tableBase=0),h=function A(I,B,C){if(\"object\"!=typeof WebAssembly)return H(\"no native wasm support detected\"),!1;if(!($.wasmMemory instanceof WebAssembly.Memory))return H(\"no native wasm Memory in use\"),!1;function h(A,I){if((Q=A.exports).memory){var g,B,E;g=Q.memory,B=$.buffer,g.byteLength<B.byteLength&&H(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\"),E=new Int8Array(B),new Int8Array(g).set(E),AU(g),A$()}$.asm=Q,$.usingWasm=!0,function A(I){if(A7--,$.monitorRunDependencies&&$.monitorRunDependencies(A7),0==A7&&(null!==A1&&(clearInterval(A1),A1=null),AW)){var g=AW;AW=null,g()}}(\"wasm-instantiate\")}B.memory=$.wasmMemory,E.global={NaN:NaN,Infinity:1/0},E[\"global.Math\"]=Math,E.env=B;if((A7++,$.monitorRunDependencies&&$.monitorRunDependencies(A7)),$.instantiateWasm)try{return $.instantiateWasm(E,h)}catch(o){return H(\"Module.instantiateWasm callback failed with error: \"+o),!1}function G(A){h(A.instance,A.module)}function D(A){(!$.wasmBinary&&(t||k)&&\"function\"==typeof fetch?fetch(g,{credentials:\"same-origin\"}).then(function(A){if(!A.ok)throw\"failed to load wasm binary file at '\"+g+\"'\";return A.arrayBuffer()}).catch(function(){return i()}):new Promise(function(A,I){A(i())})).then(function(A){return WebAssembly.instantiate(A,E)}).then(A).catch(function(A){H(\"failed to asynchronously prepare wasm: \"+A),IE(A)})}return $.wasmBinary||\"function\"!=typeof WebAssembly.instantiateStreaming||A2(g)||\"function\"!=typeof fetch?D(G):WebAssembly.instantiateStreaming(fetch(g,{credentials:\"same-origin\"}),E).then(G).catch(function(A){H(\"wasm streaming compile failed: \"+A),H(\"falling back to ArrayBuffer instantiation\"),D(G)}),{}}(A,I,B),_(h,\"no binaryen method succeeded.\"),h},$.asm}(),S=(a=1024)+4816,Af.push(),$.STATIC_BASE=a,$.STATIC_BUMP=4816;var Av=S;function AO(A){E[Av]=E[A],E[Av+1]=E[A+1],E[Av+2]=E[A+2],E[Av+3]=E[A+3]}function Aj(A){E[Av]=E[A],E[Av+1]=E[A+1],E[Av+2]=E[A+2],E[Av+3]=E[A+3],E[Av+4]=E[A+4],E[Av+5]=E[A+5],E[Av+6]=E[A+6],E[Av+7]=E[A+7]}function AP(A,I,g){var B=g>0?g:Ah(A)+1,E=Array(B),Q=AC(A,E,0,E.length);return I&&(E.length=Q),E}function A4(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(B&=255),I.push(String.fromCharCode(B))}return I.join(\"\")}S+=16,c=L(4),w=(R=s=d(S))+Ak,y=d(w),h[c>>2]=y,F=!0,$.wasmTableSize=4,$.wasmMaxTableSize=4,$.asmGlobalArg={},$.asmLibraryArg={abort:IE,assert:_,enlargeMemory:Ae,getTotalMemory:Ar,abortOnCannotGrowMemory:function A(){IE(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \"+AN+\", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")},invoke_iii:function A(I,g,B){var E=IA();try{return $.dynCall_iii(I,g,B)}catch(Q){if(A9(E),\"number\"!=typeof Q&&\"longjmp\"!==Q)throw Q;$.setThrew(1,0)}},___assert_fail:function A(I,g,B,E){IE(\"Assertion failed: \"+Ag(I)+\", at: \"+[g?Ag(g):\"unknown filename\",B,E?Ag(E):\"unknown function\",])},___setErrNo:function A(I){return $.___errno_location&&(h[$.___errno_location()>>2]=I),I},_abort:function A(){$.abort()},_emscripten_memcpy_big:function A(I,g,B){return Q.set(Q.subarray(g,g+B),I),I},_llvm_floor_f64:A6,DYNAMICTOP_PTR:c,tempDoublePtr:Av,ABORT:p,STACKTOP:s,STACK_MAX:w};var A3=$.asm($.asmGlobalArg,$.asmLibraryArg,B);$.asm=A3,$.___errno_location=function(){return $.asm.___errno_location.apply(null,arguments)};var Az=$._emscripten_replace_memory=function(){return $.asm._emscripten_replace_memory.apply(null,arguments)};$._free=function(){return $.asm._free.apply(null,arguments)};var A8=$._malloc=function(){return $.asm._malloc.apply(null,arguments)};$._memcpy=function(){return $.asm._memcpy.apply(null,arguments)},$._memset=function(){return $.asm._memset.apply(null,arguments)},$._sbrk=function(){return $.asm._sbrk.apply(null,arguments)},$._stb_vorbis_js_channels=function(){return $.asm._stb_vorbis_js_channels.apply(null,arguments)},$._stb_vorbis_js_close=function(){return $.asm._stb_vorbis_js_close.apply(null,arguments)},$._stb_vorbis_js_decode=function(){return $.asm._stb_vorbis_js_decode.apply(null,arguments)},$._stb_vorbis_js_open=function(){return $.asm._stb_vorbis_js_open.apply(null,arguments)},$._stb_vorbis_js_sample_rate=function(){return $.asm._stb_vorbis_js_sample_rate.apply(null,arguments)},$.establishStackSpace=function(){return $.asm.establishStackSpace.apply(null,arguments)},$.getTempRet0=function(){return $.asm.getTempRet0.apply(null,arguments)},$.runPostSets=function(){return $.asm.runPostSets.apply(null,arguments)},$.setTempRet0=function(){return $.asm.setTempRet0.apply(null,arguments)},$.setThrew=function(){return $.asm.setThrew.apply(null,arguments)};var A5=$.stackAlloc=function(){return $.asm.stackAlloc.apply(null,arguments)},A9=$.stackRestore=function(){return $.asm.stackRestore.apply(null,arguments)},IA=$.stackSave=function(){return $.asm.stackSave.apply(null,arguments)};function II(A){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+A+\")\",this.status=A}function Ig(A){if(A=A||$.arguments,!(A7>0))!function A(){if($.preRun)for(\"function\"==typeof $.preRun&&($.preRun=[$.preRun]);$.preRun.length;)Aq($.preRun.shift());AY(AJ)}(),!(A7>0)&&($.calledRun||($.setStatus?($.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){$.setStatus(\"\")},1),I()},1)):I()));function I(){!$.calledRun&&($.calledRun=!0,p||(A0||(A0=!0,AY(Af)),AY(AH),$.onRuntimeInitialized&&$.onRuntimeInitialized(),function A(){if($.postRun)for(\"function\"==typeof $.postRun&&($.postRun=[$.postRun]);$.postRun.length;)Ab($.postRun.shift());AY(AM)}()))}}function IB(A,I){(!I||!$.noExitRuntime||0!==A)&&($.noExitRuntime||(p=!0,W=A,s=U,AY(AL),Ad=!0,$.onExit&&$.onExit(A)),$.quit(A,new II(A)))}function IE(A){throw $.onAbort&&$.onAbort(A),void 0!==A?(f(A),H(A),A=JSON.stringify(A)):A=\"\",p=!0,W=1,\"abort(\"+A+\"). Build with -s ASSERTIONS=1 for more info.\"}if($.dynCall_iii=function(){return $.asm.dynCall_iii.apply(null,arguments)},$.asm=A3,$.ccall=j,$.cwrap=function A(I,g,B,E){var Q=(B=B||[]).every(function(A){return\"number\"===A});return\"string\"!==g&&Q&&!E?T(I):function(){return j(I,g,B,arguments,E)}},II.prototype=Error(),II.prototype.constructor=II,AW=function A(){$.calledRun||Ig(),$.calledRun||(AW=A)},$.run=Ig,$.abort=IE,$.preInit)for(\"function\"==typeof $.preInit&&($.preInit=[$.preInit]);$.preInit.length>0;)$.preInit.pop()();$.noExitRuntime=!0,Ig(),$.onRuntimeInitialized=()=>{isReady=!0,readySolver()},stbvorbis.decode=function(A){return function A(I){if(!isReady)throw Error(\"SF3 decoder has not been initialized yet. Did you await synth.isReady?\");var g={};function B(A){return new Int32Array($.HEAPU8.buffer,A,1)[0]}function E(A,I){var g=new ArrayBuffer(I*Float32Array.BYTES_PER_ELEMENT),B=new Float32Array(g);return B.set(new Float32Array($.HEAPU8.buffer,A,I)),B}g.open=$.cwrap(\"stb_vorbis_js_open\",\"number\",[]),g.close=$.cwrap(\"stb_vorbis_js_close\",\"void\",[\"number\"]),g.channels=$.cwrap(\"stb_vorbis_js_channels\",\"number\",[\"number\"]),g.sampleRate=$.cwrap(\"stb_vorbis_js_sample_rate\",\"number\",[\"number\"]),g.decode=$.cwrap(\"stb_vorbis_js_decode\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]);var Q,C,i,h,o=g.open(),G=(Q=I,C=I.byteLength,i=$._malloc(C),(h=new Uint8Array($.HEAPU8.buffer,i,C)).set(new Uint8Array(Q,0,C)),h),D=$._malloc(4),a=$._malloc(4),S=g.decode(o,G.byteOffset,G.byteLength,D,a);if($._free(G.byteOffset),S<0)throw g.close(o),$._free(D),Error(\"stbvorbis decode failed: \"+S);for(var F=g.channels(o),R=Array(F),s=new Int32Array($.HEAPU32.buffer,B(D),F),w=0;w<F;w++)R[w]=E(s[w],S),$._free(s[w]);var y=g.sampleRate(o);return g.close(o),$._free(B(D)),$._free(D),{data:R,sampleRate:y,eof:!0,error:null}}(A)}}();", "import { stbvorbis } from \"./stbvorbis_sync.min\";\n\ninterface DecodedData {\n    data: Float32Array[];\n    error: string | null;\n    sampleRate: number;\n    eof: boolean;\n}\n\ninterface stbvorbisType {\n    decode: (buffer: Uint8Array | ArrayBuffer) => DecodedData;\n    isInitialized: Promise<boolean>;\n}\n\nconst stb: stbvorbisType = stbvorbis as stbvorbisType;\n\nexport { stb as stbvorbis };\n", "/**\n * Unit_converter.ts\n * purpose: converts soundfont units into more usable values with the use of lookup tables to improve performance\n */\n\n// Timecent lookup table\nconst MIN_TIMECENT = -15000;\nconst MAX_TIMECENT = 15000;\nconst timecentLookupTable = new Float32Array(MAX_TIMECENT - MIN_TIMECENT + 1);\nfor (let i = 0; i < timecentLookupTable.length; i++) {\n    const timecents = MIN_TIMECENT + i;\n    timecentLookupTable[i] = Math.pow(2, timecents / 1200);\n}\n\n/**\n * Converts timecents to seconds.\n * @param timecents The timecents value.\n * @returns The time in seconds.\n */\nexport function timecentsToSeconds(timecents: number): number {\n    if (timecents <= -32767) {\n        return 0;\n    }\n    return timecentLookupTable[timecents - MIN_TIMECENT];\n}\n\n// Abs cent lookup table\nconst MIN_ABS_CENT = -20000; // FreqVibLfo\nconst MAX_ABS_CENT = 16500; // FilterFc\nconst absoluteCentLookupTable = new Float32Array(\n    MAX_ABS_CENT - MIN_ABS_CENT + 1\n);\nfor (let i = 0; i < absoluteCentLookupTable.length; i++) {\n    const absoluteCents = MIN_ABS_CENT + i;\n    absoluteCentLookupTable[i] =\n        440 * Math.pow(2, (absoluteCents - 6900) / 1200);\n}\n\n/**\n * Converts absolute cents to frequency in Hz.\n * @param cents The absolute cents value.\n * @returns The frequency in Hz.\n */\nexport function absCentsToHz(cents: number): number {\n    if (cents < MIN_ABS_CENT || cents > MAX_ABS_CENT) {\n        return 440 * Math.pow(2, (cents - 6900) / 1200);\n    }\n    return absoluteCentLookupTable[~~cents - MIN_ABS_CENT];\n}\n\n// Decibel lookup table (2 points of precision)\nconst MIN_DECIBELS = -1660;\nconst MAX_DECIBELS = 1600;\nconst decibelLookUpTable = new Float32Array(\n    (MAX_DECIBELS - MIN_DECIBELS) * 100 + 1\n);\nfor (let i = 0; i < decibelLookUpTable.length; i++) {\n    const decibels = (MIN_DECIBELS * 100 + i) / 100;\n    decibelLookUpTable[i] = Math.pow(10, -decibels / 20);\n}\n\n/**\n * Converts decibel attenuation to gain.\n * @param decibels The decibel value.\n * @return The gain value.\n */\nexport function decibelAttenuationToGain(decibels: number): number {\n    return decibelLookUpTable[Math.floor((decibels - MIN_DECIBELS) * 100)];\n}\n", "import { decibelAttenuationToGain, timecentsToSeconds } from \"../unit_converter\";\nimport type { Voice } from \"../voice\";\nimport { generatorTypes } from \"../../../../soundbank/basic_soundbank/generator_types\";\n\n/**\n * Volume_envelope.ts\n * purpose: applies a volume envelope for a given voice\n */\n\nexport const VOLUME_ENVELOPE_SMOOTHING_FACTOR = 0.01;\n\nconst DB_SILENCE = 100;\nconst PERCEIVED_DB_SILENCE = 90;\n// Around 96 dB of attenuation\nconst PERCEIVED_GAIN_SILENCE = 0.000015; // Can't go lower than that (see #50)\n\n/**\n * VOL ENV STATES:\n * 0 - delay\n * 1 - attack\n * 2 - hold/peak\n * 3 - decay\n * 4 - sustain\n * release indicates by isInRelease property\n */\ntype VolumeEnvelopeState = 0 | 1 | 2 | 3 | 4;\n\nexport class VolumeEnvelope {\n    /**\n     * The sample rate in Hz.\n     */\n    public sampleRate: number;\n    /**\n     * The current attenuation of the envelope in dB.\n     */\n    public currentAttenuationDb: number = DB_SILENCE;\n    /**\n     * The current stage of the volume envelope.\n     */\n    public state: VolumeEnvelopeState = 0;\n    /**\n     * The voice's absolute attenuation as linear gain.\n     */\n    public attenuation = 0;\n    /**\n     * The attenuation target, which the \"attenuation\" property is linearly interpolated towards (gain).\n     */\n    public attenuationTargetGain = 0;\n    /**\n     * The envelope's current time in samples.\n     */\n    protected currentSampleTime = 0;\n    /**\n     * The dB attenuation of the envelope when it entered the release stage.\n     */\n    protected releaseStartDb: number = DB_SILENCE;\n    /**\n     * The time in samples relative to the start of the envelope.\n     */\n    protected releaseStartTimeSamples = 0;\n    /**\n     * The current gain applied to the voice in the release stage.\n     */\n    protected currentReleaseGain = 1;\n    /**\n     * The attack duration in samples.\n     */\n    protected attackDuration = 0;\n    /**\n     * The decay duration in samples.\n     */\n    protected decayDuration = 0;\n    /**\n     * The release duration in samples.\n     */\n    protected releaseDuration = 0;\n    /**\n     * The attenuation target, which the \"attenuation\" property is linearly interpolated towards (dB).\n     */\n    protected attenuationTarget = 0;\n    /**\n     * The voice's sustain amount in dB, relative to attenuation.\n     */\n    protected sustainDbRelative = 0;\n    /**\n     * The time in samples to the end of delay stage, relative to the start of the envelope.\n     */\n    protected delayEnd = 0;\n    /**\n     * The time in samples to the end of attack stage, relative to the start of the envelope.\n     */\n    protected attackEnd = 0;\n    /**\n     * The time in samples to the end of hold stage, relative to the start of the envelope.\n     */\n    protected holdEnd = 0;\n    /**\n     * The time in samples to the end of decay stage, relative to the start of the envelope.\n     */\n    protected decayEnd = 0;\n\n    /**\n     * If sustain stage is silent,\n     * then we can turn off the voice when it is silent.\n     * We can't do that with modulated as it can silence the volume and then raise it again, and the voice must keep playing.\n     */\n    protected canEndOnSilentSustain: boolean;\n\n    /**\n     * @param sampleRate Hz\n     * @param initialDecay cb\n     */\n    public constructor(sampleRate: number, initialDecay: number) {\n        this.sampleRate = sampleRate;\n        this.canEndOnSilentSustain = initialDecay / 10 >= PERCEIVED_DB_SILENCE;\n    }\n\n    /**\n     * Starts the release phase in the envelope.\n     * @param voice the voice this envelope belongs to.\n     */\n    public static startRelease(voice: Voice) {\n        voice.volumeEnvelope.releaseStartTimeSamples =\n            voice.volumeEnvelope.currentSampleTime;\n        voice.volumeEnvelope.currentReleaseGain = decibelAttenuationToGain(\n            voice.volumeEnvelope.currentAttenuationDb\n        );\n        VolumeEnvelope.recalculate(voice);\n    }\n\n    /**\n     * Recalculates the envelope\n     * @param voice the voice this envelope belongs to\n     */\n    public static recalculate(voice: Voice) {\n        const env = voice.volumeEnvelope;\n        const timecentsToSamples = (tc: number) => {\n            return Math.max(\n                0,\n                Math.floor(timecentsToSeconds(tc) * env.sampleRate)\n            );\n        };\n        // Calculate absolute times (they can change so we have to recalculate every time\n        env.attenuationTarget =\n            Math.max(\n                0,\n                Math.min(\n                    voice.modulatedGenerators[\n                        generatorTypes.initialAttenuation\n                    ],\n                    1440\n                )\n            ) / 10; // Divide by ten to get decibels\n        env.attenuationTargetGain = decibelAttenuationToGain(\n            env.attenuationTarget\n        );\n        env.sustainDbRelative = Math.min(\n            DB_SILENCE,\n            voice.modulatedGenerators[generatorTypes.sustainVolEnv] / 10\n        );\n        const sustainDb = Math.min(DB_SILENCE, env.sustainDbRelative);\n\n        // Calculate durations\n        env.attackDuration = timecentsToSamples(\n            voice.modulatedGenerators[generatorTypes.attackVolEnv]\n        );\n\n        // Decay: sf spec page 35: the time is for change from attenuation to -100dB,\n        // Therefore, we need to calculate the real time\n        // (changing from attenuation to sustain instead of -100dB)\n        const fullChange =\n            voice.modulatedGenerators[generatorTypes.decayVolEnv];\n        const keyNumAddition =\n            (60 - voice.targetKey) *\n            voice.modulatedGenerators[generatorTypes.keyNumToVolEnvDecay];\n        const fraction = sustainDb / DB_SILENCE;\n        env.decayDuration =\n            timecentsToSamples(fullChange + keyNumAddition) * fraction;\n\n        // Min is set to -7200 prevent clicks\n        env.releaseDuration = timecentsToSamples(\n            Math.max(\n                -7200,\n                voice.modulatedGenerators[generatorTypes.releaseVolEnv]\n            )\n        );\n\n        // Calculate absolute end times for the values\n        env.delayEnd = timecentsToSamples(\n            voice.modulatedGenerators[generatorTypes.delayVolEnv]\n        );\n        env.attackEnd = env.attackDuration + env.delayEnd;\n\n        // Make sure to take keyNumToVolEnvHold into account!\n        const holdExcursion =\n            (60 - voice.targetKey) *\n            voice.modulatedGenerators[generatorTypes.keyNumToVolEnvHold];\n        env.holdEnd =\n            timecentsToSamples(\n                voice.modulatedGenerators[generatorTypes.holdVolEnv] +\n                    holdExcursion\n            ) + env.attackEnd;\n\n        env.decayEnd = env.decayDuration + env.holdEnd;\n\n        // If this is the first recalculation and the voice has no attack or delay time, set current db to peak\n        if (env.state === 0 && env.attackEnd === 0) {\n            // Env.currentAttenuationDb = env.attenuationTarget;\n            env.state = 2;\n        }\n\n        // Check if voice is in release\n        if (voice.isInRelease) {\n            // No interpolation this time: force update to actual attenuation and calculate release start from there\n            //Env.attenuation = Math.min(DB_SILENCE, env.attenuationTarget);\n            const sustainDb = Math.max(\n                0,\n                Math.min(DB_SILENCE, env.sustainDbRelative)\n            );\n            const fraction = sustainDb / DB_SILENCE;\n            env.decayDuration =\n                timecentsToSamples(fullChange + keyNumAddition) * fraction;\n\n            switch (env.state) {\n                case 0:\n                    env.releaseStartDb = DB_SILENCE;\n                    break;\n\n                case 1: {\n                    // Attack phase: get linear gain of the attack phase when release started\n                    // And turn it into db as we're ramping the db up linearly\n                    // (to make volume go down exponentially)\n                    // Attack is linear (in gain) so we need to do get db from that\n                    const elapsed =\n                        1 -\n                        (env.attackEnd - env.releaseStartTimeSamples) /\n                            env.attackDuration;\n                    // Calculate the gain that the attack would have, so\n                    // Turn that into db\n                    env.releaseStartDb = 20 * Math.log10(elapsed) * -1;\n                    break;\n                }\n\n                case 2:\n                    env.releaseStartDb = 0;\n                    break;\n\n                case 3:\n                    env.releaseStartDb =\n                        (1 -\n                            (env.decayEnd - env.releaseStartTimeSamples) /\n                                env.decayDuration) *\n                        sustainDb;\n                    break;\n\n                case 4:\n                    env.releaseStartDb = sustainDb;\n                    break;\n            }\n            env.releaseStartDb = Math.max(\n                0,\n                Math.min(env.releaseStartDb, DB_SILENCE)\n            );\n            if (env.releaseStartDb >= PERCEIVED_DB_SILENCE) {\n                voice.finished = true;\n            }\n            env.currentReleaseGain = decibelAttenuationToGain(\n                env.releaseStartDb\n            );\n\n            // Release: sf spec page 35: the time is for change from attenuation to -100dB,\n            // Therefore, we need to calculate the real time\n            // (changing from release start to -100dB instead of from peak to -100dB)\n            const releaseFraction =\n                (DB_SILENCE - env.releaseStartDb) / DB_SILENCE;\n            env.releaseDuration *= releaseFraction;\n        }\n    }\n\n    /**\n     * Applies volume envelope gain to the given output buffer.\n     * Essentially we use approach of 100dB is silence, 0dB is peak, and always add attenuation to that (which is interpolated).\n     * @param voice the voice we're working on\n     * @param audioBuffer the audio buffer to modify\n     * @param centibelOffset the centibel offset of volume, for modLFOtoVolume\n     * @param smoothingFactor the adjusted smoothing factor for the envelope\n     */\n    public static apply(\n        voice: Voice,\n        audioBuffer: Float32Array,\n        centibelOffset: number,\n        smoothingFactor: number\n    ) {\n        const env = voice.volumeEnvelope;\n        const decibelOffset = centibelOffset / 10;\n\n        const attenuationSmoothing = smoothingFactor;\n\n        // RELEASE PHASE\n        if (voice.isInRelease) {\n            let elapsedRelease =\n                env.currentSampleTime - env.releaseStartTimeSamples;\n            if (elapsedRelease >= env.releaseDuration) {\n                for (let i = 0; i < audioBuffer.length; i++) {\n                    audioBuffer[i] = 0;\n                }\n                voice.finished = true;\n                return;\n            }\n            const dbDifference = DB_SILENCE - env.releaseStartDb;\n            for (let i = 0; i < audioBuffer.length; i++) {\n                // Attenuation interpolation\n                env.attenuation +=\n                    (env.attenuationTargetGain - env.attenuation) *\n                    attenuationSmoothing;\n                const db =\n                    (elapsedRelease / env.releaseDuration) * dbDifference +\n                    env.releaseStartDb;\n                env.currentReleaseGain =\n                    env.attenuation *\n                    decibelAttenuationToGain(db + decibelOffset);\n                audioBuffer[i] *= env.currentReleaseGain;\n                env.currentSampleTime++;\n                elapsedRelease++;\n            }\n\n            if (env.currentReleaseGain <= PERCEIVED_GAIN_SILENCE) {\n                voice.finished = true;\n            }\n            return;\n        }\n\n        let filledBuffer = 0;\n        switch (env.state) {\n            case 0:\n                // Delay phase, no sound is produced\n                while (env.currentSampleTime < env.delayEnd) {\n                    env.currentAttenuationDb = DB_SILENCE;\n                    audioBuffer[filledBuffer] = 0;\n\n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length) {\n                        return;\n                    }\n                }\n                env.state++;\n            // Fallthrough\n\n            case 1:\n                // Attack phase: ramp from 0 to attenuation\n                while (env.currentSampleTime < env.attackEnd) {\n                    // Attenuation interpolation\n                    env.attenuation +=\n                        (env.attenuationTargetGain - env.attenuation) *\n                        attenuationSmoothing;\n\n                    // Special case: linear gain ramp instead of linear db ramp\n                    const linearAttenuation =\n                        1 -\n                        (env.attackEnd - env.currentSampleTime) /\n                            env.attackDuration; // 0 to 1\n                    audioBuffer[filledBuffer] *=\n                        linearAttenuation *\n                        env.attenuation *\n                        decibelAttenuationToGain(decibelOffset);\n                    // Set current attenuation to peak as its invalid during this phase\n                    env.currentAttenuationDb = 0;\n\n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length) {\n                        return;\n                    }\n                }\n                env.state++;\n            // Fallthrough\n\n            case 2:\n                // Hold/peak phase: stay at attenuation\n                while (env.currentSampleTime < env.holdEnd) {\n                    // Attenuation interpolation\n                    env.attenuation +=\n                        (env.attenuationTargetGain - env.attenuation) *\n                        attenuationSmoothing;\n\n                    audioBuffer[filledBuffer] *=\n                        env.attenuation *\n                        decibelAttenuationToGain(decibelOffset);\n                    env.currentAttenuationDb = 0;\n\n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length) {\n                        return;\n                    }\n                }\n                env.state++;\n            // Fallthrough\n\n            case 3:\n                // Decay phase: linear ramp from attenuation to sustain\n                while (env.currentSampleTime < env.decayEnd) {\n                    // Attenuation interpolation\n                    env.attenuation +=\n                        (env.attenuationTargetGain - env.attenuation) *\n                        attenuationSmoothing;\n\n                    env.currentAttenuationDb =\n                        (1 -\n                            (env.decayEnd - env.currentSampleTime) /\n                                env.decayDuration) *\n                        env.sustainDbRelative;\n                    audioBuffer[filledBuffer] *=\n                        env.attenuation *\n                        decibelAttenuationToGain(\n                            env.currentAttenuationDb + decibelOffset\n                        );\n\n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length) {\n                        return;\n                    }\n                }\n                env.state++;\n            // Fallthrough\n\n            case 4:\n                if (\n                    env.canEndOnSilentSustain &&\n                    env.sustainDbRelative >= PERCEIVED_DB_SILENCE\n                ) {\n                    voice.finished = true;\n                }\n                // Sustain phase: stay at sustain\n                while (true) {\n                    // Attenuation interpolation\n                    env.attenuation +=\n                        (env.attenuationTargetGain - env.attenuation) *\n                        attenuationSmoothing;\n\n                    audioBuffer[filledBuffer] *=\n                        env.attenuation *\n                        decibelAttenuationToGain(\n                            env.sustainDbRelative + decibelOffset\n                        );\n                    env.currentAttenuationDb = env.sustainDbRelative;\n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length) {\n                        return;\n                    }\n                }\n        }\n    }\n}\n", "import { SpessaSynthProcessor } from \"../../../processor\";\nimport type { MasterParameterChangeCallback, MasterParameterType } from \"../../../types\";\n\n/**\n * Sets a master parameter of the synthesizer.\n * @param parameter The type of the master parameter to set.\n * @param value The value to set for the master parameter.\n */\nexport function setMasterParameterInternal<P extends keyof MasterParameterType>(\n    this: SpessaSynthProcessor,\n    parameter: P,\n    value: MasterParameterType[P]\n) {\n    this.privateProps.masterParameters[parameter] = value;\n    // Additional handling for specific parameters\n    switch (parameter) {\n        case \"masterPan\": {\n            let pan = value as number;\n            // Clamp to 0-1 (0 is left)\n            pan = pan / 2 + 0.5;\n            this.privateProps.panLeft = 1 - pan;\n            this.privateProps.panRight = pan;\n            break;\n        }\n\n        case \"masterGain\":\n            break;\n\n        case \"voiceCap\":\n            break;\n\n        case \"interpolationType\":\n            break;\n\n        case \"midiSystem\":\n            break;\n\n        case \"monophonicRetriggerMode\":\n            break;\n\n        case \"transposition\": {\n            const semitones = value as number;\n            // Reset transposition temporarily\n            this.privateProps.masterParameters.transposition = 0;\n            for (const item of this.midiChannels) {\n                item.transposeChannel(semitones);\n            }\n            this.privateProps.masterParameters.transposition = semitones;\n        }\n    }\n    this.callEvent(\"masterParameterChange\", {\n        parameter,\n        value\n    } as MasterParameterChangeCallback);\n}\n\n/**\n * Gets a master parameter of the synthesizer.\n * @param type The type of the master parameter to get.\n * @returns The value of the master parameter.\n */\nexport function getMasterParameterInternal<P extends keyof MasterParameterType>(\n    this: SpessaSynthProcessor,\n    type: P\n): MasterParameterType[P] {\n    return this.privateProps.masterParameters[type];\n}\n\n/**\n * Gets all master parameters of the synthesizer.\n * @returns All the master parameters.\n */\nexport function getAllMasterParametersInternal(\n    this: SpessaSynthProcessor\n): MasterParameterType {\n    return { ...this.privateProps.masterParameters };\n}\n", "/**\n * Converts a given bit to boolean.\n * @param num The input number.\n * @param bit The index of the bit to convert into bool.\n */\nexport function bitMaskToBool(num: number, bit: number) {\n    return ((num >> bit) & 1) > 0;\n}\n\nexport function toNumericBool(bool: boolean) {\n    return bool ? 1 : 0;\n}\n", "/**\n * Modulator_curves.ts\n * precomputes modulator concave and convex curves and calculates a curve value for a given polarity, direction and type\n */\nimport {\n    type ModulatorCurveType,\n    modulatorCurveTypes\n} from \"../../../soundbank/enums\";\n\n// The length of the precomputed curve tables\nexport const MODULATOR_RESOLUTION = 16384;\n\nexport const MOD_CURVE_TYPES_AMOUNT = Object.keys(modulatorCurveTypes).length;\n/**\n * Unipolar positive\n * unipolar negative\n * bipolar positive\n * bipolar negative\n * that's 4\n */\nexport const MOD_SOURCE_TRANSFORM_POSSIBILITIES = 4;\n\n// Precalculate lookup tables for concave and convex curves\nconst concave = new Float32Array(MODULATOR_RESOLUTION + 1);\nconst convex = new Float32Array(MODULATOR_RESOLUTION + 1);\n// The equation is taken from FluidSynth as it's the standard for soundFonts\n// More precisely, the gen_conv.c file\nconcave[0] = 0;\nconcave[concave.length - 1] = 1;\n\nconvex[0] = 0;\nconvex[convex.length - 1] = 1;\nfor (let i = 1; i < MODULATOR_RESOLUTION - 1; i++) {\n    const x =\n        (((-200 * 2) / 960) * Math.log(i / (concave.length - 1))) / Math.LN10;\n    convex[i] = 1 - x;\n    concave[concave.length - 1 - i] = x;\n}\n\n/**\n * Transforms a value with a given curve type\n * @param transformType the bipolar and negative flags as a 2-bit number: 0bPD (polarity MSB, direction LSB)\n * @param curveType enumeration of curve types\n * @param value the linear value, 0 to 1\n * @returns the transformed value, 0 to 1, or -1 to 1\n */\nexport function getModulatorCurveValue(\n    transformType: number,\n    curveType: ModulatorCurveType,\n    value: number\n): number {\n    const isBipolar = !!(transformType & 0b10);\n    const isNegative = !!(transformType & 1);\n\n    // Inverse the value if needed\n    if (isNegative) {\n        value = 1 - value;\n    }\n    switch (curveType) {\n        case modulatorCurveTypes.linear:\n            if (isBipolar) {\n                // Bipolar curve\n                return value * 2 - 1;\n            }\n            return value;\n\n        case modulatorCurveTypes.switch:\n            // Switch\n            value = value > 0.5 ? 1 : 0;\n            if (isBipolar) {\n                // Multiply\n                return value * 2 - 1;\n            }\n            return value;\n\n        case modulatorCurveTypes.concave:\n            // Look up the value\n            if (isBipolar) {\n                value = value * 2 - 1;\n                if (value < 0) {\n                    return -concave[~~(value * -MODULATOR_RESOLUTION)];\n                }\n                return concave[~~(value * MODULATOR_RESOLUTION)];\n            }\n            return concave[~~(value * MODULATOR_RESOLUTION)];\n\n        case modulatorCurveTypes.convex:\n            // Look up the value\n            if (isBipolar) {\n                value = value * 2 - 1;\n                if (value < 0) {\n                    return -convex[~~(value * -MODULATOR_RESOLUTION)];\n                }\n                return convex[~~(value * MODULATOR_RESOLUTION)];\n            }\n            return convex[~~(value * MODULATOR_RESOLUTION)];\n    }\n}\n", "import type { ModulatorSourceIndex } from \"../types\";\nimport {\n    type ModulatorCurveType,\n    modulatorCurveTypes,\n    modulatorSources\n} from \"../enums\";\nimport {\n    bitMaskToBool,\n    toNumericBool\n} from \"../../utils/byte_functions/bit_mask\";\nimport {\n    getModulatorCurveValue,\n    MOD_CURVE_TYPES_AMOUNT,\n    MOD_SOURCE_TRANSFORM_POSSIBILITIES,\n    MODULATOR_RESOLUTION\n} from \"../../synthesizer/audio_engine/engine_components/modulator_curves\";\nimport type { Voice } from \"../../synthesizer/audio_engine/engine_components/voice\";\nimport { NON_CC_INDEX_OFFSET } from \"../../synthesizer/audio_engine/engine_components/controller_tables\";\nimport { midiControllers } from \"../../midi/enums\";\n\nexport class ModulatorSource {\n    /**\n     * If this field is set to false, the controller should be mapped with a minimum value of 0 and a maximum value of 1. This is also\n     * called Unipolar. Thus, it behaves similar to the Modulation Wheel controller of the MIDI specification.\n     *\n     * If this field is set to true, the controller sound be mapped with a minimum value of -1 and a maximum value of 1. This is also\n     * called Bipolar. Thus, it behaves similar to the Pitch Wheel controller of the MIDI specification.\n     */\n    public isBipolar;\n    /**\n     * If this field is set true, the direction of the controller should be from the maximum value to the minimum value. So, for\n     * example, if the controller source is Key Number, then a Key Number value of 0 corresponds to the maximum possible\n     * controller output, and the Key Number value of 127 corresponds to the minimum possible controller input.\n     */\n    public isNegative;\n\n    /**\n     * The index of the source.\n     * It can point to one of the MIDI controllers or one of the predefined sources, depending on the 'isCC' flag.\n     */\n    public index: ModulatorSourceIndex;\n\n    /**\n     * If this field is set to true, the MIDI Controller Palette is selected. The ‘index’ field value corresponds to one of the 128\n     * MIDI Continuous Controller messages as defined in the MIDI specification.\n     */\n    public isCC;\n\n    /**\n     * This field specifies how the minimum value approaches the maximum value.\n     */\n    public curveType: ModulatorCurveType;\n\n    public constructor(\n        index: ModulatorSourceIndex = modulatorSources.noController,\n        curveType: ModulatorCurveType = modulatorCurveTypes.linear,\n        isCC = false,\n        isBipolar = false,\n        isNegative = false\n    ) {\n        this.isBipolar = isBipolar;\n        this.isNegative = isNegative;\n        this.index = index;\n        this.isCC = isCC;\n        this.curveType = curveType;\n    }\n\n    private get sourceName() {\n        return this.isCC\n            ? (Object.keys(midiControllers).find(\n                  (k) =>\n                      midiControllers[k as keyof typeof midiControllers] ===\n                      this.index\n              ) ?? this.index.toString())\n            : (Object.keys(modulatorSources).find(\n                  (k) =>\n                      modulatorSources[k as keyof typeof modulatorSources] ===\n                      this.index\n              ) ?? this.index.toString());\n    }\n\n    private get curveTypeName() {\n        return (\n            Object.keys(modulatorCurveTypes).find(\n                (k) =>\n                    modulatorCurveTypes[\n                        k as keyof typeof modulatorCurveTypes\n                    ] === this.curveType\n            ) ?? this.curveType.toString()\n        );\n    }\n\n    public static fromSourceEnum(sourceEnum: number) {\n        const isBipolar = bitMaskToBool(sourceEnum, 9);\n        const isNegative = bitMaskToBool(sourceEnum, 8);\n        const isCC = bitMaskToBool(sourceEnum, 7);\n        const index = (sourceEnum & 127) as ModulatorSourceIndex;\n        const curveType = ((sourceEnum >> 10) & 0x3) as ModulatorCurveType;\n        return new ModulatorSource(\n            index,\n            curveType,\n            isCC,\n            isBipolar,\n            isNegative\n        );\n    }\n\n    /**\n     * Copies the modulator source.\n     * @param source The source to copy from.\n     * @returns the copied source.\n     */\n    public static copyFrom(source: ModulatorSource) {\n        return new ModulatorSource(\n            source.index,\n            source.curveType,\n            source.isCC,\n            source.isBipolar,\n            source.isNegative\n        );\n    }\n\n    public toString() {\n        return `${this.sourceName} ${this.curveTypeName} ${this.isBipolar ? \"bipolar\" : \"unipolar\"} ${this.isNegative ? \"negative\" : \"positive\"}`;\n    }\n\n    public toSourceEnum() {\n        return (\n            (this.curveType << 10) |\n            (toNumericBool(this.isBipolar) << 9) |\n            (toNumericBool(this.isNegative) << 8) |\n            (toNumericBool(this.isCC) << 7) |\n            this.index\n        );\n    }\n\n    public isIdentical(source: ModulatorSource) {\n        return (\n            this.index === source.index &&\n            this.isNegative === source.isNegative &&\n            this.isCC === source.isCC &&\n            this.isBipolar === source.isBipolar &&\n            this.curveType === source.curveType\n        );\n    }\n\n    /**\n     * Gets the current value from this source.\n     * @param midiControllers The MIDI controller + modulator source array.\n     * @param voice The voice to get the data for.\n     */\n    public getValue(midiControllers: Int16Array, voice: Voice) {\n        // The raw 14-bit value (0 - 16,383)\n        let rawValue;\n        if (this.isCC) {\n            rawValue = midiControllers[this.index];\n        } else {\n            switch (this.index) {\n                case modulatorSources.noController:\n                    rawValue = 16383; // Equals to 1\n                    break;\n\n                case modulatorSources.noteOnKeyNum:\n                    rawValue = voice.midiNote << 7;\n                    break;\n\n                case modulatorSources.noteOnVelocity:\n                    rawValue = voice.velocity << 7;\n                    break;\n\n                case modulatorSources.polyPressure:\n                    rawValue = voice.pressure << 7;\n                    break;\n\n                default:\n                    rawValue =\n                        midiControllers[this.index + NON_CC_INDEX_OFFSET]; // Pitch wheel and range are stored in the cc table\n                    break;\n            }\n        }\n\n        // Transform the value\n        // 2-bit number as in 0bPD\n        const transformType =\n            (this.isBipolar ? 0b10 : 0b00) | (this.isNegative ? 1 : 0);\n\n        return precomputedTransforms[\n            MODULATOR_RESOLUTION *\n                (this.curveType * MOD_CURVE_TYPES_AMOUNT + transformType) +\n                rawValue\n        ];\n    }\n}\n\n/**\n * To get the value, you do\n * MODULATOR_RESOLUTION * (MOD_CURVE_TYPES_AMOUNT * curveType + transformType) + your raw value as 14-bit number (0 - 16,383)\n */\nconst precomputedTransforms = new Float32Array(\n    MODULATOR_RESOLUTION *\n        MOD_SOURCE_TRANSFORM_POSSIBILITIES *\n        MOD_CURVE_TYPES_AMOUNT\n);\n\nfor (let curveType = 0; curveType < MOD_CURVE_TYPES_AMOUNT; curveType++) {\n    for (\n        let transformType = 0;\n        transformType < MOD_SOURCE_TRANSFORM_POSSIBILITIES;\n        transformType++\n    ) {\n        const tableIndex =\n            MODULATOR_RESOLUTION *\n            (curveType * MOD_CURVE_TYPES_AMOUNT + transformType);\n        for (let value = 0; value < MODULATOR_RESOLUTION; value++) {\n            precomputedTransforms[tableIndex + value] = getModulatorCurveValue(\n                transformType,\n                curveType as ModulatorCurveType,\n                value / MODULATOR_RESOLUTION\n            );\n        }\n    }\n}\n", "import { type GeneratorType, generatorTypes, MAX_GENERATOR } from \"./generator_types\";\nimport type { ModulatorSourceIndex } from \"../types\";\nimport { type ModulatorCurveType, modulatorCurveTypes, modulatorSources, type ModulatorTransformType } from \"../enums\";\nimport { midiControllers } from \"../../midi/enums\";\nimport { writeWord } from \"../../utils/byte_functions/little_endian\";\nimport type { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { ModulatorSource } from \"./modulator_source\";\nimport type { SoundFontWriteIndexes } from \"../soundfont/write/types\";\n\n/**\n * Modulators.ts\n * purpose: parses soundfont modulators and the source enums, also includes the default modulators list\n **/\n\nexport const MOD_BYTE_SIZE = 10;\n\nexport function getModSourceEnum(\n    curveType: ModulatorCurveType,\n    isBipolar: boolean,\n    isNegative: boolean,\n    isCC: boolean,\n    index: ModulatorSourceIndex\n): number {\n    return new ModulatorSource(\n        index,\n        curveType,\n        isCC,\n        isBipolar,\n        isNegative\n    ).toSourceEnum();\n}\n\nconst defaultResonantModSource = getModSourceEnum(\n    modulatorCurveTypes.linear,\n    true,\n    false,\n    true,\n    midiControllers.filterResonance\n); // Linear forwards bipolar cc 74\n\nexport class Modulator {\n    /**\n     * The current computed value of this modulator. Only used in the synthesis engine for local voices.\n     */\n    public currentValue = 0;\n\n    /**\n     * The generator destination of this modulator.\n     */\n    public destination: GeneratorType = generatorTypes.initialAttenuation;\n\n    /**\n     * The transform amount for this modulator.\n     */\n    public transformAmount = 0;\n\n    /**\n     * The transform type for this modulator.\n     */\n    public transformType: ModulatorTransformType = 0;\n\n    /**\n     * Indicates if the given modulator is chorus or reverb effects modulator.\n     * This is done to simulate BASSMIDI effects behavior:\n     * - defaults to 1000 transform amount rather than 200\n     * - values can be changed, but anything above 200 is 1000\n     * (except for values above 1000, they are copied directly)\n     * - all values below are multiplied by 5 (200 * 5 = 1000)\n     * - still can be disabled if the soundfont has its own modulator curve\n     * - this fixes the very low amount of reverb by default and doesn't break soundfonts\n     */\n    public readonly isEffectModulator: boolean = false;\n\n    /**\n     * The default resonant modulator does not affect the filter gain.\n     * Neither XG nor GS responded to cc #74 in that way.\n     */\n    public readonly isDefaultResonantModulator: boolean = false;\n\n    /**\n     * The primary source of this modulator.\n     */\n    public readonly primarySource: ModulatorSource;\n\n    /**\n     * The secondary source of this modulator.\n     */\n    public readonly secondarySource: ModulatorSource;\n\n    /**\n     * Creates a new SF2 Modulator\n     */\n    public constructor(\n        primarySource = new ModulatorSource(),\n        secondarySource = new ModulatorSource(),\n        destination: GeneratorType = generatorTypes.INVALID,\n        amount = 0,\n        transformType: ModulatorTransformType = 0,\n        isEffectModulator = false,\n        isDefaultResonantModulator = false\n    ) {\n        this.primarySource = primarySource;\n        this.secondarySource = secondarySource;\n\n        this.destination = destination;\n        this.transformAmount = amount;\n        this.transformType = transformType;\n        this.isEffectModulator = isEffectModulator;\n        this.isDefaultResonantModulator = isDefaultResonantModulator;\n    }\n\n    private get destinationName() {\n        return Object.keys(generatorTypes).find(\n            (k) =>\n                generatorTypes[k as keyof typeof generatorTypes] ===\n                this.destination\n        );\n    }\n\n    /**\n     * Checks if the pair of modulators is identical (in SF2 terms)\n     * @param mod1 modulator 1\n     * @param mod2 modulator 2\n     * @param checkAmount if the amount should be checked too.\n     * @returns if they are identical\n     */\n    public static isIdentical(\n        mod1: Modulator,\n        mod2: Modulator,\n        checkAmount = false\n    ): boolean {\n        return (\n            mod1.primarySource.isIdentical(mod2.primarySource) &&\n            mod1.secondarySource.isIdentical(mod2.secondarySource) &&\n            mod1.destination === mod2.destination &&\n            mod1.transformType === mod2.transformType &&\n            (!checkAmount || mod1.transformAmount === mod2.transformAmount)\n        );\n    }\n\n    /**\n     * Copies a modulator.\n     * @param mod The modulator to copy.\n     * @returns The copied modulator.\n     */\n    public static copyFrom(mod: Modulator) {\n        return new Modulator(\n            ModulatorSource.copyFrom(mod.primarySource),\n            ModulatorSource.copyFrom(mod.secondarySource),\n            mod.destination,\n            mod.transformAmount,\n            mod.transformType,\n            mod.isEffectModulator,\n            mod.isDefaultResonantModulator\n        );\n    }\n\n    public toString() {\n        return (\n            `Source: ${this.primarySource.toString()}\\n` +\n            `Secondary source: ${this.secondarySource.toString()}\\n` +\n            `to: ${this.destinationName}\\n` +\n            `amount: ${this.transformAmount}` +\n            (this.transformType === 2 ? \"absolute value\" : \"\")\n        );\n    }\n\n    public write(modData: IndexedByteArray, indexes?: SoundFontWriteIndexes) {\n        writeWord(modData, this.primarySource.toSourceEnum());\n        writeWord(modData, this.destination);\n        writeWord(modData, this.transformAmount);\n        writeWord(modData, this.secondarySource.toSourceEnum());\n        writeWord(modData, this.transformType);\n        if (!indexes) {\n            return;\n        }\n        indexes.mod++;\n    }\n\n    /**\n     * Sums transform and create a NEW modulator\n     * @param modulator the modulator to sum with\n     * @returns the new modulator\n     */\n    public sumTransform(modulator: Modulator): Modulator {\n        const m = Modulator.copyFrom(this);\n        m.transformAmount += modulator.transformAmount;\n        return m;\n    }\n}\n\nexport class DecodedModulator extends Modulator {\n    /**\n     * Reads an SF2 modulator\n     * @param sourceEnum SF2 source enum\n     * @param secondarySourceEnum SF2 secondary source enum\n     * @param destination destination\n     * @param amount amount\n     * @param transformType transform type\n     */\n    public constructor(\n        sourceEnum: number,\n        secondarySourceEnum: number,\n        destination: GeneratorType,\n        amount: number,\n        transformType: number\n    ) {\n        const isEffectModulator =\n            (sourceEnum === 0x00db || sourceEnum === 0x00dd) &&\n            secondarySourceEnum === 0x0 &&\n            (destination === generatorTypes.reverbEffectsSend ||\n                destination === generatorTypes.chorusEffectsSend);\n\n        const isDefaultResonantModulator =\n            sourceEnum === defaultResonantModSource &&\n            secondarySourceEnum === 0x0 &&\n            destination === generatorTypes.initialFilterQ;\n\n        super(\n            ModulatorSource.fromSourceEnum(sourceEnum),\n            ModulatorSource.fromSourceEnum(secondarySourceEnum),\n            destination,\n            amount,\n            transformType as ModulatorTransformType,\n            isEffectModulator,\n            isDefaultResonantModulator\n        );\n\n        if (this.destination > MAX_GENERATOR) {\n            this.destination = generatorTypes.INVALID; // Flag as invalid (for linked ones)\n        }\n    }\n}\n\nexport const DEFAULT_ATTENUATION_MOD_AMOUNT = 960;\nexport const DEFAULT_ATTENUATION_MOD_CURVE_TYPE = modulatorCurveTypes.concave;\n\nconst defaultSoundFont2Modulators = [\n    // Vel to attenuation\n    new DecodedModulator(\n        getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            false,\n            true,\n            false,\n            modulatorSources.noteOnVelocity\n        ),\n        0x0,\n        generatorTypes.initialAttenuation,\n        DEFAULT_ATTENUATION_MOD_AMOUNT,\n        0\n    ),\n\n    // Mod wheel to vibrato\n    new DecodedModulator(0x0081, 0x0, generatorTypes.vibLfoToPitch, 50, 0),\n\n    // Vol to attenuation\n    new DecodedModulator(\n        getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            false,\n            true,\n            true,\n            midiControllers.mainVolume\n        ),\n        0x0,\n        generatorTypes.initialAttenuation,\n        DEFAULT_ATTENUATION_MOD_AMOUNT,\n        0\n    ),\n\n    // Channel pressure to vibrato\n    new DecodedModulator(0x000d, 0x0, generatorTypes.vibLfoToPitch, 50, 0),\n\n    // Pitch wheel to tuning\n    new DecodedModulator(0x020e, 0x0010, generatorTypes.fineTune, 12700, 0),\n\n    // Pan to uhh, pan\n    // Amount is 500 instead of 1000, see #59\n    new DecodedModulator(0x028a, 0x0, generatorTypes.pan, 500, 0),\n\n    // Expression to attenuation\n    new DecodedModulator(\n        getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            false,\n            true,\n            true,\n            midiControllers.expressionController\n        ),\n        0x0,\n        generatorTypes.initialAttenuation,\n        DEFAULT_ATTENUATION_MOD_AMOUNT,\n        0\n    ),\n\n    // Reverb effects to send\n    new DecodedModulator(0x00db, 0x0, generatorTypes.reverbEffectsSend, 200, 0),\n\n    // Chorus effects to send\n    new DecodedModulator(0x00dd, 0x0, generatorTypes.chorusEffectsSend, 200, 0)\n];\n\nconst defaultSpessaSynthModulators = [\n    // Custom modulators heck yeah\n    // Poly pressure to vibrato\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.linear,\n            false,\n            false,\n            false,\n            modulatorSources.polyPressure\n        ),\n        0x0,\n        generatorTypes.vibLfoToPitch,\n        50,\n        0\n    ),\n\n    // Cc 92 (tremolo) to modLFO volume\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.linear,\n            false,\n            false,\n            true,\n            midiControllers.tremoloDepth\n        ) /*Linear forward unipolar cc 92 */,\n        0x0, // No controller\n        generatorTypes.modLfoToVolume,\n        24,\n        0\n    ),\n\n    // Cc 73 (attack time) to volEnv attack\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.convex,\n            true,\n            false,\n            true,\n            midiControllers.attackTime\n        ), // Linear forward bipolar cc 72\n        0x0, // No controller\n        generatorTypes.attackVolEnv,\n        6000,\n        0\n    ),\n\n    // Cc 72 (release time) to volEnv release\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.linear,\n            true,\n            false,\n            true,\n            midiControllers.releaseTime\n        ), // Linear forward bipolar cc 72\n        0x0, // No controller\n        generatorTypes.releaseVolEnv,\n        3600,\n        0\n    ),\n\n    // Cc 74 (brightness) to filterFc\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.linear,\n            true,\n            false,\n            true,\n            midiControllers.brightness\n        ), // Linear forwards bipolar cc 74\n        0x0, // No controller\n        generatorTypes.initialFilterFc,\n        6000,\n        0\n    ),\n\n    // Cc 71 (filter Q) to filter Q (default resonant modulator)\n    new DecodedModulator(\n        defaultResonantModSource,\n        0x0, // No controller\n        generatorTypes.initialFilterQ,\n        250,\n        0\n    )\n];\n\nexport const SPESSASYNTH_DEFAULT_MODULATORS: Modulator[] =\n    defaultSoundFont2Modulators.concat(defaultSpessaSynthModulators);\n", "import {\n    generatorLimits,\n    type GeneratorType,\n    generatorTypes\n} from \"./generator_types\";\nimport type { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { writeWord } from \"../../utils/byte_functions/little_endian\";\n\nexport const GEN_BYTE_SIZE = 4;\n\nexport class Generator {\n    /**\n     * The generator's SF2 type.\n     */\n    public generatorType: GeneratorType;\n    /**\n     * The generator's 16-bit value.\n     */\n    public generatorValue = 0;\n\n    /**\n     * Constructs a new generator\n     * @param type generator type\n     * @param value generator value\n     * @param validate if the limits should be validated\n     */\n    public constructor(type: GeneratorType, value: number, validate = true) {\n        this.generatorType = type;\n        if (value === undefined) {\n            throw new Error(\"No value provided.\");\n        }\n        this.generatorValue = Math.round(value);\n        if (validate) {\n            const lim = generatorLimits[type];\n\n            if (lim !== undefined) {\n                this.generatorValue = Math.max(\n                    lim.min,\n                    Math.min(lim.max, this.generatorValue)\n                );\n            }\n        }\n    }\n\n    public write(genData: IndexedByteArray) {\n        // Name is deceptive, it works on negatives\n        writeWord(genData, this.generatorType);\n        writeWord(genData, this.generatorValue);\n    }\n\n    public toString() {\n        return `${Object.keys(generatorTypes).find((k) => generatorTypes[k as keyof typeof generatorTypes] === this.generatorType)}: ${this.generatorValue}`;\n    }\n}\n\n/**\n * Generator.ts\n * purpose: contains enums for generators,\n * and their limits parses reads soundfont generators, sums them and applies limits\n */\n/**\n * Adds and clamps generators\n */\nexport function addAndClampGenerator(\n    generatorType: number,\n    presetGens: Generator[],\n    instrumentGens: Generator[]\n) {\n    const limits = generatorLimits[generatorType] || {\n        min: 0,\n        max: 32768,\n        def: 0\n    };\n    const presetGen = presetGens.find((g) => g.generatorType === generatorType);\n    let presetValue = 0;\n    if (presetGen) {\n        presetValue = presetGen.generatorValue;\n    }\n\n    const instrGen = instrumentGens.find(\n        (g) => g.generatorType === generatorType\n    );\n    let instValue = limits.def;\n    if (instrGen) {\n        instValue = instrGen.generatorValue;\n    }\n\n    // Limits are applied in the compute_modulator function\n    // Clamp to prevent short from overflowing\n    // Testcase: Sega Genesis soundfont (spessasynth/#169) adds 20,999 and the default 13,500 to initialFilterFc\n    // Which is more than 32k\n    return Math.max(-32767, Math.min(32767, instValue + presetValue));\n}\n", "import {\n    generatorLimits,\n    type GeneratorType,\n    generatorTypes\n} from \"./generator_types\";\nimport { Generator } from \"./generator\";\nimport { Modulator } from \"./modulator\";\n\nimport type { GenericRange } from \"../types\";\nimport type { BasicSoundBank } from \"./basic_soundbank\";\n\nexport const BAG_BYTE_SIZE = 4;\n\nexport class BasicZone {\n    /**\n     * The zone's velocity range.\n     * min -1 means that it is a default value\n     */\n    public velRange: GenericRange = { min: -1, max: 127 };\n\n    /**\n     * The zone's key range.\n     * min -1 means that it is a default value.\n     */\n    public keyRange: GenericRange = { min: -1, max: 127 };\n\n    /**\n     * The zone's generators.\n     */\n    public generators: Generator[] = [];\n    /**\n     * The zone's modulators.\n     */\n    public modulators: Modulator[] = [];\n\n    public get hasKeyRange(): boolean {\n        return this.keyRange.min !== -1;\n    }\n\n    public get hasVelRange(): boolean {\n        return this.velRange.min !== -1;\n    }\n\n    /**\n     * The current tuning in cents, taking in both coarse and fine generators.\n     */\n    public get fineTuning() {\n        const currentCoarse = this.getGenerator(generatorTypes.coarseTune, 0);\n        const currentFine = this.getGenerator(generatorTypes.fineTune, 0);\n        return currentCoarse * 100 + currentFine;\n    }\n\n    /**\n     * The current tuning in cents, taking in both coarse and fine generators.\n     */\n    public set fineTuning(tuningCents: number) {\n        const coarse = Math.trunc(tuningCents / 100);\n        const fine = tuningCents % 100;\n        this.setGenerator(generatorTypes.coarseTune, coarse);\n        this.setGenerator(generatorTypes.fineTune, fine);\n    }\n\n    /**\n     * Adds to a given generator, or its default value.\n     */\n    public addToGenerator(type: GeneratorType, value: number, validate = true) {\n        const genValue = this.getGenerator(type, generatorLimits[type].def);\n        this.setGenerator(type, value + genValue, validate);\n    }\n\n    /**\n     * Sets a generator to a given value if preset, otherwise adds a new one.\n     */\n    public setGenerator(\n        type: GeneratorType,\n        value: number | null,\n        validate = true\n    ) {\n        switch (type) {\n            case generatorTypes.sampleID:\n                throw new Error(\"Use setSample()\");\n            case generatorTypes.instrument:\n                throw new Error(\"Use setInstrument()\");\n\n            case generatorTypes.velRange:\n            case generatorTypes.keyRange:\n                throw new Error(\"Set the range manually\");\n        }\n        if (value === null) {\n            this.generators = this.generators.filter(\n                (g) => g.generatorType !== type\n            );\n            return;\n        }\n        const index = this.generators.findIndex(\n            (g) => g.generatorType === type\n        );\n        if (index >= 0) {\n            this.generators[index] = new Generator(type, value, validate);\n        } else {\n            this.addGenerators(new Generator(type, value, validate));\n        }\n    }\n\n    /**\n     * Adds generators to the zone.\n     * @param generators\n     */\n    public addGenerators(...generators: Generator[]) {\n        generators.forEach((g) => {\n            switch (g.generatorType) {\n                default:\n                    this.generators.push(g);\n                    break;\n\n                case generatorTypes.sampleID:\n                case generatorTypes.instrument:\n                    // Don't add these, they already have their own properties\n                    break;\n\n                case generatorTypes.velRange:\n                    this.velRange.min = g.generatorValue & 0x7f;\n                    this.velRange.max = (g.generatorValue >> 8) & 0x7f;\n                    break;\n\n                case generatorTypes.keyRange:\n                    this.keyRange.min = g.generatorValue & 0x7f;\n                    this.keyRange.max = (g.generatorValue >> 8) & 0x7f;\n            }\n        });\n    }\n\n    public addModulators(...modulators: Modulator[]) {\n        this.modulators.push(...modulators);\n    }\n\n    public getGenerator<K>(\n        generatorType: GeneratorType,\n        notFoundValue: number | K\n    ): number | K {\n        return (\n            this.generators.find((g) => g.generatorType === generatorType)\n                ?.generatorValue ?? notFoundValue\n        );\n    }\n\n    public copyFrom(zone: BasicZone) {\n        this.generators = zone.generators.map(\n            (g) => new Generator(g.generatorType, g.generatorValue, false)\n        );\n        this.modulators = zone.modulators.map(\n            Modulator.copyFrom.bind(Modulator)\n        );\n        this.velRange = { ...zone.velRange };\n        this.keyRange = { ...zone.keyRange };\n    }\n\n    /**\n     * Filters the generators and prepends the range generators.\n     */\n    public getWriteGenerators(bank: BasicSoundBank) {\n        const generators = this.generators.filter(\n            (g) =>\n                g.generatorType !== generatorTypes.sampleID &&\n                g.generatorType !== generatorTypes.instrument &&\n                g.generatorType !== generatorTypes.keyRange &&\n                g.generatorType !== generatorTypes.velRange\n        );\n\n        // Instrument and preset zones use this parameter!\n        // So \"use\" it here to please eslint\n        if (!bank) {\n            throw new Error(\"No bank provided! \");\n        }\n        void bank;\n\n        // Unshift vel then key (to make key first)\n        if (this.hasVelRange) {\n            generators.unshift(\n                new Generator(\n                    generatorTypes.velRange,\n                    (this.velRange.max << 8) | Math.max(this.velRange.min, 0),\n                    false\n                )\n            );\n        }\n        if (this.hasKeyRange) {\n            generators.unshift(\n                new Generator(\n                    generatorTypes.keyRange,\n                    (this.keyRange.max << 8) | Math.max(this.keyRange.min, 0),\n                    false\n                )\n            );\n        }\n        return generators;\n    }\n}\n", "import { BasicZone } from \"./basic_zone\";\n\n// Represents a global zone within an instrument or a preset.\nexport class BasicGlobalZone extends BasicZone {\n    // Nothing here, just a different instance...\n}\n", "import { BasicZone } from \"./basic_zone\";\nimport type { BasicPreset } from \"./basic_preset\";\nimport type { BasicInstrument } from \"./basic_instrument\";\nimport type { BasicSoundBank } from \"./basic_soundbank\";\nimport { Generator } from \"./generator\";\nimport { generatorTypes } from \"./generator_types\";\n\nexport class BasicPresetZone extends BasicZone {\n    /**\n     * The preset this zone belongs to.\n     */\n    public readonly parentPreset: BasicPreset;\n\n    /**\n     * Creates a new preset zone.\n     * @param preset the preset this zone belongs to.\n     * @param instrument the instrument to use in this zone.\n     */\n    public constructor(preset: BasicPreset, instrument: BasicInstrument) {\n        super();\n        this.parentPreset = preset;\n        this._instrument = instrument;\n        this._instrument.linkTo(this.parentPreset);\n    }\n\n    /**\n     * Zone's instrument.\n     */\n    private _instrument: BasicInstrument;\n\n    /**\n     * Zone's instrument.\n     */\n    public get instrument() {\n        return this._instrument;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Zone's instrument.\n     */\n    public set instrument(instrument: BasicInstrument) {\n        if (this._instrument) {\n            this._instrument.unlinkFrom(this.parentPreset);\n        }\n        this._instrument = instrument;\n        this._instrument.linkTo(this.parentPreset);\n    }\n\n    public getWriteGenerators(bank: BasicSoundBank): Generator[] {\n        const gens = super.getWriteGenerators(bank);\n        if (!bank) {\n            throw new Error(\n                \"Instrument ID cannot be determined without the sound bank itself.\"\n            );\n        }\n        const instrumentID = bank.instruments.indexOf(this.instrument);\n        if (instrumentID < 0) {\n            throw new Error(\n                `${this.instrument.name} does not exist in ${bank.soundBankInfo.name}! Cannot write instrument generator.`\n            );\n        }\n        gens.push(\n            new Generator(generatorTypes.instrument, instrumentID, false)\n        );\n        return gens;\n    }\n}\n", "import { BasicZone } from \"./basic_zone\";\nimport type { BasicInstrument } from \"./basic_instrument\";\nimport type { BasicSample } from \"./basic_sample\";\nimport { Generator } from \"./generator\";\nimport type { BasicSoundBank } from \"./basic_soundbank\";\nimport { generatorTypes } from \"./generator_types\";\n\nexport class BasicInstrumentZone extends BasicZone {\n    /**\n     * The instrument this zone belongs to.\n     */\n    public readonly parentInstrument: BasicInstrument;\n    /**\n     * For tracking on the individual zone level, since multiple presets can refer to the same instrument.\n     */\n    public useCount: number;\n\n    /**\n     * Creates a new instrument zone.\n     * @param instrument The parent instrument.\n     * @param sample The sample to use in this zone.\n     */\n    public constructor(instrument: BasicInstrument, sample: BasicSample) {\n        super();\n        this.parentInstrument = instrument;\n        this._sample = sample;\n        sample.linkTo(this.parentInstrument);\n        this.useCount = instrument.useCount;\n    }\n\n    /**\n     * Zone's sample.\n     */\n    private _sample: BasicSample;\n\n    /**\n     * Zone's sample.\n     */\n    public get sample() {\n        return this._sample;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Sets a sample for this zone.\n     * @param sample the sample to set.\n     */\n    public set sample(sample: BasicSample) {\n        if (this._sample) {\n            this._sample.unlinkFrom(this.parentInstrument);\n        }\n        this._sample = sample;\n        sample.linkTo(this.parentInstrument);\n    }\n\n    public getWriteGenerators(bank: BasicSoundBank): Generator[] {\n        const gens = super.getWriteGenerators(bank);\n        const sampleID = bank.samples.indexOf(this.sample);\n        if (sampleID < 0) {\n            throw new Error(\n                `${this.sample.name} does not exist in ${bank.soundBankInfo.name}! Cannot write sampleID generator.`\n            );\n        }\n        gens.push(new Generator(generatorTypes.sampleID, sampleID, false));\n        return gens;\n    }\n}\n", "import { BasicGlobalZone } from \"./basic_global_zone\";\nimport { BasicInstrumentZone } from \"./basic_instrument_zone\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../utils/loggin\";\nimport { type BasicPreset } from \"./basic_preset\";\nimport type { BasicSample } from \"./basic_sample\";\nimport {\n    generatorLimits,\n    type GeneratorType,\n    generatorTypes\n} from \"./generator_types\";\nimport { Modulator } from \"./modulator\";\nimport type { ExtendedSF2Chunks } from \"../soundfont/write/types\";\nimport { writeBinaryStringIndexed } from \"../../utils/byte_functions/string\";\nimport { writeWord } from \"../../utils/byte_functions/little_endian\";\nimport { consoleColors } from \"../../utils/other\";\n\nexport const INST_BYTE_SIZE = 22;\n\nconst notGlobalizedTypes = new Set([\n    generatorTypes.velRange,\n    generatorTypes.keyRange,\n    generatorTypes.instrument,\n    generatorTypes.sampleID,\n    generatorTypes.exclusiveClass,\n    generatorTypes.endOper,\n    generatorTypes.sampleModes,\n    generatorTypes.startloopAddrsOffset,\n    generatorTypes.startloopAddrsCoarseOffset,\n    generatorTypes.endloopAddrsOffset,\n    generatorTypes.endloopAddrsCoarseOffset,\n    generatorTypes.startAddrsOffset,\n    generatorTypes.startAddrsCoarseOffset,\n    generatorTypes.endAddrOffset,\n    generatorTypes.endAddrsCoarseOffset,\n    generatorTypes.initialAttenuation, // Written into wsmp, there's no global wsmp\n    generatorTypes.fineTune, // Written into wsmp, there's no global wsmp\n    generatorTypes.coarseTune, // Written into wsmp, there's no global wsmp\n    generatorTypes.keyNumToVolEnvHold, // KEY TO SOMETHING:\n    generatorTypes.keyNumToVolEnvDecay, // Cannot be globalized as they modify their respective generators\n    generatorTypes.keyNumToModEnvHold, // (for example, keyNumToVolEnvDecay modifies VolEnvDecay)\n    generatorTypes.keyNumToModEnvDecay\n] as const);\ntype notGlobalizedTypes =\n    typeof notGlobalizedTypes extends Set<infer T> ? T : never;\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Represents a single instrument\n */\nexport class BasicInstrument {\n    /**\n     * The instrument's name\n     */\n    public name = \"\";\n    /**\n     * The instrument's zones\n     */\n    public zones: BasicInstrumentZone[] = [];\n    /**\n     * Instrument's global zone\n     */\n    public readonly globalZone: BasicGlobalZone = new BasicGlobalZone();\n    /**\n     * Instrument's linked presets (the presets that use it)\n     * note that duplicates are allowed since one preset can use the same instrument multiple times.\n     */\n    public readonly linkedTo: BasicPreset[] = [];\n\n    /**\n     * How many presets is this instrument used by\n     */\n    public get useCount(): number {\n        return this.linkedTo.length;\n    }\n\n    /**\n     * Creates a new instrument zone and returns it.\n     * @param sample The sample to use in the zone.\n     */\n    public createZone(sample: BasicSample): BasicInstrumentZone {\n        const zone = new BasicInstrumentZone(this, sample);\n        this.zones.push(zone);\n        return zone;\n    }\n\n    /**\n     * Links the instrument ta a given preset\n     * @param preset the preset to link to\n     */\n    public linkTo(preset: BasicPreset) {\n        this.linkedTo.push(preset);\n        this.zones.forEach((z) => z.useCount++);\n    }\n\n    /**\n     * Unlinks the instrument from a given preset\n     * @param preset the preset to unlink from\n     */\n    public unlinkFrom(preset: BasicPreset) {\n        const index = this.linkedTo.indexOf(preset);\n        if (index < 0) {\n            SpessaSynthWarn(\n                `Cannot unlink ${preset.name} from ${this.name}: not linked.`\n            );\n            return;\n        }\n        this.linkedTo.splice(index, 1);\n        this.zones.forEach((z) => z.useCount--);\n    }\n\n    // Deletes unused zones of the instrument\n    public deleteUnusedZones() {\n        this.zones = this.zones.filter((z) => {\n            const stays = z.useCount > 0;\n            if (!stays) {\n                z.sample.unlinkFrom(this);\n            }\n            return stays;\n        });\n    }\n\n    // Unlinks everything from this instrument\n    public delete() {\n        if (this.useCount > 0) {\n            throw new Error(\n                `Cannot delete an instrument that is used by: ${this.linkedTo.map((p) => p.name).toString()}.`\n            );\n        }\n        this.zones.forEach((z) => z.sample.unlinkFrom(this));\n    }\n\n    /**\n     * Deletes a given instrument zone if it has no uses\n     * @param index the index of the zone to delete\n     * @param force ignores the use count and deletes forcibly\n     * @returns if the zone has been deleted\n     */\n    public deleteZone(index: number, force = false): boolean {\n        const zone = this.zones[index];\n        zone.useCount -= 1;\n        if (zone.useCount < 1 || force) {\n            zone.sample.unlinkFrom(this);\n            this.zones.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Globalizes the instrument *in-place.*\n     * This means trying to move as many generators and modulators\n     * to the global zone as possible to reduce clutter and the count of parameters.\n     */\n    public globalize() {\n        const globalZone = this.globalZone;\n\n        // Create a global zone and add repeating generators to it\n        // Also modulators\n        // Iterate over every type of generator\n        for (\n            let checkedType: GeneratorType = 0;\n            checkedType < 58;\n            checkedType++\n        ) {\n            // Not these though\n            if (notGlobalizedTypes.has(checkedType as notGlobalizedTypes)) {\n                continue;\n            }\n            checkedType = checkedType as GeneratorType;\n            let occurrencesForValues: Record<number, number> = {};\n            const defaultForChecked = generatorLimits[checkedType]?.def || 0;\n            occurrencesForValues[defaultForChecked] = 0;\n            for (const zone of this.zones) {\n                const value = zone.getGenerator(checkedType, undefined);\n                if (value !== undefined) {\n                    if (occurrencesForValues[value] === undefined) {\n                        occurrencesForValues[value] = 1;\n                    } else {\n                        occurrencesForValues[value]++;\n                    }\n                } else {\n                    occurrencesForValues[defaultForChecked]++;\n                }\n\n                // If the checked type has the keyNumTo something generator set, it cannot be globalized.\n                let relativeCounterpart;\n                switch (checkedType) {\n                    default:\n                        continue;\n\n                    case generatorTypes.decayVolEnv:\n                        relativeCounterpart =\n                            generatorTypes.keyNumToVolEnvDecay;\n                        break;\n                    case generatorTypes.holdVolEnv:\n                        relativeCounterpart = generatorTypes.keyNumToVolEnvHold;\n                        break;\n                    case generatorTypes.decayModEnv:\n                        relativeCounterpart =\n                            generatorTypes.keyNumToModEnvDecay;\n                        break;\n                    case generatorTypes.holdModEnv:\n                        relativeCounterpart = generatorTypes.keyNumToModEnvHold;\n                }\n                const relative = zone.getGenerator(\n                    relativeCounterpart,\n                    undefined\n                );\n                if (relative !== undefined) {\n                    occurrencesForValues = {};\n                    break;\n                }\n            }\n            // If at least one occurrence, find the most used one and add it to global\n            if (Object.keys(occurrencesForValues).length > 0) {\n                const entries = Object.entries(occurrencesForValues);\n                // [value, occurrences]\n                const valueToGlobalize = entries.reduce(\n                    (max, curr) => {\n                        if (max[1] < curr[1]) {\n                            return curr;\n                        }\n                        return max;\n                    },\n                    [\"0\", 0]\n                );\n                const targetValue = parseInt(valueToGlobalize[0]);\n\n                // If the global value is the default value just remove it, no need to add it\n                if (targetValue !== defaultForChecked) {\n                    globalZone.setGenerator(checkedType, targetValue, false);\n                }\n                // Remove from the zones\n                this.zones.forEach((z) => {\n                    const genValue = z.getGenerator(checkedType, undefined);\n                    if (genValue !== undefined) {\n                        if (genValue === targetValue) {\n                            // That exact value exists. Since it's global now, remove it\n                            z.setGenerator(checkedType, null);\n                        }\n                    } else {\n                        // That type does not exist at all here.\n                        // Since we're globalizing, we need to add the default here.\n                        if (targetValue !== defaultForChecked) {\n                            z.setGenerator(checkedType, defaultForChecked);\n                        }\n                    }\n                });\n            }\n        }\n\n        // Globalize only modulators that exist in all zones\n        const firstZone = this.zones[0];\n        const modulators = firstZone.modulators.map((m) =>\n            Modulator.copyFrom(m)\n        );\n        for (const checkedModulator of modulators) {\n            let existsForAllZones = true;\n            for (const zone of this.zones) {\n                if (!existsForAllZones) {\n                    continue;\n                }\n                // Check if that zone has an existing modulator\n                const mod = zone.modulators.find((m) =>\n                    Modulator.isIdentical(m, checkedModulator)\n                );\n                if (!mod) {\n                    // Does not exist for this zone, so it's not global.\n                    existsForAllZones = false;\n                }\n                // Exists.\n            }\n            if (existsForAllZones) {\n                globalZone.addModulators(Modulator.copyFrom(checkedModulator));\n                // Delete it from local zones.\n                for (const zone of this.zones) {\n                    const modulator = zone.modulators.find((m) =>\n                        Modulator.isIdentical(m, checkedModulator)\n                    );\n                    if (!modulator) {\n                        continue;\n                    }\n                    // Check if the amount is correct.\n                    // If so, delete it since it's global.\n                    // If not, then it will simply override global as it's identical.\n                    if (\n                        modulator.transformAmount ===\n                        checkedModulator.transformAmount\n                    ) {\n                        zone.modulators.splice(\n                            zone.modulators.indexOf(modulator),\n                            1\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    public write(instData: ExtendedSF2Chunks, index: number) {\n        SpessaSynthInfo(`%cWriting ${this.name}...`, consoleColors.info);\n        // Split up the name\n        writeBinaryStringIndexed(instData.pdta, this.name.substring(0, 20), 20);\n        writeBinaryStringIndexed(instData.xdta, this.name.substring(20), 20);\n        // Inst start index\n        writeWord(instData.pdta, index & 0xffff);\n        writeWord(instData.xdta, index >>> 16);\n    }\n}\n", "import { Modulator } from \"./modulator\";\nimport { BankSelectHacks } from \"../../utils/midi_hacks\";\n\nimport { BasicGlobalZone } from \"./basic_global_zone\";\nimport { BasicPresetZone } from \"./basic_preset_zone\";\nimport type { BasicSoundBank } from \"./basic_soundbank\";\nimport { Generator } from \"./generator\";\nimport type { GenericRange, VoiceSynthesisData } from \"../types\";\nimport { BasicInstrument } from \"./basic_instrument\";\nimport {\n    type MIDIPatch,\n    type MIDIPatchNamed,\n    MIDIPatchTools\n} from \"./midi_patch\";\nimport { generatorLimits, generatorTypes } from \"./generator_types\";\nimport type { ExtendedSF2Chunks } from \"../soundfont/write/types\";\nimport { SpessaSynthInfo } from \"../../utils/loggin\";\nimport { consoleColors } from \"../../utils/other\";\nimport { writeBinaryStringIndexed } from \"../../utils/byte_functions/string\";\nimport {\n    writeDword,\n    writeWord\n} from \"../../utils/byte_functions/little_endian\";\n\nexport const PHDR_BYTE_SIZE = 38;\n\nexport class BasicPreset implements MIDIPatchNamed {\n    /**\n     * The parent soundbank instance\n     * Currently used for determining default modulators and XG status\n     */\n    public readonly parentSoundBank: BasicSoundBank;\n\n    /**\n     * The preset's name\n     */\n    public name = \"\";\n\n    public program = 0;\n\n    public bankMSB = 0;\n\n    public bankLSB = 0;\n\n    public isGMGSDrum = false;\n\n    /**\n     * The preset's zones\n     */\n    public zones: BasicPresetZone[] = [];\n\n    /**\n     * Preset's global zone\n     */\n    public readonly globalZone: BasicGlobalZone;\n\n    /**\n     * Unused metadata\n     */\n    public library = 0;\n    /**\n     * Unused metadata\n     */\n    public genre = 0;\n    /**\n     * Unused metadata\n     */\n    public morphology = 0;\n\n    /**\n     * Creates a new preset representation.\n     * @param parentSoundBank the sound bank this preset belongs to.\n     * @param globalZone optional, a global zone to use.\n     */\n    public constructor(\n        parentSoundBank: BasicSoundBank,\n        globalZone = new BasicGlobalZone()\n    ) {\n        this.parentSoundBank = parentSoundBank;\n        this.globalZone = globalZone;\n    }\n\n    public get isXGDrums() {\n        return (\n            this.parentSoundBank.isXGBank &&\n            BankSelectHacks.isXGDrums(this.bankMSB)\n        );\n    }\n\n    /**\n     * Checks if this preset is a drum preset\n     */\n    public get isAnyDrums(): boolean {\n        const xg = this.parentSoundBank.isXGBank;\n\n        return (\n            this.isGMGSDrum ||\n            (xg &&\n                BankSelectHacks.isXGDrums(this.bankMSB) &&\n                // SFX is not a drum preset, only for exact match\n                this.bankMSB !== 126)\n        );\n    }\n\n    /**\n     * Unlinks everything from this preset.\n     */\n    public delete() {\n        this.zones.forEach((z) => z.instrument?.unlinkFrom(this));\n    }\n\n    /**\n     * Deletes an instrument zone from this preset.\n     * @param index the zone's index to delete.\n     */\n    public deleteZone(index: number) {\n        this.zones[index]?.instrument?.unlinkFrom(this);\n        this.zones.splice(index, 1);\n    }\n\n    /**\n     * Creates a new preset zone and returns it.\n     * @param instrument the instrument to use in the zone.\n     */\n    public createZone(instrument: BasicInstrument): BasicPresetZone {\n        const z = new BasicPresetZone(this, instrument);\n        this.zones.push(z);\n        return z;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Preloads (loads and caches synthesis data) for a given key range.\n     */\n    public preload(keyMin: number, keyMax: number) {\n        for (let key = keyMin; key < keyMax + 1; key++) {\n            for (let velocity = 0; velocity < 128; velocity++) {\n                this.getSynthesisData(key, velocity).forEach(\n                    (synthesisData) => {\n                        synthesisData.sample.getAudioData();\n                    }\n                );\n            }\n        }\n    }\n\n    /**\n     * Checks if the bank and program numbers are the same for the given preset as this one.\n     * @param preset The preset to check.\n     */\n    public matches(preset: MIDIPatch) {\n        return MIDIPatchTools.matches(this, preset);\n    }\n\n    /**\n     * Returns the synthesis data from this preset\n     * @param midiNote the MIDI note number\n     * @param velocity the MIDI velocity\n     * @returns the returned sound data\n     */\n    public getSynthesisData(\n        midiNote: number,\n        velocity: number\n    ): VoiceSynthesisData[] {\n        if (this.zones.length < 1) {\n            return [];\n        }\n\n        function isInRange(range: GenericRange, number: number): boolean {\n            return number >= range.min && number <= range.max;\n        }\n\n        function addUnique(main: Generator[], adder: Generator[]) {\n            main.push(\n                ...adder.filter(\n                    (g) =>\n                        !main.find((mg) => mg.generatorType === g.generatorType)\n                )\n            );\n        }\n\n        function addUniqueMods(main: Modulator[], adder: Modulator[]) {\n            main.push(\n                ...adder.filter(\n                    (m) => !main.find((mm) => Modulator.isIdentical(m, mm))\n                )\n            );\n        }\n\n        const parsedGeneratorsAndSamples: VoiceSynthesisData[] = [];\n\n        /**\n         * Global zone is always first, so it or nothing\n         */\n        const globalPresetGenerators: Generator[] = [\n            ...this.globalZone.generators\n        ];\n\n        const globalPresetModulators: Modulator[] = [\n            ...this.globalZone.modulators\n        ];\n        const globalKeyRange = this.globalZone.keyRange;\n        const globalVelRange = this.globalZone.velRange;\n\n        // Find the preset zones in range\n        const presetZonesInRange = this.zones.filter(\n            (currentZone) =>\n                isInRange(\n                    currentZone.hasKeyRange\n                        ? currentZone.keyRange\n                        : globalKeyRange,\n                    midiNote\n                ) &&\n                isInRange(\n                    currentZone.hasVelRange\n                        ? currentZone.velRange\n                        : globalVelRange,\n                    velocity\n                )\n        );\n\n        presetZonesInRange.forEach((presetZone) => {\n            const instrument = presetZone.instrument;\n            // The global zone is already taken into account earlier\n            if (!instrument || instrument.zones.length < 1) {\n                return;\n            }\n            const presetGenerators = presetZone.generators;\n            const presetModulators = presetZone.modulators;\n            /**\n             * Global zone is always first, so it or nothing\n             */\n            const globalInstrumentGenerators: Generator[] = [\n                ...instrument.globalZone.generators\n            ];\n            const globalInstrumentModulators = [\n                ...instrument.globalZone.modulators\n            ];\n            const globalKeyRange = instrument.globalZone.keyRange;\n            const globalVelRange = instrument.globalZone.velRange;\n\n            const instrumentZonesInRange = instrument.zones.filter(\n                (currentZone) =>\n                    isInRange(\n                        currentZone.hasKeyRange\n                            ? currentZone.keyRange\n                            : globalKeyRange,\n                        midiNote\n                    ) &&\n                    isInRange(\n                        currentZone.hasVelRange\n                            ? currentZone.velRange\n                            : globalVelRange,\n                        velocity\n                    )\n            );\n\n            instrumentZonesInRange.forEach((instrumentZone) => {\n                const instrumentGenerators = [...instrumentZone.generators];\n                const instrumentModulators = [...instrumentZone.modulators];\n\n                addUnique(presetGenerators, globalPresetGenerators);\n                // Add the unique global preset generators (local replace global(\n\n                // Add the unique global instrument generators (local replace global)\n                addUnique(instrumentGenerators, globalInstrumentGenerators);\n\n                addUniqueMods(presetModulators, globalPresetModulators);\n                addUniqueMods(instrumentModulators, globalInstrumentModulators);\n\n                // Default mods\n                addUniqueMods(\n                    instrumentModulators,\n                    this.parentSoundBank.defaultModulators\n                );\n\n                /**\n                 * Sum preset modulators to instruments (amount) sf spec page 54\n                 */\n                const finalModulatorList: Modulator[] = [\n                    ...instrumentModulators\n                ];\n                for (const mod of presetModulators) {\n                    const identicalInstrumentModulator =\n                        finalModulatorList.findIndex((m) =>\n                            Modulator.isIdentical(mod, m)\n                        );\n                    if (identicalInstrumentModulator !== -1) {\n                        // Sum the amounts\n                        // This makes a new modulator\n                        // Because otherwise it would overwrite the one in the sound bank!\n                        finalModulatorList[identicalInstrumentModulator] =\n                            finalModulatorList[\n                                identicalInstrumentModulator\n                            ].sumTransform(mod);\n                    } else {\n                        finalModulatorList.push(mod);\n                    }\n                }\n\n                if (instrumentZone.sample) {\n                    // Combine both generators and add to the final result\n                    parsedGeneratorsAndSamples.push({\n                        instrumentGenerators: instrumentGenerators,\n                        presetGenerators: presetGenerators,\n                        modulators: finalModulatorList,\n                        sample: instrumentZone.sample\n                    });\n                }\n            });\n        });\n        return parsedGeneratorsAndSamples;\n    }\n\n    /**\n     * BankMSB:bankLSB:program:isGMGSDrum\n     */\n    public toMIDIString() {\n        return MIDIPatchTools.toMIDIString(this);\n    }\n\n    public toString() {\n        return MIDIPatchTools.toNamedMIDIString(this);\n    }\n\n    /**\n     * Combines preset into an instrument, flattening the preset zones into instrument zones.\n     * This is a really complex function that attempts to work around the DLS limitations of only having the instrument layer.\n     * @returns The instrument containing the flattened zones. In theory, it should exactly the same as this preset.\n     */\n    public toFlattenedInstrument(): BasicInstrument {\n        const addUnique = (main: Generator[], adder: Generator[]) => {\n            main.push(\n                ...adder.filter(\n                    (g) =>\n                        !main.find((mg) => mg.generatorType === g.generatorType)\n                )\n            );\n        };\n\n        const subtractRanges = (\n            r1: GenericRange,\n            r2: GenericRange\n        ): GenericRange => {\n            return {\n                min: Math.max(r1.min, r2.min),\n                max: Math.min(r1.max, r2.max)\n            };\n        };\n\n        const addUniqueMods = (main: Modulator[], adder: Modulator[]) => {\n            main.push(\n                ...adder.filter(\n                    (m) => !main.find((mm) => Modulator.isIdentical(m, mm))\n                )\n            );\n        };\n\n        const outputInstrument = new BasicInstrument();\n        outputInstrument.name = this.name;\n\n        const globalPresetGenerators: Generator[] = [];\n        const globalPresetModulators: Modulator[] = [];\n        // Find the global zone and apply ranges, generators, and modulators\n        const globalPresetZone = this.globalZone;\n        globalPresetGenerators.push(...globalPresetZone.generators);\n        globalPresetModulators.push(...globalPresetZone.modulators);\n        const globalPresetKeyRange = globalPresetZone.keyRange;\n        const globalPresetVelRange = globalPresetZone.velRange;\n        // For each non-global preset zone\n        for (const presetZone of this.zones) {\n            if (!presetZone.instrument) {\n                throw new Error(\"No instrument in a preset zone.\");\n            }\n            // Use global ranges if not provided\n            let presetZoneKeyRange = presetZone.keyRange;\n            if (!presetZone.hasKeyRange) {\n                presetZoneKeyRange = globalPresetKeyRange;\n            }\n            let presetZoneVelRange = presetZone.velRange;\n            if (!presetZone.hasVelRange) {\n                presetZoneVelRange = globalPresetVelRange;\n            }\n            // Add unique generators and modulators from the global zone\n            const presetGenerators = presetZone.generators.map(\n                (g) => new Generator(g.generatorType, g.generatorValue)\n            );\n            addUnique(presetGenerators, globalPresetGenerators);\n            const presetModulators = [...presetZone.modulators];\n            addUniqueMods(presetModulators, globalPresetModulators);\n            const instrument = presetZone.instrument;\n            const iZones = instrument.zones;\n\n            const globalInstGenerators: Generator[] = [];\n            const globalInstModulators: Modulator[] = [];\n            const globalInstZone = instrument.globalZone;\n            globalInstGenerators.push(...globalInstZone.generators);\n            globalInstModulators.push(...globalInstZone.modulators);\n            const globalInstKeyRange = globalInstZone.keyRange;\n            const globalInstVelRange = globalInstZone.velRange;\n            // For each non-global instrument zone\n            for (const instZone of iZones) {\n                if (!instZone.sample) {\n                    throw new Error(\"No sample in an instrument zone.\");\n                }\n                // Use global ranges if not provided\n                let instZoneKeyRange = instZone.keyRange;\n                if (!instZone.hasKeyRange) {\n                    instZoneKeyRange = globalInstKeyRange;\n                }\n                let instZoneVelRange = instZone.velRange;\n                if (!instZone.hasVelRange) {\n                    instZoneVelRange = globalInstVelRange;\n                }\n                instZoneKeyRange = subtractRanges(\n                    instZoneKeyRange,\n                    presetZoneKeyRange\n                );\n                instZoneVelRange = subtractRanges(\n                    instZoneVelRange,\n                    presetZoneVelRange\n                );\n\n                // If either of the zones is out of range (i.e.m min larger than the max),\n                // Then we discard that zone\n                if (\n                    instZoneKeyRange.max < instZoneKeyRange.min ||\n                    instZoneVelRange.max < instZoneVelRange.min\n                ) {\n                    continue;\n                }\n\n                // Add unique generators and modulators from the global zone\n                const instGenerators = instZone.generators.map(\n                    (g) => new Generator(g.generatorType, g.generatorValue)\n                );\n                addUnique(instGenerators, globalInstGenerators);\n                const instModulators = [...instZone.modulators];\n                addUniqueMods(instModulators, globalInstModulators);\n\n                /**\n                 * Sum preset modulators to instruments (amount) sf spec page 54\n                 */\n                const finalModList: Modulator[] = [...instModulators];\n                for (const mod of presetModulators) {\n                    const identicalInstMod = finalModList.findIndex((m) =>\n                        Modulator.isIdentical(mod, m)\n                    );\n                    if (identicalInstMod !== -1) {\n                        // Sum the amounts\n                        // (this makes a new modulator)\n                        // Because otherwise it would overwrite the one in the soundfont!\n                        finalModList[identicalInstMod] =\n                            finalModList[identicalInstMod].sumTransform(mod);\n                    } else {\n                        finalModList.push(mod);\n                    }\n                }\n\n                // Clone the generators as the values are modified during DLS conversion (keyNumToSomething)\n                let finalGenList = instGenerators.map(\n                    (g) => new Generator(g.generatorType, g.generatorValue)\n                );\n                for (const gen of presetGenerators) {\n                    if (\n                        gen.generatorType === generatorTypes.velRange ||\n                        gen.generatorType === generatorTypes.keyRange ||\n                        gen.generatorType === generatorTypes.instrument ||\n                        gen.generatorType === generatorTypes.endOper ||\n                        gen.generatorType === generatorTypes.sampleModes\n                    ) {\n                        continue;\n                    }\n                    const identicalInstGen = instGenerators.findIndex(\n                        (g) => g.generatorType === gen.generatorType\n                    );\n                    if (identicalInstGen !== -1) {\n                        // If exists, sum to that generator\n                        const newAmount =\n                            finalGenList[identicalInstGen].generatorValue +\n                            gen.generatorValue;\n                        finalGenList[identicalInstGen] = new Generator(\n                            gen.generatorType,\n                            newAmount\n                        );\n                    } else {\n                        // If not, sum to the default generator\n                        const newAmount =\n                            generatorLimits[gen.generatorType].def +\n                            gen.generatorValue;\n                        finalGenList.push(\n                            new Generator(gen.generatorType, newAmount)\n                        );\n                    }\n                }\n\n                // Remove unwanted\n                finalGenList = finalGenList.filter(\n                    (g) =>\n                        g.generatorType !== generatorTypes.sampleID &&\n                        g.generatorType !== generatorTypes.keyRange &&\n                        g.generatorType !== generatorTypes.velRange &&\n                        g.generatorType !== generatorTypes.endOper &&\n                        g.generatorType !== generatorTypes.instrument &&\n                        g.generatorValue !==\n                            generatorLimits[g.generatorType].def\n                );\n\n                // Create the zone and copy over values\n                const zone = outputInstrument.createZone(instZone.sample);\n                zone.keyRange = instZoneKeyRange;\n                zone.velRange = instZoneVelRange;\n                if (zone.keyRange.min === 0 && zone.keyRange.max === 127) {\n                    zone.keyRange.min = -1;\n                }\n                if (zone.velRange.min === 0 && zone.velRange.max === 127) {\n                    zone.velRange.min = -1;\n                }\n                zone.addGenerators(...finalGenList);\n                zone.addModulators(...finalModList);\n            }\n        }\n        return outputInstrument;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Writes the SF2 header\n     * @param phdrData\n     * @param index\n     */\n    public write(phdrData: ExtendedSF2Chunks, index: number) {\n        SpessaSynthInfo(`%cWriting ${this.name}...`, consoleColors.info);\n        // Split up the name\n        writeBinaryStringIndexed(phdrData.pdta, this.name.substring(0, 20), 20);\n        writeBinaryStringIndexed(phdrData.xdta, this.name.substring(20), 20);\n\n        writeWord(phdrData.pdta, this.program);\n        let wBank = this.bankMSB;\n        if (this.isGMGSDrum) {\n            // Drum flag\n            wBank = 0x80;\n        } else if (this.bankMSB === 0) {\n            // If bank MSB is zero, write bank LSB (XG)\n            wBank = this.bankLSB;\n        }\n        writeWord(phdrData.pdta, wBank);\n        // Skip wBank and wProgram\n        phdrData.xdta.currentIndex += 4;\n\n        writeWord(phdrData.pdta, index & 0xffff);\n        writeWord(phdrData.xdta, index >> 16);\n\n        // 3 unused dword, spec says to keep em so we do\n        writeDword(phdrData.pdta, this.library);\n        writeDword(phdrData.pdta, this.genre);\n        writeDword(phdrData.pdta, this.morphology);\n        phdrData.xdta.currentIndex += 12;\n    }\n}\n", "import type { SynthSystem } from \"../../synthesizer/types\";\nimport { BankSelectHacks } from \"../../utils/midi_hacks\";\nimport type { BasicPreset } from \"./basic_preset\";\nimport { type MIDIPatch, MIDIPatchTools } from \"./midi_patch\";\nimport { SpessaSynthInfo } from \"../../utils/loggin\";\nimport { consoleColors } from \"../../utils/other\";\n\nfunction getAnyDrums<T extends BasicPreset>(\n    presets: T[],\n    preferXG: boolean\n): T {\n    let p: T | undefined;\n    if (preferXG) {\n        // Get any XG drums\n        p = presets.find((p) => p.isXGDrums);\n    } else {\n        // Get any GM/GS drums\n        p = presets.find((p) => p.isGMGSDrum);\n    }\n    if (p) {\n        // Return the found preset\n        return p;\n    }\n    // Return any drum preset\n    return (\n        presets.find((p) => p.isAnyDrums) ?? // ...no?\n        // Then just return any preset\n        presets[0]\n    );\n}\n\n/**\n * A sophisticated preset selection system based on the MIDI Patch system\n * @param presets The preset list.\n * @param patch The patch to select.\n * @param system The MIDI system to select for.\n */\nexport function selectPreset<T extends BasicPreset>(\n    presets: T[],\n    patch: MIDIPatch,\n    system: SynthSystem\n): T {\n    if (presets.length < 1) {\n        throw new Error(\"No presets!\");\n    }\n    if (patch.isGMGSDrum && BankSelectHacks.isSystemXG(system)) {\n        // GM/GS drums with XG. This shouldn't happen. Force XG drums.\n        patch = {\n            ...patch,\n            isGMGSDrum: false,\n            bankLSB: 0,\n            bankMSB: BankSelectHacks.getDrumBank(system)\n        };\n    }\n    const { isGMGSDrum, bankLSB, bankMSB, program } = patch;\n    const isXG = BankSelectHacks.isSystemXG(system);\n    const xgDrums = BankSelectHacks.isXGDrums(bankMSB) && isXG;\n\n    // Check for exact match\n    let p = presets.find((p) => p.matches(patch));\n    if (p) {\n        // Special case:\n        // Non XG banks sometimes specify melodic \"MT\" presets at bank 127,\n        // Which matches XG banks.\n        // Testcase: 4gmgsmt-sf2_04-compat.sf2\n        // Only match if the preset declares itself as drums\n        if (!xgDrums || (xgDrums && p.isXGDrums)) {\n            return p;\n        }\n    }\n\n    // Helper to log failed exact matches\n    const returnReplacement = (pres: T) => {\n        SpessaSynthInfo(\n            `%cPreset %c${MIDIPatchTools.toMIDIString(patch)}%c not found. (${system}) Replaced with %c${pres.toString()}`,\n            consoleColors.warn,\n            consoleColors.unrecognized,\n            consoleColors.warn,\n            consoleColors.value\n        );\n    };\n\n    // No exact match...\n    if (isGMGSDrum) {\n        // GM/GS drums: check for the exact program match\n        let p = presets.find((p) => p.isGMGSDrum && p.program === program);\n        if (p) {\n            returnReplacement(p);\n            return p;\n        }\n\n        // No match, pick any matching drum\n        p = presets.find((p) => p.isAnyDrums && p.program === program);\n        if (p) {\n            returnReplacement(p);\n            return p;\n        }\n\n        // No match, pick the first drum preset, preferring GM/GS\n        p = getAnyDrums(presets, false);\n        returnReplacement(p);\n        return p;\n    }\n    if (xgDrums) {\n        // XG drums: Look for exact bank and program match\n        let p = presets.find((p) => p.program === program && p.isXGDrums);\n        if (p) {\n            returnReplacement(p);\n            return p;\n        }\n\n        // No match, pick any matching drum\n        p = presets.find((p) => p.isAnyDrums && p.program === program);\n        if (p) {\n            returnReplacement(p);\n            return p;\n        }\n\n        // Pick any drums, preferring XG\n        p = getAnyDrums(presets, true);\n        returnReplacement(p);\n        return p;\n    }\n    // Melodic preset\n    const matchingPrograms = presets.filter(\n        (p) => p.program === program && !p.isAnyDrums\n    );\n    if (matchingPrograms.length < 1) {\n        // The first preset\n        returnReplacement(presets[0]);\n        return presets[0];\n    }\n    if (isXG) {\n        // XG uses LSB so search for that.\n        p = matchingPrograms.find((p) => p.bankLSB === bankLSB);\n    } else {\n        // GS uses MSB so search for that.\n        p = matchingPrograms.find((p) => p.bankMSB === bankMSB);\n    }\n    if (p) {\n        returnReplacement(p);\n        return p;\n    }\n    // Special XG case: 64 on LSB can't default to 64 MSB.\n    // Testcase: Cybergate.mid\n    // Selects 64 LSB on warm pad, on DLSbyXG.dls it gets replaced with Bird 2 SFX\n    if (bankLSB !== 64 || !isXG) {\n        const bank = Math.max(bankMSB, bankLSB);\n        // Any matching bank.\n        p = matchingPrograms.find(\n            (p) => p.bankLSB === bank || p.bankMSB === bank\n        );\n        if (p) {\n            returnReplacement(p);\n            return p;\n        }\n    }\n    // The first matching program\n    returnReplacement(matchingPrograms[0]);\n    return matchingPrograms[0];\n}\n", "import { SpessaSynthWarn } from \"../../../utils/loggin\";\n\nimport type { SoundBankManagerListEntry } from \"../../../soundbank/types\";\nimport type { BasicSoundBank } from \"../../../soundbank/basic_soundbank/basic_soundbank\";\nimport { BasicPreset } from \"../../../soundbank/basic_soundbank/basic_preset\";\nimport type { PresetListEntry, SynthSystem } from \"../../types\";\nimport { selectPreset } from \"../../../soundbank/basic_soundbank/preset_selector\";\nimport {\n    type MIDIPatch,\n    MIDIPatchTools\n} from \"../../../soundbank/basic_soundbank/midi_patch\";\nimport { BankSelectHacks } from \"../../../utils/midi_hacks\";\n\nclass SoundBankManagerPreset extends BasicPreset {\n    public constructor(p: BasicPreset, offset: number) {\n        super(p.parentSoundBank, p.globalZone);\n        this.bankMSB = BankSelectHacks.addBankOffset(\n            p.bankMSB,\n            offset,\n            p.isXGDrums\n        );\n\n        this.name = p.name;\n        this.bankLSB = p.bankLSB;\n        this.isGMGSDrum = p.isGMGSDrum;\n        this.program = p.program;\n\n        this.genre = p.genre;\n        this.morphology = p.morphology;\n        this.library = p.library;\n        this.zones = p.zones;\n    }\n}\n\nexport class SoundBankManager {\n    /**\n     * All the sound banks, ordered from the most important to the least.\n     */\n    public soundBankList: SoundBankManagerListEntry[] = [];\n    private readonly presetListChangeCallback: () => unknown;\n\n    private selectablePresetList: SoundBankManagerPreset[] = [];\n\n    /**\n     * @param presetListChangeCallback Supplied by the parent synthesizer class,\n     * this is called whenever the preset list changes.\n     */\n    public constructor(presetListChangeCallback: () => unknown) {\n        this.presetListChangeCallback = presetListChangeCallback;\n    }\n\n    private _presetList: PresetListEntry[] = [];\n\n    /**\n     * The list of all presets in the sound bank stack.\n     */\n    public get presetList() {\n        return [...this._presetList];\n    }\n\n    /**\n     * The current sound bank priority order.\n     * @returns The IDs of the sound banks in the current order.\n     */\n    public get priorityOrder() {\n        return this.soundBankList.map((s) => s.id);\n    }\n\n    /**\n     * The current sound bank priority order.\n     * @param newList The new order of sound bank IDs.\n     */\n    public set priorityOrder(newList: string[]) {\n        this.soundBankList.sort(\n            (a, b) => newList.indexOf(a.id) - newList.indexOf(b.id)\n        );\n        this.generatePresetList();\n    }\n\n    /**\n     * Deletes a given sound bank by its ID.\n     * @param id the ID of the sound bank to delete.\n     */\n    public deleteSoundBank(id: string) {\n        if (this.soundBankList.length === 0) {\n            SpessaSynthWarn(\"1 soundbank left. Aborting!\");\n            return;\n        }\n        const index = this.soundBankList.findIndex((s) => s.id === id);\n        if (index === -1) {\n            throw new Error(`No sound bank with id \"${id}\"`);\n        }\n        this.soundBankList.splice(index, 1);\n        this.generatePresetList();\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Adds a new sound bank with a given ID, or replaces an existing one.\n     * @param font the sound bank to add.\n     * @param id the ID of the sound bank.\n     * @param bankOffset the bank offset of the sound bank.\n     */\n    public addSoundBank(font: BasicSoundBank, id: string, bankOffset = 0) {\n        const foundBank = this.soundBankList.find((s) => s.id === id);\n        if (foundBank !== undefined) {\n            // Replace\n            foundBank.soundBank = font;\n            foundBank.bankOffset = bankOffset;\n        } else {\n            this.soundBankList.push({\n                id: id,\n                soundBank: font,\n                bankOffset: bankOffset\n            });\n        }\n        this.generatePresetList();\n    }\n\n    /**\n     * Gets a given preset from the sound bank stack.\n     * @param patch The MIDI patch to search for.\n     * @param system The MIDI system to select the preset for.\n     * @returns An object containing the preset and its bank offset.\n     */\n    public getPreset(patch: MIDIPatch, system: SynthSystem): BasicPreset {\n        if (this.soundBankList.length < 1) {\n            throw new Error(\"No sound banks! Did you forget to add one?\");\n        }\n\n        return selectPreset(this.selectablePresetList, patch, system);\n    }\n\n    // Clears the sound bank list and destroys all sound banks.\n    public destroy() {\n        this.soundBankList.forEach((s) => {\n            s.soundBank.destroySoundBank();\n        });\n        this.soundBankList = [];\n    }\n\n    private generatePresetList() {\n        const presetList = new Array<SoundBankManagerPreset>();\n\n        const addedPresets = new Set<string>();\n        this.soundBankList.forEach((s) => {\n            const bank = s.soundBank;\n            const bankOffset = s.bankOffset;\n            bank.presets.forEach((p) => {\n                const selectablePreset = new SoundBankManagerPreset(\n                    p,\n                    bankOffset\n                );\n                if (!addedPresets.has(selectablePreset.toMIDIString())) {\n                    addedPresets.add(selectablePreset.toMIDIString());\n                    presetList.push(selectablePreset);\n                }\n            });\n        });\n        presetList.sort(MIDIPatchTools.sorter.bind(MIDIPatchTools));\n        this.selectablePresetList = presetList;\n        this._presetList = presetList.map((p) => {\n            return {\n                bankMSB: p.bankMSB,\n                bankLSB: p.bankLSB,\n                program: p.program,\n                isGMGSDrum: p.isGMGSDrum,\n                name: p.name,\n                isAnyDrums: p.isAnyDrums\n            };\n        });\n        this.presetListChangeCallback();\n    }\n}\n", "import type { MIDIChannel } from \"../midi_channel\";\nimport type { Voice } from \"../voice\";\nimport { generatorTypes } from \"../../../../soundbank/basic_soundbank/generator_types\";\n\n/**\n * Stereo_panner.ts\n * purpose: pans a given voice out to the stereo output and to the effects' outputs\n */\n\nexport const PAN_SMOOTHING_FACTOR = 0.05;\n\n// Optimized for spessasynth_lib's effects\nexport const REVERB_DIVIDER = 3070;\nexport const CHORUS_DIVIDER = 2000;\nconst HALF_PI = Math.PI / 2;\n\nconst MIN_PAN = -500;\nconst MAX_PAN = 500;\nconst PAN_RESOLUTION = MAX_PAN - MIN_PAN;\n\n// Initialize pan lookup tables\nconst panTableLeft = new Float32Array(PAN_RESOLUTION + 1);\nconst panTableRight = new Float32Array(PAN_RESOLUTION + 1);\nfor (let pan = MIN_PAN; pan <= MAX_PAN; pan++) {\n    // Clamp to 0-1\n    const realPan = (pan - MIN_PAN) / PAN_RESOLUTION;\n    const tableIndex = pan - MIN_PAN;\n    panTableLeft[tableIndex] = Math.cos(HALF_PI * realPan);\n    panTableRight[tableIndex] = Math.sin(HALF_PI * realPan);\n}\n\n/**\n * Pans the voice to the given output buffers\n * @param voice The voice to pan.\n * @param inputBuffer The input buffer containing the audio data for the voice (mono).\n * @param outputLeft The left output buffer to mix the voice into.\n * @param outputRight The right output buffer to mix the voice into.\n * @param reverbLeft The left reverb output buffer.\n * @param reverbRight The right reverb output buffer.\n * @param chorusLeft The left chorus output buffer.\n * @param chorusRight The right chorus output buffer.\n * @param startIndex The start index offset in the output buffers where the voice's audio data should be mixed in.\n */\nexport function panAndMixVoice(\n    this: MIDIChannel,\n    voice: Voice,\n    inputBuffer: Float32Array,\n    outputLeft: Float32Array,\n    outputRight: Float32Array,\n    reverbLeft: Float32Array,\n    reverbRight: Float32Array,\n    chorusLeft: Float32Array,\n    chorusRight: Float32Array,\n    startIndex: number\n) {\n    if (isNaN(inputBuffer[0])) {\n        return;\n    }\n    /**\n     * Clamp -500 to 500\n     */\n    let pan: number;\n    if (voice.overridePan) {\n        pan = voice.overridePan;\n    } else {\n        // Smooth out pan to prevent clicking\n        voice.currentPan +=\n            (voice.modulatedGenerators[generatorTypes.pan] - voice.currentPan) *\n            this.synthProps.panSmoothingFactor;\n        pan = voice.currentPan;\n    }\n\n    const gain =\n        this.synthProps.masterParameters.masterGain *\n        this.synthProps.midiVolume *\n        voice.gain;\n    const index = ~~(pan + 500);\n    // Get voice's gain levels for each channel\n    const gainLeft = panTableLeft[index] * gain * this.synthProps.panLeft;\n    const gainRight = panTableRight[index] * gain * this.synthProps.panRight;\n\n    // Disable reverb and chorus if necessary\n    if (this.synth.enableEffects) {\n        const reverbSend =\n            voice.modulatedGenerators[generatorTypes.reverbEffectsSend];\n        if (reverbSend > 0) {\n            // Reverb is mono so we need to multiply by gain\n            const reverbGain =\n                this.synthProps.masterParameters.reverbGain *\n                this.synthProps.reverbSend *\n                gain *\n                (reverbSend / REVERB_DIVIDER);\n            for (let i = 0; i < inputBuffer.length; i++) {\n                const idx = i + startIndex;\n                reverbLeft[idx] += reverbGain * inputBuffer[i];\n                reverbRight[idx] += reverbGain * inputBuffer[i];\n            }\n        }\n\n        const chorusSend =\n            voice.modulatedGenerators[generatorTypes.chorusEffectsSend];\n        if (chorusSend > 0) {\n            // Chorus is stereo so we do not need to\n            const chorusGain =\n                this.synthProps.masterParameters.chorusGain *\n                this.synthProps.chorusSend *\n                (chorusSend / CHORUS_DIVIDER);\n            const chorusLeftGain = gainLeft * chorusGain;\n            const chorusRightGain = gainRight * chorusGain;\n            for (let i = 0; i < inputBuffer.length; i++) {\n                const idx = i + startIndex;\n                chorusLeft[idx] += chorusLeftGain * inputBuffer[i];\n                chorusRight[idx] += chorusRightGain * inputBuffer[i];\n            }\n        }\n    }\n\n    // Mix down the audio data\n    if (gainLeft > 0) {\n        for (let i = 0; i < inputBuffer.length; i++) {\n            outputLeft[i + startIndex] += gainLeft * inputBuffer[i];\n        }\n    }\n    if (gainRight > 0) {\n        for (let i = 0; i < inputBuffer.length; i++) {\n            outputRight[i + startIndex] += gainRight * inputBuffer[i];\n        }\n    }\n}\n", "import { absCentsToHz, decibelAttenuationToGain } from \"../unit_converter\";\nimport type { Voice } from \"../voice\";\nimport { generatorTypes } from \"../../../../soundbank/basic_soundbank/generator_types\";\n\n/**\n * Lowpass_filter.ts\n * purpose: applies a low pass filter to a voice\n * note to self: a lot of tricks and come from fluidsynth.\n * They are the real smart guys.\n * Shoutout to them!\n * Give their repo a star over at:\n * https://github.com/FluidSynth/fluidsynth\n */\n\nexport const FILTER_SMOOTHING_FACTOR = 0.1;\n\n// Represents a single cached coefficient.\ninterface CachedCoefficient {\n    // Filter coefficient 1.\n    a0: number;\n    // Filter coefficient 2.\n    a1: number;\n    // Filter coefficient 3.\n    a2: number;\n    // Filter coefficient 4.\n    a3: number;\n    // Filter coefficient 5.\n    a4: number;\n}\n\nexport class LowpassFilter {\n    /**\n     * Cached coefficient calculations.\n     * stored as cachedCoefficients[resonanceCb][currentInitialFc].\n     */\n    private static cachedCoefficients: CachedCoefficient[][] = [];\n    /**\n     * Resonance in centibels.\n     */\n    public resonanceCb = 0;\n    /**\n     * Current cutoff frequency in absolute cents.\n     */\n    public currentInitialFc = 13500;\n    /**\n     * Filter coefficient 1.\n     */\n    private a0 = 0;\n    /**\n     * Filter coefficient 2.\n     */\n    private a1 = 0;\n    /**\n     * Filter coefficient 3.\n     */\n    private a2 = 0;\n    /**\n     * Filter coefficient 4.\n     */\n    private a3 = 0;\n    /**\n     * Filter coefficient 5.\n     */\n    private a4 = 0;\n    /**\n     * Input history 1.\n     */\n    private x1 = 0;\n    /**\n     * Input history 2.\n     */\n    private x2 = 0;\n    /**\n     * Output history 1.\n     */\n    private y1 = 0;\n    /**\n     * Output history 2.\n     */\n    private y2 = 0;\n    /**\n     * For tracking the last cutoff frequency in the apply method, absolute cents.\n     * Set to infinity to force recalculation.\n     */\n    private lastTargetCutoff = Infinity;\n\n    /**\n     * Used for tracking if the filter has been initialized.\n     */\n    private initialized = false;\n    /**\n     * Filter's sample rate in Hz.\n     */\n    private sampleRate;\n\n    /**\n     * Maximum cutoff frequency in Hz.\n     * This is used to prevent aliasing and ensure the filter operates within the valid frequency range.\n     */\n    private maxCutoff: number;\n\n    /**\n     * Initializes a new instance of the filter.\n     * @param sampleRate the sample rate of the audio engine in Hz.\n     */\n    public constructor(sampleRate: number) {\n        this.sampleRate = sampleRate;\n        this.maxCutoff = sampleRate * 0.45;\n    }\n\n    /**\n     * Applies the lowpass filter to the output buffer of a voice.\n     * @param voice The voice to apply the filter to.\n     * @param outputBuffer The output buffer to filter.\n     * @param fcExcursion The frequency excursion in cents to apply to the filter.\n     * @param smoothingFactor The smoothing factor for the filter as determined by the parent synthesizer.\n     */\n    public static apply(\n        voice: Voice,\n        outputBuffer: Float32Array,\n        fcExcursion: number,\n        smoothingFactor: number\n    ) {\n        const initialFc =\n            voice.modulatedGenerators[generatorTypes.initialFilterFc];\n        const filter: LowpassFilter = voice.filter;\n\n        if (!filter.initialized) {\n            // Filter initialization, set the current fc to target\n            filter.initialized = true;\n            filter.currentInitialFc = initialFc;\n        } else {\n            /* Note:\n             * We only smooth out the initialFc part,\n             * the modulation envelope and LFO excursions are not smoothed.\n             */\n            filter.currentInitialFc +=\n                (initialFc - filter.currentInitialFc) * smoothingFactor;\n        }\n\n        // The final cutoff for this calculation\n        const targetCutoff = filter.currentInitialFc + fcExcursion;\n        const modulatedResonance =\n            voice.modulatedGenerators[generatorTypes.initialFilterQ];\n        /* Note:\n         * the check for initialFC is because of the filter optimization\n         * (if cents are the maximum then the filter is open)\n         * filter cannot use this optimization if it's dynamic (see #53), and\n         * the filter can only be dynamic if the initial filter is not open\n         */\n        if (\n            filter.currentInitialFc > 13499 &&\n            targetCutoff > 13499 &&\n            modulatedResonance === 0\n        ) {\n            filter.currentInitialFc = 13500;\n            return; // Filter is open\n        }\n\n        // Check if the frequency has changed. if so, calculate new coefficients\n        if (\n            Math.abs(filter.lastTargetCutoff - targetCutoff) > 1 ||\n            filter.resonanceCb !== modulatedResonance\n        ) {\n            filter.lastTargetCutoff = targetCutoff;\n            filter.resonanceCb = modulatedResonance;\n            LowpassFilter.calculateCoefficients(filter, targetCutoff);\n        }\n\n        // Filter the input\n        // Initial filtering code was ported from meltysynth created by sinshu.\n        for (let i = 0; i < outputBuffer.length; i++) {\n            const input = outputBuffer[i];\n            const filtered =\n                filter.a0 * input +\n                filter.a1 * filter.x1 +\n                filter.a2 * filter.x2 -\n                filter.a3 * filter.y1 -\n                filter.a4 * filter.y2;\n\n            // Set buffer\n            filter.x2 = filter.x1;\n            filter.x1 = input;\n            filter.y2 = filter.y1;\n            filter.y1 = filtered;\n\n            outputBuffer[i] = filtered;\n        }\n    }\n\n    /**\n     * Calculates the filter coefficients based on the current resonance and cutoff frequency and caches them.\n     * @param filter The lowpass filter instance to calculate coefficients for.\n     * @param cutoffCents The cutoff frequency in cents.\n     */\n    public static calculateCoefficients(\n        filter: LowpassFilter,\n        cutoffCents: number\n    ) {\n        cutoffCents = ~~cutoffCents; // Math.floor\n        const qCb = filter.resonanceCb;\n        // Check if these coefficients were already cached\n        const cached = LowpassFilter.cachedCoefficients?.[qCb]?.[cutoffCents];\n        if (cached !== undefined) {\n            filter.a0 = cached.a0;\n            filter.a1 = cached.a1;\n            filter.a2 = cached.a2;\n            filter.a3 = cached.a3;\n            filter.a4 = cached.a4;\n            return;\n        }\n        let cutoffHz = absCentsToHz(cutoffCents);\n\n        // Fix cutoff on low sample rates\n        cutoffHz = Math.min(cutoffHz, filter.maxCutoff);\n\n        // The coefficient calculation code was originally ported from meltysynth by sinshu.\n        // Turn resonance to gain, -3.01 so it gives a non-resonant peak\n        const qDb = qCb / 10;\n        // -1 because it's attenuation, and we don't want attenuation\n        const resonanceGain = decibelAttenuationToGain(-(qDb - 3.01));\n\n        // The sf spec asks for a reduction in gain based on the Q value.\n        // Note that we calculate it again,\n        // Without the 3.01-peak offset as it only applies to the coefficients, not the gain.\n        const qGain = 1 / Math.sqrt(decibelAttenuationToGain(-qDb));\n\n        // Note: no sin or cos tables are used here as the coefficients are cached\n        const w = (2 * Math.PI * cutoffHz) / filter.sampleRate;\n        const cosw = Math.cos(w);\n        const alpha = Math.sin(w) / (2 * resonanceGain);\n\n        const b1 = (1 - cosw) * qGain;\n        const b0 = b1 / 2;\n        const b2 = b0;\n        const a0 = 1 + alpha;\n        const a1 = -2 * cosw;\n        const a2 = 1 - alpha;\n\n        const toCache: CachedCoefficient = {\n            a0: b0 / a0,\n            a1: b1 / a0,\n            a2: b2 / a0,\n            a3: a1 / a0,\n            a4: a2 / a0\n        };\n        filter.a0 = toCache.a0;\n        filter.a1 = toCache.a1;\n        filter.a2 = toCache.a2;\n        filter.a3 = toCache.a3;\n        filter.a4 = toCache.a4;\n\n        LowpassFilter.cachedCoefficients[qCb] ??= [];\n        // Cache the coefficients\n        LowpassFilter.cachedCoefficients[qCb][cutoffCents] = toCache;\n    }\n}\n\n// Precompute all the cutoffs for 0q (most common)\nconst dummy = new LowpassFilter(44100);\ndummy.resonanceCb = 0;\n// Sf spec section 8.1.3: initialFilterFc ranges from 1500 to 13,500 cents\nfor (let i = 1500; i < 13500; i++) {\n    dummy.currentInitialFc = i;\n    LowpassFilter.calculateCoefficients(dummy, i);\n}\n", "import type { SynthProcessorOptions } from \"../../types\";\n\nexport const DEFAULT_SYNTH_OPTIONS: SynthProcessorOptions = {\n    enableEventSystem: true,\n    initialTime: 0,\n    enableEffects: true\n};\n", "import type { MIDIChannel } from \"../../engine_components/midi_channel\";\nimport type { Voice } from \"../../engine_components/voice\";\nimport type { SpessaSynthProcessor } from \"../../../processor\";\n\n/**\n * Gets the priority of a voice based on its channel and state.\n * Higher priority means the voice is more important and should be kept longer.\n * @param channel The MIDI audio channel of the voice.\n * @param voice The voice to evaluate.\n * @returns The priority score of the voice.\n */\nfunction getPriority(channel: MIDIChannel, voice: Voice): number {\n    let priority = 0;\n    if (channel.drumChannel) {\n        // Important\n        priority += 5;\n    }\n    if (voice.isInRelease) {\n        // Not important\n        priority -= 5;\n    }\n    // Less velocity = less important\n    priority += voice.velocity / 25; // Map to 0-5\n    // The newer, more important\n    priority -= voice.volumeEnvelope.state;\n    if (voice.isInRelease) {\n        priority -= 5;\n    }\n    priority -= voice.volumeEnvelope.currentAttenuationDb / 50;\n    return priority;\n}\n\n/**\n * Kills the specified number of voices based on their priority.\n * This function will remove the least important voices from all channels.\n * @param amount The number of voices to remove.\n */\nexport function killVoicesIntenral(this: SpessaSynthProcessor, amount: number) {\n    const allVoices: {\n        channel: MIDIChannel;\n        voice: Voice;\n        priority: number;\n    }[] = [];\n    for (const channel of this.midiChannels) {\n        for (const voice of channel.voices) {\n            if (!voice.finished) {\n                const priority = getPriority(channel, voice);\n                allVoices.push({ channel, voice, priority });\n            }\n        }\n    }\n\n    // Step 2: Sort voices by priority (ascending order)\n    allVoices.sort((a, b) => a.priority - b.priority);\n    const voicesToRemove = allVoices.slice(0, amount);\n\n    for (const { channel, voice } of voicesToRemove) {\n        const index = channel.voices.indexOf(voice);\n        if (index > -1) {\n            channel.voices.splice(index, 1);\n        }\n    }\n}\n", "import { timecentsToSeconds } from \"../unit_converter\";\nimport { getModulatorCurveValue } from \"../modulator_curves\";\nimport type { Voice } from \"../voice\";\nimport { generatorTypes } from \"../../../../soundbank/basic_soundbank/generator_types\";\nimport { modulatorCurveTypes } from \"../../../../soundbank/enums\";\n\n/**\n * Modulation_envelope.ts\n * purpose: calculates the modulation envelope for the given voice\n */\nconst MODENV_PEAK = 1;\n\n// 1000 should be precise enough\nconst CONVEX_ATTACK = new Float32Array(1000);\nfor (let i = 0; i < CONVEX_ATTACK.length; i++) {\n    // This makes the db linear (I think)\n    CONVEX_ATTACK[i] = getModulatorCurveValue(\n        0,\n        modulatorCurveTypes.convex,\n        i / 1000\n    );\n}\n\nexport class ModulationEnvelope {\n    /**\n     * The attack duration, in seconds.\n     */\n    protected attackDuration = 0;\n    /**\n     * The decay duration, in seconds.\n     */\n    protected decayDuration = 0;\n\n    /**\n     * The hold duration, in seconds.\n     */\n    protected holdDuration = 0;\n\n    /**\n     * Release duration, in seconds.\n     */\n    protected releaseDuration = 0;\n\n    /**\n     * The sustain level 0-1.\n     */\n    protected sustainLevel = 0;\n\n    /**\n     * Delay phase end time in seconds, absolute (audio context time).\n     */\n    protected delayEnd = 0;\n    /**\n     * Attack phase end time in seconds, absolute (audio context time).\n     */\n    protected attackEnd = 0;\n    /**\n     * Hold phase end time in seconds, absolute (audio context time).\n     */\n    protected holdEnd = 0;\n    /**\n     * Decay phase end time in seconds, absolute (audio context time).\n     */\n    protected decayEnd = 0;\n\n    /**\n     * The level of the envelope when the release phase starts.\n     */\n    protected releaseStartLevel = 0;\n\n    /**\n     * The current modulation envelope value.\n     */\n    protected currentValue = 0;\n\n    /**\n     * Starts the release phase in the envelope.\n     * @param voice the voice this envelope belongs to.\n     */\n    public static startRelease(voice: Voice) {\n        ModulationEnvelope.recalculate(voice);\n    }\n\n    /**\n     * @param voice the voice to recalculate.\n     */\n    public static recalculate(voice: Voice) {\n        const env = voice.modulationEnvelope;\n\n        // In release? Might need to recalculate the value as it can be modulated\n        if (voice.isInRelease) {\n            env.releaseStartLevel = ModulationEnvelope.getValue(\n                voice,\n                voice.releaseStartTime,\n                true\n            );\n        }\n\n        env.sustainLevel =\n            1 - voice.modulatedGenerators[generatorTypes.sustainModEnv] / 1000;\n\n        env.attackDuration = timecentsToSeconds(\n            voice.modulatedGenerators[generatorTypes.attackModEnv]\n        );\n\n        const decayKeyExcursionCents =\n            (60 - voice.midiNote) *\n            voice.modulatedGenerators[generatorTypes.keyNumToModEnvDecay];\n        const decayTime = timecentsToSeconds(\n            voice.modulatedGenerators[generatorTypes.decayModEnv] +\n                decayKeyExcursionCents\n        );\n        // According to the specification, the decay time is the time it takes to reach 0% from 100%.\n        // Calculate the time to reach actual sustain level,\n        // For example, sustain 0.6 will be 0.4 of the decay time\n        env.decayDuration = decayTime * (1 - env.sustainLevel);\n\n        const holdKeyExcursionCents =\n            (60 - voice.midiNote) *\n            voice.modulatedGenerators[generatorTypes.keyNumToModEnvHold];\n        env.holdDuration = timecentsToSeconds(\n            holdKeyExcursionCents +\n                voice.modulatedGenerators[generatorTypes.holdModEnv]\n        );\n\n        // Min is set to -7200 to prevent lowpass clicks\n        const releaseTime = timecentsToSeconds(\n            Math.max(\n                voice.modulatedGenerators[generatorTypes.releaseModEnv],\n                -7200\n            )\n        );\n        // Release time is from the full level to 0%\n        // To get the actual time, multiply by the release start level\n        env.releaseDuration = releaseTime * env.releaseStartLevel;\n\n        env.delayEnd =\n            voice.startTime +\n            timecentsToSeconds(\n                voice.modulatedGenerators[generatorTypes.delayModEnv]\n            );\n        env.attackEnd = env.delayEnd + env.attackDuration;\n        env.holdEnd = env.attackEnd + env.holdDuration;\n        env.decayEnd = env.holdEnd + env.decayDuration;\n    }\n\n    /**\n     * Calculates the current modulation envelope value for the given time and voice.\n     * @param voice the voice we are working on.\n     * @param currentTime in seconds.\n     * @param ignoreRelease if true, it will compute the value as if the voice was not released.\n     * @returns  mod env value, from 0 to 1.\n     */\n    public static getValue(\n        voice: Voice,\n        currentTime: number,\n        ignoreRelease = false\n    ): number {\n        const env = voice.modulationEnvelope;\n        if (voice.isInRelease && !ignoreRelease) {\n            // If the voice is still in the delay phase,\n            // Start level will be 0 that will result in divide by zero\n            if (env.releaseStartLevel === 0) {\n                return 0;\n            }\n            return Math.max(\n                0,\n                (1 -\n                    (currentTime - voice.releaseStartTime) /\n                        env.releaseDuration) *\n                    env.releaseStartLevel\n            );\n        }\n\n        if (currentTime < env.delayEnd) {\n            env.currentValue = 0; // Delay\n        } else if (currentTime < env.attackEnd) {\n            // Modulation envelope uses convex curve for attack\n            env.currentValue =\n                CONVEX_ATTACK[\n                    ~~(\n                        (1 -\n                            (env.attackEnd - currentTime) /\n                                env.attackDuration) *\n                        1000\n                    )\n                ];\n        } else if (currentTime < env.holdEnd) {\n            // Hold: stay at 1\n            env.currentValue = MODENV_PEAK;\n        } else if (currentTime < env.decayEnd) {\n            // Decay: linear ramp from 1 to sustain level\n            env.currentValue =\n                (1 - (env.decayEnd - currentTime) / env.decayDuration) *\n                    (env.sustainLevel - MODENV_PEAK) +\n                MODENV_PEAK;\n        } else {\n            // Sustain: stay at sustain level\n            env.currentValue = env.sustainLevel;\n        }\n        return env.currentValue;\n    }\n}\n", "import type { SampleLoopingMode } from \"../../types\";\n\nexport class AudioSample {\n    /**\n     * The sample's audio data\n     */\n    public readonly sampleData: Float32Array;\n    /**\n     * Current playback step (rate)\n     */\n    public readonly playbackStep: number = 0;\n    /**\n     * Current position in the sample\n     */\n    public cursor = 0;\n    /**\n     * MIDI root key of the sample\n     */\n    public readonly rootKey: number = 0;\n    /**\n     * Start position of the loop\n     */\n    public loopStart = 0;\n    /**\n     * End position of the loop\n     */\n    public loopEnd = 0;\n    /**\n     * End position of the sample\n     */\n    public end = 0;\n    /**\n     * Looping mode of the sample:\n     * 0 - no loop\n     * 1 - loop\n     * 2 - UNOFFICIAL: polyphone 2.4 added start on release\n     * 3 - loop then play when released\n     */\n    public loopingMode: SampleLoopingMode = 0;\n    /**\n     * Indicates if the sample is currently looping\n     */\n    public isLooping = false;\n\n    /**\n     * @param data\n     * @param playbackStep the playback step, a single increment\n     * @param cursorStart the sample id which starts the playback\n     * @param rootKey MIDI root key\n     * @param loopStart loop start index\n     * @param loopEnd loop end index\n     * @param endIndex sample end index (for end offset)\n     * @param loopingMode sample looping mode\n     */\n    public constructor(\n        data: Float32Array,\n        playbackStep: number,\n        cursorStart: number,\n        rootKey: number,\n        loopStart: number,\n        loopEnd: number,\n        endIndex: number,\n        loopingMode: SampleLoopingMode\n    ) {\n        this.sampleData = data;\n        this.playbackStep = playbackStep;\n        this.cursor = cursorStart;\n        this.rootKey = rootKey;\n        this.loopStart = loopStart;\n        this.loopEnd = loopEnd;\n        this.end = endIndex;\n        this.loopingMode = loopingMode;\n        this.isLooping = this.loopingMode === 1 || this.loopingMode === 3;\n    }\n}", "/**\n * Voice.ts\n * purpose: prepares Voices from sample and generator data\n */\nimport { SpessaSynthProcessor } from \"../../processor\";\nimport { SpessaSynthWarn } from \"../../../utils/loggin\";\nimport { LowpassFilter } from \"./dsp_chain/lowpass_filter\";\nimport { VolumeEnvelope } from \"./dsp_chain/volume_envelope\";\nimport { ModulationEnvelope } from \"./dsp_chain/modulation_envelope\";\nimport { addAndClampGenerator } from \"../../../soundbank/basic_soundbank/generator\";\nimport { Modulator } from \"../../../soundbank/basic_soundbank/modulator\";\nimport {\n    GENERATORS_AMOUNT,\n    generatorTypes\n} from \"../../../soundbank/basic_soundbank/generator_types\";\nimport type { SampleLoopingMode, VoiceList } from \"../../types\";\nimport type { BasicPreset } from \"../../../soundbank/basic_soundbank/basic_preset\";\nimport { AudioSample } from \"./audio_sample\";\nimport { MIN_EXCLUSIVE_LENGTH, MIN_NOTE_LENGTH } from \"./synth_constants\";\n\nconst EXCLUSIVE_CUTOFF_TIME = -2320;\nconst EXCLUSIVE_MOD_CUTOFF_TIME = -1130; // Less because filter shenanigans\n\n/**\n * Voice represents a single instance of the\n * SoundFont2 synthesis model.\n * That is:\n * A wavetable oscillator (sample)\n * A volume envelope (volumeEnvelope)\n * A modulation envelope (modulationEnvelope)\n * Generators (generators and modulatedGenerators)\n * Modulators (modulators)\n * And MIDI params such as channel, MIDI note, velocity\n */\nexport class Voice {\n    /**\n     * The sample of the voice.\n     */\n    public sample: AudioSample;\n\n    /**\n     * Lowpass filter applied to the voice.\n     */\n    public filter: LowpassFilter;\n\n    /**\n     * Linear gain of the voice. Used with Key Modifiers.\n     */\n    public gain = 1;\n\n    /**\n     * The unmodulated (copied to) generators of the voice.\n     */\n    public generators: Int16Array;\n\n    /**\n     * The voice's modulators.\n     */\n    public modulators: Modulator[] = [];\n\n    /**\n     * Resonance offset, it is affected by the default resonant modulator\n     */\n    public resonanceOffset = 0;\n\n    /**\n     * The generators in real-time, affected by modulators.\n     * This is used during rendering.\n     */\n    public modulatedGenerators: Int16Array;\n\n    /**\n     * Indicates if the voice is finished.\n     */\n    public finished = false;\n\n    /**\n     * Indicates if the voice is in the release phase.\n     */\n    public isInRelease = false;\n\n    /**\n     * Velocity of the note.\n     */\n    public velocity = 0;\n\n    /**\n     * MIDI note number.\n     */\n    public midiNote = 0;\n\n    /**\n     * The pressure of the voice\n     */\n    public pressure = 0;\n\n    /**\n     * Target key for the note.\n     */\n    public targetKey = 0;\n\n    /**\n     * Modulation envelope.\n     */\n    public modulationEnvelope: ModulationEnvelope = new ModulationEnvelope();\n\n    /**\n     * Volume envelope.\n     */\n    public volumeEnvelope: VolumeEnvelope;\n\n    /**\n     * Start time of the voice, absolute.\n     */\n    public startTime = 0;\n\n    /**\n     * Start time of the release phase, absolute.\n     */\n    public releaseStartTime = Infinity;\n\n    /**\n     * Current tuning in cents.\n     */\n    public currentTuningCents = 0;\n\n    /**\n     * Current calculated tuning. (as in ratio)\n     */\n    public currentTuningCalculated = 1;\n\n    /**\n     * From -500 to 500.\n     */\n    public currentPan = 0;\n\n    /**\n     * If MIDI Tuning Standard is already applied (at note-on time),\n     * this will be used to take the values at real-time tuning as \"midiNote\"\n     * property contains the tuned number.\n     * see  SpessaSynth#29 comment by @paulikaro\n     */\n    public realKey: number;\n\n    /**\n     * Initial key to glide from, MIDI Note number. If -1, the portamento is OFF.\n     */\n    public portamentoFromKey = -1;\n\n    /**\n     * Duration of the linear glide, in seconds.\n     */\n    public portamentoDuration = 0;\n\n    /**\n     * From -500 to 500, where zero means disabled (use the channel pan). Used for random pan.\n     */\n    public overridePan = 0;\n\n    /**\n     * Exclusive class number for hi-hats etc.\n     */\n    public exclusiveClass = 0;\n\n    /**\n     * Creates a Voice.\n     */\n    public constructor(\n        sampleRate: number,\n        audioSample: AudioSample,\n        midiNote: number,\n        velocity: number,\n        currentTime: number,\n        targetKey: number,\n        realKey: number,\n        generators: Int16Array,\n        modulators: Modulator[]\n    ) {\n        this.sample = audioSample;\n        this.generators = generators;\n        this.exclusiveClass = this.generators[generatorTypes.exclusiveClass];\n        this.modulatedGenerators = new Int16Array(generators);\n        this.modulators = modulators;\n        this.filter = new LowpassFilter(sampleRate);\n        this.velocity = velocity;\n        this.midiNote = midiNote;\n        this.startTime = currentTime;\n        this.targetKey = targetKey;\n        this.realKey = realKey;\n        this.volumeEnvelope = new VolumeEnvelope(\n            sampleRate,\n            generators[generatorTypes.sustainVolEnv]\n        );\n    }\n\n    /**\n     * Copies a voice.\n     */\n    public static copyFrom(voice: Voice, currentTime: number, realKey: number) {\n        const sampleToCopy = voice.sample;\n        const sample = new AudioSample(\n            sampleToCopy.sampleData,\n            sampleToCopy.playbackStep,\n            sampleToCopy.cursor,\n            sampleToCopy.rootKey,\n            sampleToCopy.loopStart,\n            sampleToCopy.loopEnd,\n            sampleToCopy.end,\n            sampleToCopy.loopingMode\n        );\n        return new Voice(\n            voice.volumeEnvelope.sampleRate,\n            sample,\n            voice.midiNote,\n            voice.velocity,\n            currentTime,\n            voice.targetKey,\n            realKey,\n            new Int16Array(voice.generators),\n            voice.modulators.map(Modulator.copyFrom.bind(Modulator))\n        );\n    }\n\n    /**\n     * Releases the voice as exclusiveClass.\n     */\n    public exclusiveRelease(currentTime: number) {\n        this.release(currentTime, MIN_EXCLUSIVE_LENGTH);\n        this.modulatedGenerators[generatorTypes.releaseVolEnv] =\n            EXCLUSIVE_CUTOFF_TIME; // Make the release nearly instant\n        this.modulatedGenerators[generatorTypes.releaseModEnv] =\n            EXCLUSIVE_MOD_CUTOFF_TIME;\n        VolumeEnvelope.recalculate(this);\n        ModulationEnvelope.recalculate(this);\n    }\n\n    /**\n     * Stops the voice\n     * @param currentTime\n     * @param minNoteLength minimum note length in seconds\n     */\n    public release(currentTime: number, minNoteLength = MIN_NOTE_LENGTH) {\n        this.releaseStartTime = currentTime;\n        // Check if the note is shorter than the min note time, if so, extend it\n        if (this.releaseStartTime - this.startTime < minNoteLength) {\n            this.releaseStartTime = this.startTime + minNoteLength;\n        }\n    }\n}\n\n/**\n * @param preset the preset to get voices for\n * @param midiNote the MIDI note to use\n * @param velocity the velocity to use\n * @param realKey the real MIDI note if the \"midiNote\" was changed by MIDI Tuning Standard\n * @returns output is an array of Voices\n */\nexport function getVoicesForPresetInternal(\n    this: SpessaSynthProcessor,\n    preset: BasicPreset,\n    midiNote: number,\n    velocity: number,\n    realKey: number\n): VoiceList {\n    const cached = this.getCachedVoice(preset, midiNote, velocity);\n    // If cached, return it!\n    if (cached !== undefined) {\n        return cached.map((v) =>\n            Voice.copyFrom(v, this.currentSynthTime, realKey)\n        );\n    }\n    // Not cached...\n    const voices: VoiceList = preset\n        .getSynthesisData(midiNote, velocity)\n        .reduce((voices: VoiceList, synthesisData) => {\n            if (synthesisData.sample.getAudioData() === undefined) {\n                SpessaSynthWarn(\n                    `Discarding invalid sample: ${synthesisData.sample.name}`\n                );\n                return voices;\n            }\n\n            // Create the generator list\n            const generators = new Int16Array(GENERATORS_AMOUNT);\n            // Apply and sum the gens\n            for (let i = 0; i < 60; i++) {\n                generators[i] = addAndClampGenerator(\n                    i,\n                    synthesisData.presetGenerators,\n                    synthesisData.instrumentGenerators\n                );\n            }\n\n            // EMU initial attenuation correction, multiply initial attenuation by 0.4!\n            // All EMU sound cards have this quirk, and all sf2 editors and players emulate it too\n            generators[generatorTypes.initialAttenuation] = Math.floor(\n                generators[generatorTypes.initialAttenuation] * 0.4\n            );\n\n            // Key override\n            let rootKey = synthesisData.sample.originalKey;\n            if (generators[generatorTypes.overridingRootKey] > -1) {\n                rootKey = generators[generatorTypes.overridingRootKey];\n            }\n\n            let targetKey = midiNote;\n            if (generators[generatorTypes.keyNum] > -1) {\n                targetKey = generators[generatorTypes.keyNum];\n            }\n\n            // Determine looping mode now. if the loop is too small, disable\n            const loopStart = synthesisData.sample.loopStart;\n            const loopEnd = synthesisData.sample.loopEnd;\n            const loopingMode = generators[\n                generatorTypes.sampleModes\n            ] as SampleLoopingMode;\n            /**\n             * Create the sample\n             * offsets are calculated at note on time (to allow for modulation of them)\n             */\n            const sampleData = synthesisData.sample.getAudioData();\n            const audioSample: AudioSample = new AudioSample(\n                sampleData,\n                (synthesisData.sample.sampleRate / this.sampleRate) *\n                    Math.pow(2, synthesisData.sample.pitchCorrection / 1200), // Cent tuning\n                0,\n                rootKey,\n                loopStart,\n                loopEnd,\n                Math.floor(sampleData.length) - 1,\n                loopingMode\n            );\n            // Velocity override\n            // Note: use a separate velocity to not override the cached velocity\n            // Testcase: LiveHQ Natural SoundFont GM - the Glockenspiel preset\n            let voiceVelocity = velocity;\n            if (generators[generatorTypes.velocity] > -1) {\n                voiceVelocity = generators[generatorTypes.velocity];\n            }\n\n            // Uncomment to print debug info\n            voices.push(\n                new Voice(\n                    this.sampleRate,\n                    audioSample,\n                    midiNote,\n                    voiceVelocity,\n                    this.currentSynthTime,\n                    targetKey,\n                    realKey,\n                    generators,\n                    synthesisData.modulators.map(\n                        Modulator.copyFrom.bind(Modulator)\n                    )\n                )\n            );\n            return voices;\n        }, []);\n    // Cache the voice\n    this.setCachedVoice(preset, midiNote, velocity, voices);\n    return voices.map((v) => Voice.copyFrom(v, this.currentSynthTime, realKey));\n}\n\n/**\n * @param channel channel to get voices for\n * @param midiNote the MIDI note to use\n * @param velocity the velocity to use\n * @param realKey the real MIDI note if the \"midiNote\" was changed by MIDI Tuning Standard\n * @returns output is an array of Voices\n */\nexport function getVoicesInternal(\n    this: SpessaSynthProcessor,\n    channel: number,\n    midiNote: number,\n    velocity: number,\n    realKey: number\n): VoiceList {\n    const channelObject = this.midiChannels[channel];\n\n    // Override patch\n    const overridePatch = this.keyModifierManager.hasOverridePatch(\n        channel,\n        midiNote\n    );\n\n    let preset = channelObject.preset;\n    if (!preset) {\n        SpessaSynthWarn(`No preset for channel ${channel}!`);\n        return [];\n    }\n    if (overridePatch) {\n        const patch = this.keyModifierManager.getPatch(channel, midiNote);\n        preset = this.soundBankManager.getPreset(\n            patch,\n            this.privateProps.masterParameters.midiSystem\n        );\n    }\n    return this.getVoicesForPreset(preset, midiNote, velocity, realKey);\n}\n", "import { arrayToHexString, consoleColors } from \"../../../utils/other\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../../utils/loggin\";\nimport { ALL_CHANNELS_OR_DIFFERENT_ACTION } from \"../engine_components/synth_constants\";\nimport { BankSelectHacks } from \"../../../utils/midi_hacks\";\nimport { readBinaryString } from \"../../../utils/byte_functions/string\";\nimport { NON_CC_INDEX_OFFSET } from \"../engine_components/controller_tables\";\nimport { generatorTypes, type ModulatorSourceEnum, modulatorSources } from \"../../../soundbank/enums\";\nimport type { SpessaSynthProcessor } from \"../../processor\";\nimport type { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport { midiControllers } from \"../../../midi/enums\";\nimport { customControllers } from \"../../enums\";\n\n/**\n * Calculates frequency for MIDI Tuning Standard.\n * @param byte1 The first byte (midi note).\n * @param byte2 The second byte (most significant bits).\n * @param byte3 The third byte (the least significant bits).\n * @return An object containing the MIDI note and the cent tuning value.\n */\nfunction getTuning(\n    byte1: number,\n    byte2: number,\n    byte3: number\n): { midiNote: number; centTuning: number | null } {\n    const midiNote = byte1;\n    const fraction = (byte2 << 7) | byte3; // Combine byte2 and byte3 into a 14-bit number\n\n    // No change\n    if (byte1 === 0x7f && byte2 === 0x7f && byte3 === 0x7f) {\n        return { midiNote: -1, centTuning: null };\n    }\n\n    // Calculate cent tuning\n    return { midiNote: midiNote, centTuning: fraction * 0.0061 };\n}\n\ntype TypedArray =\n    | Uint8Array\n    | Int8Array\n    | Uint16Array\n    | Int16Array\n    | Uint32Array\n    | Int32Array\n    | Uint8ClampedArray\n    | Float32Array\n    | Float64Array;\n\n/**\n * Executes a system exclusive message for the synthesizer.\n * @param syx The system exclusive message as an array of bytes.\n * @param channelOffset The channel offset to apply (default is 0).\n * @remarks\n * This is a rather extensive method that handles various system exclusive messages,\n * including Roland GS, MIDI Tuning Standard, and other non-realtime messages.\n */\nexport function systemExclusiveInternal(\n    this: SpessaSynthProcessor,\n    syx: number[] | IndexedByteArray | TypedArray,\n    channelOffset = 0\n) {\n    const manufacturer = syx[0];\n    // Ensure that the device ID matches\n    if (\n        this.privateProps.masterParameters.deviceID !==\n            ALL_CHANNELS_OR_DIFFERENT_ACTION &&\n        syx[1] !== 0x7f\n    ) {\n        if (this.privateProps.masterParameters.deviceID !== syx[1]) {\n            // Not our device ID\n            return;\n        }\n    }\n\n    // A helper function to log nicely\n    function niceLogging(\n        channel: number,\n        value: number | string,\n        what: string,\n        units: string\n    ) {\n        SpessaSynthInfo(\n            `%cChannel %c${channel}%c ${what}. %c${value} ${units}%c, with %c${arrayToHexString(syx)}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.value,\n            consoleColors.info,\n            consoleColors.value\n        );\n    }\n\n    switch (manufacturer) {\n        default:\n            SpessaSynthInfo(\n                `%cUnrecognized SysEx: %c${arrayToHexString(syx)}`,\n                consoleColors.warn,\n                consoleColors.unrecognized\n            );\n            break;\n\n        // Non realtime GM\n        case 0x7e:\n        // Realtime GM\n        case 0x7f:\n            switch (syx[2]) {\n                case 0x04: {\n                    let cents;\n                    // Device control\n                    switch (syx[3]) {\n                        case 0x01: {\n                            // Main volume\n                            const vol = (syx[5] << 7) | syx[4];\n                            this.setMIDIVolume(vol / 16384);\n                            SpessaSynthInfo(\n                                `%cMaster Volume. Volume: %c${vol}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        }\n\n                        case 0x02: {\n                            // Main balance\n                            // Midi spec page 62\n                            const balance = (syx[5] << 7) | syx[4];\n                            const pan = (balance - 8192) / 8192;\n                            this.setMasterParameter(\"masterPan\", pan);\n                            SpessaSynthInfo(\n                                `%cMaster Pan. Pan: %c${pan}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        }\n\n                        case 0x03: {\n                            // Fine-tuning\n                            const tuningValue = ((syx[5] << 7) | syx[6]) - 8192;\n                            cents = Math.floor(tuningValue / 81.92); // [-100;+99] cents range\n                            this.setMasterTuning(cents);\n                            SpessaSynthInfo(\n                                `%cMaster Fine Tuning. Cents: %c${cents}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        }\n\n                        case 0x04: {\n                            // Coarse tuning\n                            // Lsb is ignored\n                            const semitones = syx[5] - 64;\n                            cents = semitones * 100;\n                            this.setMasterTuning(cents);\n                            SpessaSynthInfo(\n                                `%cMaster Coarse Tuning. Cents: %c${cents}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        }\n\n                        default:\n                            SpessaSynthInfo(\n                                `%cUnrecognized MIDI Device Control Real-time message: %c${arrayToHexString(syx)}`,\n                                consoleColors.warn,\n                                consoleColors.unrecognized\n                            );\n                    }\n                    break;\n                }\n\n                case 0x09:\n                    // Gm system related\n                    if (syx[3] === 0x01) {\n                        SpessaSynthInfo(\"%cGM1 system on\", consoleColors.info);\n                        this.setMasterParameter(\"midiSystem\", \"gm\");\n                    } else if (syx[3] === 0x03) {\n                        SpessaSynthInfo(\"%cGM2 system on\", consoleColors.info);\n                        this.setMasterParameter(\"midiSystem\", \"gm2\");\n                    } else {\n                        SpessaSynthInfo(\n                            \"%cGM system off, defaulting to GS\",\n                            consoleColors.info\n                        );\n                        this.setMasterParameter(\"midiSystem\", \"gs\");\n                    }\n                    break;\n\n                // MIDI Tuning standard\n                // https://midi.org/midi-tuning-updated-specification\n                case 0x08: {\n                    let currentMessageIndex = 4;\n                    switch (syx[3]) {\n                        // Bulk tuning dump: all 128 notes\n                        case 0x01: {\n                            const program = syx[currentMessageIndex++];\n                            // Read the name\n                            const tuningName = readBinaryString(\n                                syx,\n                                16,\n                                currentMessageIndex\n                            );\n                            currentMessageIndex += 16;\n                            if (syx.length < 384) {\n                                SpessaSynthWarn(\n                                    `The Bulk Tuning Dump is too short! (${syx.length} bytes, at least 384 are expected)`\n                                );\n                                return;\n                            }\n                            // 128 frequencies follow\n                            for (let i = 0; i < 128; i++) {\n                                // Set the given tuning to the program\n                                this.privateProps.tunings[program][i] =\n                                    getTuning(\n                                        syx[currentMessageIndex++],\n                                        syx[currentMessageIndex++],\n                                        syx[currentMessageIndex++]\n                                    );\n                            }\n                            SpessaSynthInfo(\n                                `%cBulk Tuning Dump %c${tuningName}%c Program: %c${program}`,\n                                consoleColors.info,\n                                consoleColors.value,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        }\n\n                        // Single note change\n                        // Single note change bank\n                        case 0x02:\n                        case 0x07: {\n                            if (syx[3] === 0x07) {\n                                // Skip the bank\n                                currentMessageIndex++;\n                            }\n                            // Get program and number of changes\n                            const tuningProgram = syx[currentMessageIndex++];\n                            const numberOfChanges = syx[currentMessageIndex++];\n                            for (let i = 0; i < numberOfChanges; i++) {\n                                // Set the given tuning to the program\n                                this.privateProps.tunings[tuningProgram][\n                                    syx[currentMessageIndex++]\n                                ] = getTuning(\n                                    syx[currentMessageIndex++],\n                                    syx[currentMessageIndex++],\n                                    syx[currentMessageIndex++]\n                                );\n                            }\n                            SpessaSynthInfo(\n                                `%cSingle Note Tuning. Program: %c${tuningProgram}%c Keys affected: %c${numberOfChanges}`,\n                                consoleColors.info,\n                                consoleColors.recognized,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        }\n\n                        // Octave tuning (1 byte)\n                        // And octave tuning (2 bytes)\n                        case 0x09:\n                        case 0x08: {\n                            // Get tuning:\n                            const newOctaveTuning = new Int8Array(12);\n                            // Start from bit 7\n                            if (syx[3] === 0x08) {\n                                // 1 byte tuning: 0 is -64 cents, 64 is 0, 127 is +63\n                                for (let i = 0; i < 12; i++) {\n                                    newOctaveTuning[i] = syx[7 + i] - 64;\n                                }\n                            } else {\n                                // 2 byte tuning. Like fine tune: 0 is -100 cents, 8192 is 0 cents, 16,383 is +100 cents\n                                for (let i = 0; i < 24; i += 2) {\n                                    const tuning =\n                                        ((syx[7 + i] << 7) | syx[8 + i]) - 8192;\n                                    newOctaveTuning[i / 2] = Math.floor(\n                                        tuning / 81.92\n                                    ); // Map to [-100;+99] cents\n                                }\n                            }\n                            // Apply to channels (ordered from 0)\n                            // Bit 1: 14 and 15\n                            if ((syx[4] & 1) === 1) {\n                                this.midiChannels[\n                                    14 + channelOffset\n                                ].setOctaveTuning(newOctaveTuning);\n                            }\n                            if (((syx[4] >> 1) & 1) === 1) {\n                                this.midiChannels[\n                                    15 + channelOffset\n                                ].setOctaveTuning(newOctaveTuning);\n                            }\n\n                            // Bit 2: channels 7 to 13\n                            for (let i = 0; i < 7; i++) {\n                                const bit = (syx[5] >> i) & 1;\n                                if (bit === 1) {\n                                    this.midiChannels[\n                                        7 + i + channelOffset\n                                    ].setOctaveTuning(newOctaveTuning);\n                                }\n                            }\n\n                            // Bit 3: channels 0 to 16\n                            for (let i = 0; i < 7; i++) {\n                                const bit = (syx[6] >> i) & 1;\n                                if (bit === 1) {\n                                    this.midiChannels[\n                                        i + channelOffset\n                                    ].setOctaveTuning(newOctaveTuning);\n                                }\n                            }\n\n                            SpessaSynthInfo(\n                                `%cMIDI Octave Scale ${\n                                    syx[3] === 0x08 ? \"(1 byte)\" : \"(2 bytes)\"\n                                } tuning via Tuning: %c${newOctaveTuning.join(\" \")}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        }\n\n                        default:\n                            SpessaSynthInfo(\n                                `%cUnrecognized MIDI Tuning standard message: %c${arrayToHexString(syx)}`,\n                                consoleColors.warn,\n                                consoleColors.unrecognized\n                            );\n                            break;\n                    }\n                    break;\n                }\n\n                default:\n                    SpessaSynthInfo(\n                        `%cUnrecognized MIDI Realtime/non realtime message: %c${arrayToHexString(syx)}`,\n                        consoleColors.warn,\n                        consoleColors.unrecognized\n                    );\n            }\n            break;\n\n        // This is a roland sysex\n        // http://www.bandtrax.com.au/sysex.htm\n        // https://cdn.roland.com/assets/media/pdf/AT-20R_30R_MI.pdf\n        case 0x41:\n            // 0x12: DT1 (Device Transmit)\n            if (syx[3] === 0x12) {\n                function notRecognized() {\n                    // This is some other GS sysex...\n                    SpessaSynthInfo(\n                        `%cUnrecognized Roland %cGS %cSysEx: %c${arrayToHexString(syx)}`,\n                        consoleColors.warn,\n                        consoleColors.recognized,\n                        consoleColors.warn,\n                        consoleColors.unrecognized\n                    );\n                }\n                // Model ID\n                switch (syx[2]) {\n                    case 0x42: {\n                        // This is a GS sysex\n\n                        const messageValue = syx[7];\n                        // Syx[5] and [6] is the system parameter, syx[7] is the value\n                        // Either patch common or SC-88 mode set\n                        if (\n                            syx[4] === 0x40 ||\n                            (syx[4] === 0x00 && syx[6] === 0x7f)\n                        ) {\n                            // This is a channel parameter\n                            if ((syx[5] & 0x10) > 0) {\n                                // This is an individual part (channel) parameter\n                                // Determine the channel 0 means channel 10 (default), 1 means 1 etc.\n                                // SC-88Pro manual page 196\n                                const channel =\n                                    [\n                                        9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11,\n                                        12, 13, 14, 15\n                                    ][syx[5] & 0x0f] + channelOffset;\n                                // For example, 0x1A means A = 11, which corresponds to channel 12 (counting from 1)\n                                const channelObject =\n                                    this.midiChannels[channel];\n                                switch (syx[6]) {\n                                    default:\n                                        // This is some other GS sysex...\n                                        notRecognized();\n                                        break;\n\n                                    case 0x15: {\n                                        // This is the Use for Drum Part sysex (multiple drums)\n                                        const isDrums =\n                                            messageValue > 0 && syx[5] >> 4 > 0; // If set to other than 0, is a drum channel\n                                        channelObject.setGSDrums(isDrums);\n                                        SpessaSynthInfo(\n                                            `%cChannel %c${channel}%c ${\n                                                isDrums\n                                                    ? \"is now a drum channel\"\n                                                    : \"now isn't a drum channel\"\n                                            }%c via: %c${arrayToHexString(syx)}`,\n                                            consoleColors.info,\n                                            consoleColors.value,\n                                            consoleColors.recognized,\n                                            consoleColors.info,\n                                            consoleColors.value\n                                        );\n                                        return;\n                                    }\n\n                                    case 0x16: {\n                                        // This is the pitch key shift sysex\n                                        const keyShift = messageValue - 64;\n                                        channelObject.setCustomController(\n                                            customControllers.channelKeyShift,\n                                            keyShift\n                                        );\n                                        niceLogging(\n                                            channel,\n                                            keyShift,\n                                            \"key shift\",\n                                            \"keys\"\n                                        );\n                                        return;\n                                    }\n\n                                    // Pan position\n                                    case 0x1c: {\n                                        // 0 is random\n                                        const panPosition = messageValue;\n                                        if (panPosition === 0) {\n                                            channelObject.randomPan = true;\n                                            SpessaSynthInfo(\n                                                `%cRandom pan is set to %cON%c for %c${channel}`,\n                                                consoleColors.info,\n                                                consoleColors.recognized,\n                                                consoleColors.info,\n                                                consoleColors.value\n                                            );\n                                        } else {\n                                            channelObject.randomPan = false;\n                                            channelObject.controllerChange(\n                                                midiControllers.pan,\n                                                panPosition\n                                            );\n                                        }\n                                        break;\n                                    }\n\n                                    // Chorus send\n                                    case 0x21:\n                                        channelObject.controllerChange(\n                                            midiControllers.chorusDepth,\n                                            messageValue\n                                        );\n                                        break;\n\n                                    // Reverb send\n                                    case 0x22:\n                                        channelObject.controllerChange(\n                                            midiControllers.reverbDepth,\n                                            messageValue\n                                        );\n                                        break;\n\n                                    case 0x40:\n                                    case 0x41:\n                                    case 0x42:\n                                    case 0x43:\n                                    case 0x44:\n                                    case 0x45:\n                                    case 0x46:\n                                    case 0x47:\n                                    case 0x48:\n                                    case 0x49:\n                                    case 0x4a:\n                                    case 0x4b: {\n                                        // Scale tuning: up to 12 bytes\n                                        const tuningBytes = syx.length - 9; // Data starts at 7, minus checksum and f7\n                                        // Read em bytes\n                                        const newTuning = new Int8Array(12);\n                                        for (let i = 0; i < tuningBytes; i++) {\n                                            newTuning[i] = syx[i + 7] - 64;\n                                        }\n                                        channelObject.setOctaveTuning(\n                                            newTuning\n                                        );\n                                        const cents = messageValue - 64;\n                                        niceLogging(\n                                            channel,\n                                            newTuning.join(\" \"),\n                                            \"octave scale tuning\",\n                                            \"cents\"\n                                        );\n                                        channelObject.setTuning(cents);\n                                        break;\n                                    }\n                                }\n                                return;\n                            } else if ((syx[5] & 0x20) > 0) {\n                                // This is a channel parameter also\n                                // This is an individual part (channel) parameter\n                                // Determine the channel 0 means channel 10 (default), 1 means 1 etc.\n                                const channel =\n                                    [\n                                        9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11,\n                                        12, 13, 14, 15\n                                    ][syx[5] & 0x0f] + channelOffset;\n                                // For example, 0x1A means A = 11, which corresponds to channel 12 (counting from 1)\n                                const channelObject =\n                                    this.midiChannels[channel];\n                                const centeredValue = messageValue - 64;\n                                const normalizedValue = centeredValue / 64;\n                                const normalizedNotCentered =\n                                    messageValue / 128;\n\n                                // Setup receivers for cc to parameter (sc-88 manual page 198)\n                                const setupReceivers = (\n                                    source: number,\n                                    sourceName: string,\n                                    bipolar = false\n                                ) => {\n                                    switch (syx[6] & 0x0f) {\n                                        case 0x00:\n                                            // See https://github.com/spessasus/SpessaSynth/issues/154\n                                            // Pitch control\n                                            // Special case:\n                                            // If the source is a pitch wheel, it's a strange way of setting the bend range\n                                            // Testcase: th07_03.mid\n                                            if (\n                                                source ===\n                                                NON_CC_INDEX_OFFSET +\n                                                    modulatorSources.pitchWheel\n                                            ) {\n                                                channelObject.controllerChange(\n                                                    midiControllers.registeredParameterMSB,\n                                                    0x0\n                                                );\n                                                channelObject.controllerChange(\n                                                    midiControllers.registeredParameterLSB,\n                                                    0x0\n                                                );\n                                                channelObject.controllerChange(\n                                                    midiControllers.dataEntryMSB,\n                                                    Math.floor(centeredValue)\n                                                );\n                                            } else {\n                                                channelObject.sysExModulators.setModulator(\n                                                    source as ModulatorSourceEnum,\n                                                    generatorTypes.fineTune,\n                                                    centeredValue * 100,\n                                                    bipolar\n                                                );\n                                                niceLogging(\n                                                    channel,\n                                                    centeredValue,\n                                                    `${sourceName} pitch control`,\n                                                    \"semitones\"\n                                                );\n                                            }\n                                            break;\n\n                                        case 0x01:\n                                            // Cutoff\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.initialFilterFc,\n                                                normalizedValue * 9600,\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedValue * 9600,\n                                                `${sourceName} pitch control`,\n                                                \"cents\"\n                                            );\n                                            break;\n\n                                        case 0x02:\n                                            // Amplitude\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.initialAttenuation,\n                                                normalizedValue * 960, // Spec says \"100%\" so 960cB in sf2\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedValue * 960,\n                                                `${sourceName} amplitude`,\n                                                \"cB\"\n                                            );\n                                            break;\n\n                                        // Rate control is ignored as it is in hertz\n\n                                        case 0x04:\n                                            // LFO1 pitch depth\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.vibLfoToPitch,\n                                                normalizedNotCentered * 600,\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedNotCentered * 600,\n                                                `${sourceName} LFO1 pitch depth`,\n                                                \"cents\"\n                                            );\n                                            break;\n\n                                        case 0x05:\n                                            // LFO1 filter depth\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.vibLfoToFilterFc,\n                                                normalizedNotCentered * 2400,\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedNotCentered * 2400,\n                                                `${sourceName} LFO1 filter depth`,\n                                                \"cents\"\n                                            );\n                                            break;\n\n                                        case 0x06:\n                                            // LFO1 amplitude depth\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.vibLfoToVolume,\n                                                normalizedValue * 960,\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedValue * 960,\n                                                `${sourceName} LFO1 amplitude depth`,\n                                                \"cB\"\n                                            );\n                                            break;\n\n                                        // Rate control is ignored as it is in hertz\n\n                                        case 0x08:\n                                            // LFO2 pitch depth\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.modLfoToPitch,\n                                                normalizedNotCentered * 600,\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedNotCentered * 600,\n                                                `${sourceName} LFO2 pitch depth`,\n                                                \"cents\"\n                                            );\n                                            break;\n\n                                        case 0x09:\n                                            // LFO2 filter depth\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.modLfoToFilterFc,\n                                                normalizedNotCentered * 2400,\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedNotCentered * 2400,\n                                                `${sourceName} LFO2 filter depth`,\n                                                \"cents\"\n                                            );\n                                            break;\n\n                                        case 0x0a:\n                                            // LFO2 amplitude depth\n                                            channelObject.sysExModulators.setModulator(\n                                                source as ModulatorSourceEnum,\n                                                generatorTypes.modLfoToVolume,\n                                                normalizedValue * 960,\n                                                bipolar\n                                            );\n                                            niceLogging(\n                                                channel,\n                                                normalizedValue * 960,\n                                                `${sourceName} LFO2 amplitude depth`,\n                                                \"cB\"\n                                            );\n                                            break;\n                                    }\n                                };\n\n                                // SC88 manual page 198\n                                switch (syx[6] & 0xf0) {\n                                    default:\n                                        // This is some other GS sysex...\n                                        notRecognized();\n                                        break;\n\n                                    case 0x00:\n                                        // Modulation wheel\n                                        setupReceivers(\n                                            midiControllers.modulationWheel,\n                                            \"mod wheel\"\n                                        );\n                                        break;\n\n                                    case 0x10:\n                                        // Pitch bend\n                                        setupReceivers(\n                                            NON_CC_INDEX_OFFSET +\n                                                modulatorSources.pitchWheel,\n                                            \"pitch wheel\",\n                                            true\n                                        );\n                                        break;\n\n                                    case 0x20:\n                                        // Channel pressure\n                                        setupReceivers(\n                                            NON_CC_INDEX_OFFSET +\n                                                modulatorSources.channelPressure,\n                                            \"channel pressure\"\n                                        );\n                                        break;\n\n                                    case 0x30:\n                                        // Poly pressure\n                                        setupReceivers(\n                                            NON_CC_INDEX_OFFSET +\n                                                modulatorSources.polyPressure,\n                                            \"poly pressure\"\n                                        );\n                                        break;\n                                }\n                                return;\n                            } else if (syx[5] === 0x00) {\n                                // This is a global system parameter\n                                switch (syx[6]) {\n                                    default:\n                                        notRecognized();\n                                        break;\n\n                                    case 0x7f:\n                                        // Roland mode set\n                                        // GS mode set\n                                        if (messageValue === 0x00) {\n                                            // This is a GS reset\n                                            SpessaSynthInfo(\n                                                \"%cGS Reset received!\",\n                                                consoleColors.info\n                                            );\n                                            this.resetAllControllers(false);\n                                            this.setMasterParameter(\n                                                \"midiSystem\",\n                                                \"gs\"\n                                            );\n                                        } else if (messageValue === 0x7f) {\n                                            // GS mode off\n                                            SpessaSynthInfo(\n                                                \"%cGS system off, switching to GM\",\n                                                consoleColors.info\n                                            );\n                                            this.resetAllControllers(false);\n                                            this.setMasterParameter(\n                                                \"midiSystem\",\n                                                \"gm\"\n                                            );\n                                        }\n                                        break;\n\n                                    case 0x06:\n                                        // Roland master pan\n                                        SpessaSynthInfo(\n                                            `%cRoland GS Master Pan set to: %c${messageValue}%c with: %c${arrayToHexString(\n                                                syx\n                                            )}`,\n                                            consoleColors.info,\n                                            consoleColors.value,\n                                            consoleColors.info,\n                                            consoleColors.value\n                                        );\n                                        this.setMasterParameter(\n                                            \"masterPan\",\n                                            (messageValue - 64) / 64\n                                        );\n                                        break;\n\n                                    case 0x04:\n                                        // Roland GS master volume\n                                        SpessaSynthInfo(\n                                            `%cRoland GS Master Volume set to: %c${messageValue}%c with: %c${arrayToHexString(\n                                                syx\n                                            )}`,\n                                            consoleColors.info,\n                                            consoleColors.value,\n                                            consoleColors.info,\n                                            consoleColors.value\n                                        );\n                                        this.setMIDIVolume(messageValue / 127);\n                                        break;\n\n                                    case 0x05: {\n                                        // Roland master key shift (transpose)\n                                        const transpose = messageValue - 64;\n                                        SpessaSynthInfo(\n                                            `%cRoland GS Master Key-Shift set to: %c${transpose}%c with: %c${arrayToHexString(\n                                                syx\n                                            )}`,\n                                            consoleColors.info,\n                                            consoleColors.value,\n                                            consoleColors.info,\n                                            consoleColors.value\n                                        );\n                                        this.setMasterTuning(transpose * 100);\n                                        break;\n                                    }\n                                }\n                                return;\n                            } else if (syx[5] === 0x01) {\n                                // This is a global system parameter also\n                                switch (syx[6]) {\n                                    default:\n                                        notRecognized();\n                                        break;\n\n                                    case 0x00: {\n                                        // Patch name. cool!\n                                        // Not sure what to do with it, but let's log it!\n                                        const patchName = readBinaryString(\n                                            syx,\n                                            16,\n                                            7\n                                        );\n                                        SpessaSynthInfo(\n                                            `%cGS Patch name: %c${patchName}`,\n                                            consoleColors.info,\n                                            consoleColors.value\n                                        );\n                                        break;\n                                    }\n\n                                    case 0x33:\n                                        // Reverb level\n                                        SpessaSynthInfo(\n                                            `%cGS Reverb level: %c${messageValue}`,\n                                            consoleColors.info,\n                                            consoleColors.value\n                                        );\n                                        // 64 is the default\n                                        this.privateProps.reverbSend =\n                                            messageValue / 64;\n                                        break;\n\n                                    // Unsupported reverb params\n                                    case 0x30:\n                                    case 0x31:\n                                    case 0x32:\n                                    case 0x34:\n                                    case 0x35:\n                                    case 0x37:\n                                        SpessaSynthInfo(\n                                            `%cUnsupported GS Reverb Parameter: %c${syx[6].toString(16)}`,\n                                            consoleColors.warn,\n                                            consoleColors.unrecognized\n                                        );\n                                        break;\n\n                                    case 0x3a:\n                                        // Chorus level\n                                        SpessaSynthInfo(\n                                            `%cGS Chorus level: %c${messageValue}`,\n                                            consoleColors.info,\n                                            consoleColors.value\n                                        );\n                                        // 64 is the default\n                                        this.privateProps.chorusSend =\n                                            messageValue / 64;\n                                        break;\n\n                                    // Unsupported chorus params\n                                    case 0x38:\n                                    case 0x39:\n                                    case 0x3b:\n                                    case 0x3c:\n                                    case 0x3d:\n                                    case 0x3e:\n                                    case 0x3f:\n                                    case 0x40:\n                                        SpessaSynthInfo(\n                                            `%cUnsupported GS Chorus Parameter: %c${syx[6].toString(16)}`,\n                                            consoleColors.warn,\n                                            consoleColors.unrecognized\n                                        );\n                                        break;\n                                }\n                            }\n                        } else {\n                            // This is some other GS sysex...\n                            notRecognized();\n                        }\n                        return;\n                    }\n\n                    case 0x45: {\n                        // 0x45: GS Display Data\n                        // Check for embedded copyright\n                        // (roland SC display sysex) http://www.bandtrax.com.au/sysex.htm\n\n                        if (\n                            syx[4] === 0x10 // Sound Canvas Display\n                        ) {\n                            if (syx[5] === 0x00) {\n                                // Display letters\n                                this.privateProps.callEvent(\n                                    \"synthDisplay\",\n                                    Array.from(syx)\n                                );\n                            } else if (syx[5] === 0x01) {\n                                // Matrix display\n                                this.privateProps.callEvent(\n                                    \"synthDisplay\",\n                                    Array.from(syx)\n                                );\n                            } else {\n                                // This is some other GS sysex...\n                                notRecognized();\n                            }\n                        }\n                        return;\n                    }\n\n                    case 0x16:\n                        // Some Roland\n                        if (syx[4] === 0x10) {\n                            // This is a roland master volume message\n                            this.setMIDIVolume(syx[7] / 100);\n                            SpessaSynthInfo(\n                                `%cRoland Master Volume control set to: %c${syx[7]}%c via: %c${arrayToHexString(\n                                    syx\n                                )}`,\n                                consoleColors.info,\n                                consoleColors.value,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            return;\n                        }\n                }\n            } else {\n                // This is something else...\n                SpessaSynthInfo(\n                    `%cUnrecognized Roland SysEx: %c${arrayToHexString(syx)}`,\n                    consoleColors.warn,\n                    consoleColors.unrecognized\n                );\n                return;\n            }\n            break;\n\n        // Yamaha\n        // http://www.studio4all.de/htmle/main91.html\n        case 0x43:\n            // XG sysex\n            if (syx[2] === 0x4c) {\n                // XG system parameter\n                if (syx[3] === 0x00 && syx[4] === 0x00) {\n                    switch (syx[5]) {\n                        // Master volume\n                        case 0x04: {\n                            const vol = syx[6];\n                            this.setMIDIVolume(vol / 127);\n                            SpessaSynthInfo(\n                                `%cXG master volume. Volume: %c${vol}`,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        }\n\n                        // Master transpose\n                        case 0x06: {\n                            const transpose = syx[6] - 64;\n                            this.setMasterParameter(\"transposition\", transpose);\n                            SpessaSynthInfo(\n                                `%cXG master transpose. Volume: %c${transpose}`,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        }\n\n                        // XG on\n                        case 0x7e:\n                            SpessaSynthInfo(\n                                \"%cXG system on\",\n                                consoleColors.info\n                            );\n                            this.resetAllControllers(false);\n                            this.setMasterParameter(\"midiSystem\", \"xg\");\n                            break;\n                    }\n                } else if (syx[3] === 0x08) {\n                    // XG part parameter\n                    if (\n                        !BankSelectHacks.isSystemXG(\n                            this.privateProps.masterParameters.midiSystem\n                        )\n                    ) {\n                        return;\n                    }\n                    const channel = syx[4] + channelOffset;\n                    if (channel >= this.midiChannels.length) {\n                        // Invalid channel\n                        return;\n                    }\n                    const channelObject = this.midiChannels[channel];\n                    const value = syx[6];\n                    switch (syx[5]) {\n                        // Bank-select MSB\n                        case 0x01:\n                            channelObject.controllerChange(\n                                midiControllers.bankSelect,\n                                value\n                            );\n                            break;\n\n                        // Bank-select LSB\n                        case 0x02:\n                            channelObject.controllerChange(\n                                midiControllers.bankSelectLSB,\n                                value\n                            );\n                            break;\n\n                        // Program change\n                        case 0x03:\n                            channelObject.programChange(value);\n                            break;\n\n                        // Note shift\n                        case 0x08: {\n                            if (channelObject.drumChannel) {\n                                return;\n                            }\n                            channelObject.channelTransposeKeyShift = value - 64;\n                            break;\n                        }\n\n                        // Volume\n                        case 0x0b:\n                            channelObject.controllerChange(\n                                midiControllers.mainVolume,\n                                value\n                            );\n                            break;\n\n                        // Pan position\n                        case 0x0e: {\n                            const pan = value;\n                            if (pan === 0) {\n                                // 0 means random\n                                channelObject.randomPan = true;\n                                SpessaSynthInfo(\n                                    `%cRandom pan is set to %cON%c for %c${channel}`,\n                                    consoleColors.info,\n                                    consoleColors.recognized,\n                                    consoleColors.info,\n                                    consoleColors.value\n                                );\n                            } else {\n                                channelObject.controllerChange(\n                                    midiControllers.pan,\n                                    pan\n                                );\n                            }\n                            break;\n                        }\n\n                        // Reverb\n                        case 0x13:\n                            channelObject.controllerChange(\n                                midiControllers.reverbDepth,\n                                value\n                            );\n                            break;\n\n                        // Chorus\n                        case 0x12:\n                            channelObject.controllerChange(\n                                midiControllers.chorusDepth,\n                                value\n                            );\n                            break;\n\n                        default:\n                            SpessaSynthInfo(\n                                `%cUnrecognized Yamaha XG Part Setup: %c${syx[5]\n                                    .toString(16)\n                                    .toUpperCase()}`,\n                                consoleColors.warn,\n                                consoleColors.unrecognized\n                            );\n                    }\n                } else if (\n                    syx[3] === 0x06 && // XG System parameter\n                    syx[4] === 0x00 // System Byte\n                ) {\n                    // Displayed letters\n                    this.privateProps.callEvent(\n                        \"synthDisplay\",\n                        Array.from(syx)\n                    );\n                } else if (\n                    BankSelectHacks.isSystemXG(\n                        this.privateProps.masterParameters.midiSystem\n                    )\n                ) {\n                    SpessaSynthInfo(\n                        `%cUnrecognized Yamaha XG SysEx: %c${arrayToHexString(syx)}`,\n                        consoleColors.warn,\n                        consoleColors.unrecognized\n                    );\n                }\n            } else {\n                if (\n                    BankSelectHacks.isSystemXG(\n                        this.privateProps.masterParameters.midiSystem\n                    )\n                ) {\n                    SpessaSynthInfo(\n                        `%cUnrecognized Yamaha SysEx: %c${arrayToHexString(syx)}`,\n                        consoleColors.warn,\n                        consoleColors.unrecognized\n                    );\n                }\n            }\n            break;\n    }\n}\n", "import type { SynthSystem } from \"../../types\";\nimport { type SpessaSynthProcessor } from \"../../processor\";\nimport type { MIDIPatchNamed } from \"../../../soundbank/basic_soundbank/midi_patch\";\n\n/**\n * Represents a snapshot of a single channel's state in the synthesizer.\n */\nexport class ChannelSnapshot {\n    /**\n     * The MIDI patch that the channel is using.\n     */\n    public patch: MIDIPatchNamed;\n\n    /**\n     * Indicates whether the channel's program change is disabled.\n     */\n    public lockPreset: boolean;\n\n    /**\n     * Indicates the MIDI system when the preset was locked\n     */\n    public lockedSystem: SynthSystem;\n\n    /**\n     * The array of all MIDI controllers (in 14-bit values) with the modulator sources at the end.\n     */\n    public midiControllers: Int16Array;\n\n    /**\n     * An array of booleans, indicating if the controller with a current index is locked.\n     */\n    public lockedControllers: boolean[];\n\n    /**\n     * Array of custom (not SF2) control values such as RPN pitch tuning, transpose, modulation depth, etc.\n     */\n    public customControllers: Float32Array;\n\n    /**\n     * Indicates whether the channel vibrato is locked.\n     */\n    public lockVibrato: boolean;\n\n    /**\n     * The channel's vibrato settings.\n     * @property depth Vibrato depth, in gain.\n     * @property delay Vibrato delay from note on in seconds.\n     * @property rate Vibrato rate in Hz.\n     */\n    public channelVibrato: { depth: number; delay: number; rate: number };\n\n    /**\n     * Key shift for the channel.\n     */\n    public channelTransposeKeyShift: number;\n\n    /**\n     * The channel's octave tuning in cents.\n     */\n    public channelOctaveTuning: Int8Array;\n\n    /**\n     * Indicates whether the channel is muted.\n     */\n    public isMuted: boolean;\n\n    /**\n     * Indicates whether the channel is a drum channel.\n     */\n    public drumChannel: boolean;\n\n    /**\n     * The channel number this snapshot represents.\n     */\n    public channelNumber: number;\n\n    // Creates a new channel snapshot.\n    public constructor(\n        patch: MIDIPatchNamed,\n        lockPreset: boolean,\n        lockedSystem: SynthSystem,\n        midiControllers: Int16Array,\n        lockedControllers: boolean[],\n        customControllers: Float32Array,\n        lockVibrato: boolean,\n        channelVibrato: {\n            delay: number;\n            depth: number;\n            rate: number;\n        },\n        channelTransposeKeyShift: number,\n        channelOctaveTuning: Int8Array,\n        isMuted: boolean,\n        drumChannel: boolean,\n        channelNumber: number\n    ) {\n        this.patch = patch;\n        this.lockPreset = lockPreset;\n        this.lockedSystem = lockedSystem;\n        this.midiControllers = midiControllers;\n        this.lockedControllers = lockedControllers;\n        this.customControllers = customControllers;\n        this.lockVibrato = lockVibrato;\n        this.channelVibrato = channelVibrato;\n        this.channelTransposeKeyShift = channelTransposeKeyShift;\n        this.channelOctaveTuning = channelOctaveTuning;\n        this.isMuted = isMuted;\n        this.drumChannel = drumChannel;\n        this.channelNumber = channelNumber;\n    }\n\n    /**\n     * Creates a copy of existing snapshot.\n     * @param snapshot The snapshot to create a copy from.\n     */\n    public static copyFrom(snapshot: ChannelSnapshot) {\n        return new ChannelSnapshot(\n            { ...snapshot.patch },\n            snapshot.lockPreset,\n            snapshot.lockedSystem,\n            snapshot.midiControllers.slice(),\n            [...snapshot.lockedControllers],\n            snapshot.customControllers.slice(),\n            snapshot.lockVibrato,\n            { ...snapshot.channelVibrato },\n            snapshot.channelTransposeKeyShift,\n            snapshot.channelOctaveTuning,\n            snapshot.isMuted,\n            snapshot.drumChannel,\n            snapshot.channelNumber\n        );\n    }\n\n    /**\n     * Creates a snapshot of the channel's state.\n     * @param spessaSynthProcessor The synthesizer processor containing the channel.\n     * @param channelNumber The channel number to snapshot.\n     */\n    public static create(\n        spessaSynthProcessor: SpessaSynthProcessor,\n        channelNumber: number\n    ) {\n        const channelObject = spessaSynthProcessor.midiChannels[channelNumber];\n\n        return new ChannelSnapshot(\n            {\n                ...channelObject.patch,\n                name: channelObject?.preset?.name ?? \"undefined\"\n            },\n            channelObject.lockPreset,\n            channelObject.lockedSystem,\n            channelObject.midiControllers.slice(),\n            [...channelObject.lockedControllers],\n            channelObject.customControllers.slice(),\n            channelObject.lockGSNRPNParams,\n            { ...channelObject.channelVibrato },\n            channelObject.channelTransposeKeyShift,\n            channelObject.channelOctaveTuning.slice(),\n            channelObject.isMuted,\n            channelObject.drumChannel,\n            channelNumber\n        );\n    }\n\n    /**\n     * Applies the snapshot to the specified channel.\n     * @param spessaSynthProcessor The processor containing the channel.\n     */\n    public apply(spessaSynthProcessor: SpessaSynthProcessor) {\n        const channelObject =\n            spessaSynthProcessor.midiChannels[this.channelNumber];\n        channelObject.muteChannel(this.isMuted);\n        channelObject.setDrums(this.drumChannel);\n\n        // Restore controllers\n        channelObject.midiControllers.set(this.midiControllers);\n        channelObject.lockedControllers = this.lockedControllers;\n        channelObject.customControllers.set(this.customControllers);\n        channelObject.updateChannelTuning();\n\n        // Restore vibrato and transpose\n        channelObject.channelVibrato = this.channelVibrato;\n        channelObject.lockGSNRPNParams = this.lockVibrato;\n        channelObject.channelTransposeKeyShift = this.channelTransposeKeyShift;\n        channelObject.channelOctaveTuning = this.channelOctaveTuning;\n\n        // Restore preset and lock\n        channelObject.setPresetLock(false);\n        channelObject.setPatch(this.patch);\n        channelObject.setPresetLock(this.lockPreset);\n        channelObject.lockedSystem = this.lockedSystem;\n    }\n}\n", "/**\n * A manager for custom key overrides for channels\n */\nimport type { MIDIPatch } from \"../../../soundbank/basic_soundbank/midi_patch\";\n\nexport class KeyModifier {\n    /**\n     * The new override velocity. -1 means unchanged.\n     */\n    public velocity = -1;\n    /**\n     * The MIDI patch this key uses. -1 on any property means unchanged.\n     */\n    public patch: MIDIPatch = {\n        bankLSB: -1,\n        bankMSB: -1,\n        isGMGSDrum: false,\n        program: -1\n    };\n\n    /**\n     * Linear gain override for the voice.\n     */\n    public gain = 1;\n}\n\nexport class KeyModifierManager {\n    /**\n     * The velocity override mappings for MIDI keys\n     * stored as [channelNumber][midiNote].\n     */\n    private keyMappings: (KeyModifier | undefined)[][] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Add a mapping for a MIDI key to a KeyModifier.\n     * @param channel The MIDI channel number.\n     * @param midiNote The MIDI note number (0-127).\n     * @param mapping The KeyModifier to apply for this key.\n     */\n    public addMapping(channel: number, midiNote: number, mapping: KeyModifier) {\n        this.keyMappings[channel] ??= [];\n        this.keyMappings[channel][midiNote] = mapping;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Delete a mapping for a MIDI key.\n     * @param channel The MIDI channel number.\n     * @param midiNote The MIDI note number (0-127).\n     */\n    public deleteMapping(channel: number, midiNote: number) {\n        if (this.keyMappings[channel]?.[midiNote] === undefined) {\n            return;\n        }\n        this.keyMappings[channel][midiNote] = undefined;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Clear all key mappings.\n     */\n    public clearMappings() {\n        this.keyMappings = [];\n    }\n\n    /**\n     * Sets the key mappings to a new array.\n     * @param mappings A 2D array where the first dimension is the channel number and the second dimension is the MIDI note number.\n     */\n    public setMappings(mappings: (KeyModifier | undefined)[][]) {\n        this.keyMappings = mappings;\n    }\n\n    /**\n     * Returns the current key mappings.\n     */\n    public getMappings(): (KeyModifier | undefined)[][] {\n        return this.keyMappings;\n    }\n\n    /**\n     * Gets the velocity override for a MIDI key.\n     * @param channel The MIDI channel number.\n     * @param midiNote The MIDI note number (0-127).\n     * @returns The velocity override, or -1 if no override is set.\n     */\n    public getVelocity(channel: number, midiNote: number): number {\n        return this.keyMappings[channel]?.[midiNote]?.velocity ?? -1;\n    }\n\n    /**\n     * Gets the gain override for a MIDI key.\n     * @param channel The MIDI channel number.\n     * @param midiNote The MIDI note number (0-127).\n     * @returns The gain override, or 1 if no override is set.\n     */\n    public getGain(channel: number, midiNote: number): number {\n        return this.keyMappings[channel]?.[midiNote]?.gain ?? 1;\n    }\n\n    /**\n     * Checks if a MIDI key has an override for the patch.\n     * @param channel The MIDI channel number.\n     * @param midiNote The MIDI note number (0-127).\n     * @returns True if the key has an override patch, false otherwise.\n     */\n    public hasOverridePatch(channel: number, midiNote: number): boolean {\n        const bank = this.keyMappings[channel]?.[midiNote]?.patch?.bankMSB;\n        return bank !== undefined && bank >= 0;\n    }\n\n    /**\n     * Gets the patch override for a MIDI key.\n     * @param channel The MIDI channel number.\n     * @param midiNote The MIDI note number (0-127).\n     * @returns An object containing the bank and program numbers.\n     * @throws Error if no modifier is set for the key.\n     */\n    public getPatch(channel: number, midiNote: number): MIDIPatch {\n        const modifier = this.keyMappings[channel]?.[midiNote];\n        if (modifier) {\n            return modifier.patch;\n        }\n        throw new Error(\"No modifier.\");\n    }\n}\n", "import { ChannelSnapshot } from \"./channel_snapshot\";\nimport { type KeyModifier } from \"../engine_components/key_modifier_manager\";\nimport { type SpessaSynthProcessor } from \"../../processor\";\nimport type { MasterParameterType } from \"../../types\";\n\n/**\n * Represents a snapshot of the synthesizer's state.\n */\nexport class SynthesizerSnapshot {\n    /**\n     * The individual channel snapshots.\n     */\n    public channelSnapshots: ChannelSnapshot[];\n\n    /**\n     * Key modifiers.\n     */\n    public keyMappings: (KeyModifier | undefined)[][];\n\n    public masterParameters: MasterParameterType;\n\n    public constructor(\n        channelSnapshots: ChannelSnapshot[],\n        masterParameters: MasterParameterType,\n        keyMappings: (KeyModifier | undefined)[][]\n    ) {\n        this.channelSnapshots = channelSnapshots;\n        this.masterParameters = masterParameters;\n        this.keyMappings = keyMappings;\n    }\n\n    /**\n     * Creates a new synthesizer snapshot from the given SpessaSynthProcessor.\n     * @param processor the processor to take a snapshot of.\n     * @returns The snapshot.\n     */\n    public static create(processor: SpessaSynthProcessor): SynthesizerSnapshot {\n        // Channel snapshots\n        const channelSnapshots = processor.midiChannels.map((_, i) =>\n            ChannelSnapshot.create(processor, i)\n        );\n\n        return new SynthesizerSnapshot(\n            channelSnapshots,\n            processor.getAllMasterParameters(),\n            processor.keyModifierManager.getMappings()\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Creates a copy of existing snapshot.\n     * @param snapshot The snapshot to create a copy from.\n     */\n    public static copyFrom(snapshot: SynthesizerSnapshot): SynthesizerSnapshot {\n        return new SynthesizerSnapshot(\n            snapshot.channelSnapshots.map((s) => ChannelSnapshot.copyFrom(s)),\n            { ...snapshot.masterParameters },\n            [...snapshot.keyMappings]\n        );\n    }\n\n    /**\n     * Applies the snapshot to the synthesizer.\n     * @param processor the processor to apply the snapshot to.\n     */\n    public apply(processor: SpessaSynthProcessor) {\n        type MasterParameterPair<K extends keyof MasterParameterType> = [\n            K,\n            MasterParameterType[K]\n        ];\n        const entries = Object.entries(\n            this.masterParameters\n        ) as MasterParameterPair<keyof MasterParameterType>[];\n        entries.forEach(([parameter, value]) => {\n            processor.setMasterParameter(parameter, value);\n        });\n\n        // Restore key modifiers\n        processor.keyModifierManager.setMappings(this.keyMappings);\n\n        // Add channels if more needed\n        while (processor.midiChannels.length < this.channelSnapshots.length) {\n            processor.createMIDIChannel();\n        }\n\n        // Restore channels\n        this.channelSnapshots.forEach((channelSnapshot) => {\n            channelSnapshot.apply(processor);\n        });\n    }\n}\n", "import {\n    ALL_CHANNELS_OR_DIFFERENT_ACTION,\n    DEFAULT_SYNTH_MODE,\n    SYNTHESIZER_GAIN,\n    VOICE_CAP\n} from \"./synth_constants\";\nimport { interpolationTypes } from \"../../enums\";\nimport type { MasterParameterType } from \"../../types\";\n\nexport const DEFAULT_MASTER_PARAMETERS: MasterParameterType = {\n    masterGain: SYNTHESIZER_GAIN,\n    masterPan: 0.0,\n    voiceCap: VOICE_CAP,\n    interpolationType: interpolationTypes.hermite,\n    midiSystem: DEFAULT_SYNTH_MODE,\n    monophonicRetriggerMode: false,\n    reverbGain: 1,\n    chorusGain: 1,\n    blackMIDIMode: false,\n    transposition: 0,\n    deviceID: ALL_CHANNELS_OR_DIFFERENT_ACTION\n};\n", "import type {\n    MTSProgramTuning,\n    SynthProcessorEventData,\n    VoiceList\n} from \"../../types\";\nimport type { BasicPreset } from \"../../../soundbank/basic_soundbank/basic_preset\";\nimport { DEFAULT_MASTER_PARAMETERS } from \"./master_parameters\";\n\n// This class holds all the internal values of the synthesizer.\n// They are used by both SpessaSynthProcessor and its MIDIChannel instances.\n// It is used to isolate them from the API.\n// Essentially think like all these belong to SpessaSynthProcessor and are \"protected\".\nexport class ProtectedSynthValues {\n    /**\n     * This.tunings[program][key] = tuning\n     */\n    public readonly tunings: MTSProgramTuning[] = [];\n\n    // The master parameters of the synthesizer.\n    public masterParameters = DEFAULT_MASTER_PARAMETERS;\n    /**\n     * The volume gain, set by MIDI sysEx\n     */\n    public midiVolume = 1;\n    /**\n     * Set via system exclusive.\n     */\n    public reverbSend = 1;\n    /**\n     * Set via system exclusive.\n     */\n    public chorusSend = 1;\n    /**\n     * The pan of the left channel\n     */\n    public panLeft = 0.5;\n    /**\n     * The pan of the right channel\n     */\n    public panRight = 0.5;\n    /**\n     * Synth's default (reset) preset\n     */\n    public defaultPreset: BasicPreset | undefined;\n    /**\n     * Synth's default (reset) drum preset\n     */\n    public drumPreset: BasicPreset | undefined;\n\n    // Volume envelope smoothing factor, adjusted to the sample rate.\n    public readonly volumeEnvelopeSmoothingFactor: number;\n\n    // Pan smoothing factor, adjusted to the sample rate.\n    public readonly panSmoothingFactor: number;\n\n    // Filter smoothing factor, adjusted to the sample rate.\n    public readonly filterSmoothingFactor: number;\n    /**\n     * Calls when an event occurs.\n     * @param eventType The event type.\n     * @param eventData The event data.\n     */\n    public eventCallbackHandler: <K extends keyof SynthProcessorEventData>(\n        eventType: K,\n        eventData: SynthProcessorEventData[K]\n    ) => unknown;\n    public getVoices: (\n        channel: number,\n        midiNote: number,\n        velocity: number,\n        realKey: number\n    ) => VoiceList;\n    public voiceKilling: (amount: number) => unknown;\n    /**\n     * Cached voices for all presets for this synthesizer.\n     * Nesting goes like this:\n     * this.cachedVoices[bankMSB][bankLSB][programNumber][midiNote][velocity] = a list of voices for that.\n     */\n    public cachedVoices: VoiceList[][][][][] = [];\n\n    public constructor(\n        eventCallbackHandler: <K extends keyof SynthProcessorEventData>(\n            eventType: K,\n            eventData: SynthProcessorEventData[K]\n        ) => unknown,\n        getVoices: (\n            channel: number,\n            midiNote: number,\n            velocity: number,\n            realKey: number\n        ) => VoiceList,\n        voiceKillingFunction: (amount: number) => unknown,\n        volumeEnvelopeSmoothingFactor: number,\n        panSmoothingFactor: number,\n        filterSmoothingFactor: number\n    ) {\n        this.eventCallbackHandler = eventCallbackHandler;\n        this.getVoices = getVoices;\n        this.voiceKilling = voiceKillingFunction;\n        this.volumeEnvelopeSmoothingFactor = volumeEnvelopeSmoothingFactor;\n        this.panSmoothingFactor = panSmoothingFactor;\n        this.filterSmoothingFactor = filterSmoothingFactor;\n\n        for (let i = 0; i < 128; i++) {\n            this.tunings.push([]);\n        }\n    }\n\n    /**\n     * Copied callback so MIDI channels can call it.\n     */\n    public callEvent<K extends keyof SynthProcessorEventData>(\n        eventName: K,\n        eventData: SynthProcessorEventData[K]\n    ) {\n        this.eventCallbackHandler(eventName, eventData);\n    }\n}\n", "/**\n * Lfo.ts\n * purpose: low frequency triangle oscillator\n */\n\n/**\n * Gets the current value of the LFO at a given time.\n * @param startTime The time when the LFO started (in seconds).\n * @param frequency The frequency of the LFO (in Hz).\n * @param currentTime The current time (in seconds).\n * @returns The LFO value, which oscillates between -1 and 1.\n */\nexport function getLFOValue(\n    startTime: number,\n    frequency: number,\n    currentTime: number\n): number {\n    if (currentTime < startTime) {\n        return 0;\n    }\n\n    const xVal = (currentTime - startTime) / (1 / frequency) + 0.25;\n    // Offset by -0.25, otherwise we start at -1 and can have unexpected jump in pitch or low-pass\n    // (happened with Synth Strings 2)\n\n    // Triangle, not sine\n    return Math.abs(xVal - ~~(xVal + 0.5)) * 4 - 1;\n}\n", "import { type InterpolationType, interpolationTypes } from \"../../../enums\";\nimport type { Voice } from \"../voice\";\n\n/**\n * Wavetable_oscillator.ts\n * purpose: plays back raw audio data at an arbitrary playback rate\n */\n\nexport class WavetableOscillator {\n    /**\n     * Fills the output buffer with raw sample data using a given interpolation.\n     * @param voice The voice we're working on.\n     * @param outputBuffer The output buffer to write to.\n     * @param interpolation The interpolation type.\n     */\n    public static getSample(\n        voice: Voice,\n        outputBuffer: Float32Array,\n        interpolation: InterpolationType\n    ) {\n        const step = voice.currentTuningCalculated * voice.sample.playbackStep;\n        // Why not?\n        if (step === 1) {\n            WavetableOscillator.getSampleNearest(voice, outputBuffer, step);\n            return;\n        }\n        switch (interpolation) {\n            case interpolationTypes.hermite:\n                this.getSampleHermite(voice, outputBuffer, step);\n                return;\n\n            case interpolationTypes.linear:\n            default:\n                this.getSampleLinear(voice, outputBuffer, step);\n                return;\n\n            case interpolationTypes.nearestNeighbor:\n                WavetableOscillator.getSampleNearest(voice, outputBuffer, step);\n                return;\n        }\n    }\n\n    /**\n     * Fills the output buffer with raw sample data using linear interpolation.\n     * @param voice The voice we're working on.\n     * @param outputBuffer The output buffer to write to.\n     * @param step The step to advance every sample (playback rate).\n     */\n    public static getSampleLinear(\n        voice: Voice,\n        outputBuffer: Float32Array,\n        step: number\n    ) {\n        const sample = voice.sample;\n        let cur = sample.cursor;\n        const sampleData = sample.sampleData;\n\n        if (sample.isLooping) {\n            const loopLength = sample.loopEnd - sample.loopStart;\n            for (let i = 0; i < outputBuffer.length; i++) {\n                // Check for loop\n                while (cur >= sample.loopEnd) {\n                    cur -= loopLength;\n                }\n\n                // Grab the 2 nearest points\n                const floor = ~~cur;\n                let ceil = floor + 1;\n\n                while (ceil >= sample.loopEnd) {\n                    ceil -= loopLength;\n                }\n\n                const fraction = cur - floor;\n\n                // Grab the samples and interpolate\n                const upper = sampleData[ceil];\n                const lower = sampleData[floor];\n                outputBuffer[i] = lower + (upper - lower) * fraction;\n\n                cur += step;\n            }\n        } else {\n            for (let i = 0; i < outputBuffer.length; i++) {\n                // Linear interpolation\n                const floor = ~~cur;\n                const ceil = floor + 1;\n\n                // Flag the voice as finished if needed\n                if (ceil >= sample.end) {\n                    voice.finished = true;\n                    return;\n                }\n\n                const fraction = cur - floor;\n\n                // Grab the samples and interpolate\n                const upper = sampleData[ceil];\n                const lower = sampleData[floor];\n                outputBuffer[i] = lower + (upper - lower) * fraction;\n\n                cur += step;\n            }\n        }\n        voice.sample.cursor = cur;\n    }\n\n    /**\n     * Fills the output buffer with raw sample data using no interpolation (nearest neighbor).\n     * @param voice The voice we're working on.\n     * @param outputBuffer The output buffer to write to.\n     * @param step The step to advance every sample (playback rate).\n     */\n    public static getSampleNearest(\n        voice: Voice,\n        outputBuffer: Float32Array,\n        step: number\n    ) {\n        const sample = voice.sample;\n        let cur = sample.cursor;\n        const sampleData = sample.sampleData;\n\n        if (sample.isLooping) {\n            const loopLength = sample.loopEnd - sample.loopStart;\n            for (let i = 0; i < outputBuffer.length; i++) {\n                // Check for loop\n                while (cur >= sample.loopEnd) {\n                    cur -= loopLength;\n                }\n\n                // Grab the nearest neighbor\n                let ceil = ~~cur + 1;\n\n                while (ceil >= sample.loopEnd) {\n                    ceil -= loopLength;\n                }\n\n                outputBuffer[i] = sampleData[ceil];\n                cur += step;\n            }\n        } else {\n            for (let i = 0; i < outputBuffer.length; i++) {\n                // Nearest neighbor\n                const ceil = ~~cur + 1;\n\n                // Flag the voice as finished if needed\n                if (ceil >= sample.end) {\n                    voice.finished = true;\n                    return;\n                }\n\n                outputBuffer[i] = sampleData[ceil];\n                cur += step;\n            }\n        }\n        sample.cursor = cur;\n    }\n\n    /**\n     * Fills the output buffer with raw sample data using Hermite interpolation.\n     * @param voice The voice we're working on.\n     * @param outputBuffer The output buffer to write to.\n     * @param step The step to advance every sample (playback rate).\n     */\n    public static getSampleHermite(\n        voice: Voice,\n        outputBuffer: Float32Array,\n        step: number\n    ) {\n        const sample = voice.sample;\n        let cur = sample.cursor;\n        const sampleData = sample.sampleData;\n\n        if (sample.isLooping) {\n            const loopLength = sample.loopEnd - sample.loopStart;\n            for (let i = 0; i < outputBuffer.length; i++) {\n                // Check for loop (it can exceed the end point multiple times)\n                while (cur >= sample.loopEnd) {\n                    cur -= loopLength;\n                }\n\n                // Grab the 4 points\n                const y0 = ~~cur; // Point before the cursor. twice bitwise-not is just a faster Math.floor\n                let y1 = y0 + 1; // Point after the cursor\n                let y2 = y0 + 2; // Point 1 after the cursor\n                let y3 = y0 + 3; // Point 2 after the cursor\n                const t = cur - y0; // The distance from y0 to cursor [0;1]\n                // Y0 is not handled here\n                // As it's math.floor of cur which is handled above\n                if (y1 >= sample.loopEnd) {\n                    y1 -= loopLength;\n                }\n                if (y2 >= sample.loopEnd) {\n                    y2 -= loopLength;\n                }\n                if (y3 >= sample.loopEnd) {\n                    y3 -= loopLength;\n                }\n\n                // Grab the samples\n                const xm1 = sampleData[y0];\n                const x0 = sampleData[y1];\n                const x1 = sampleData[y2];\n                const x2 = sampleData[y3];\n\n                // Interpolate\n                // https://www.musicdsp.org/en/latest/Other/93-hermite-interpollation.html\n                const c = (x1 - xm1) * 0.5;\n                const v = x0 - x1;\n                const w = c + v;\n                const a = w + v + (x2 - x0) * 0.5;\n                const b = w + a;\n                outputBuffer[i] = ((a * t - b) * t + c) * t + x0;\n\n                cur += step;\n            }\n        } else {\n            for (let i = 0; i < outputBuffer.length; i++) {\n                // Grab the 4 points\n                const y0 = ~~cur; // Point before the cursor. twice bitwise-not is just a faster Math.floor\n                const y1 = y0 + 1; // Point after the cursor\n                const y2 = y0 + 2; // Point 1 after the cursor\n                const y3 = y0 + 3; // Point 2 after the cursor\n                const t = cur - y0; // The distance from y0 to cursor [0;1]\n\n                // Flag as finished if needed\n                if (y1 >= sample.end || y2 >= sample.end || y3 >= sample.end) {\n                    voice.finished = true;\n                    return;\n                }\n\n                // Grab the samples\n                const xm1 = sampleData[y0];\n                const x0 = sampleData[y1];\n                const x1 = sampleData[y2];\n                const x2 = sampleData[y3];\n\n                // Interpolate\n                // https://www.musicdsp.org/en/latest/Other/93-hermite-interpollation.html\n                const c = (x1 - xm1) * 0.5;\n                const v = x0 - x1;\n                const w = c + v;\n                const a = w + v + (x2 - x0) * 0.5;\n                const b = w + a;\n                outputBuffer[i] = ((a * t - b) * t + c) * t + x0;\n\n                cur += step;\n            }\n        }\n        voice.sample.cursor = cur;\n    }\n}\n", "import { VolumeEnvelope } from \"./volume_envelope\";\nimport { ModulationEnvelope } from \"./modulation_envelope\";\nimport { absCentsToHz, timecentsToSeconds } from \"../unit_converter\";\nimport { getLFOValue } from \"./lfo\";\nimport { WavetableOscillator } from \"./wavetable_oscillator\";\nimport { LowpassFilter } from \"./lowpass_filter\";\nimport type { Voice } from \"../voice\";\nimport type { MIDIChannel } from \"../midi_channel\";\nimport { generatorTypes } from \"../../../../soundbank/basic_soundbank/generator_types\";\nimport { customControllers } from \"../../../enums\";\n\n/**\n * Renders a voice to the stereo output buffer\n * @param voice the voice to render\n * @param timeNow current time in seconds\n * @param outputLeft the left output buffer\n * @param outputRight the right output buffer\n * @param reverbOutputLeft left output for reverb\n * @param reverbOutputRight right output for reverb\n * @param chorusOutputLeft left output for chorus\n * @param chorusOutputRight right output for chorus\n * @param startIndex\n * @param sampleCount\n * @returns true if the voice is finished\n */\nexport function renderVoice(\n    this: MIDIChannel,\n    voice: Voice,\n    timeNow: number,\n    outputLeft: Float32Array,\n    outputRight: Float32Array,\n    reverbOutputLeft: Float32Array,\n    reverbOutputRight: Float32Array,\n    chorusOutputLeft: Float32Array,\n    chorusOutputRight: Float32Array,\n    startIndex: number,\n    sampleCount: number\n): boolean {\n    // Check if release\n    if (!voice.isInRelease) {\n        // If not in release, check if the release time is\n        if (timeNow >= voice.releaseStartTime) {\n            // Release the voice here\n            voice.isInRelease = true;\n            VolumeEnvelope.startRelease(voice);\n            ModulationEnvelope.startRelease(voice);\n            if (voice.sample.loopingMode === 3) {\n                voice.sample.isLooping = false;\n            }\n        }\n    }\n\n    // If the initial attenuation is more than 100dB, skip the voice (it's silent anyway)\n    if (voice.modulatedGenerators[generatorTypes.initialAttenuation] > 2500) {\n        if (voice.isInRelease) {\n            voice.finished = true;\n        }\n        return voice.finished;\n    }\n\n    // TUNING\n    let targetKey = voice.targetKey;\n\n    // Calculate tuning\n    let cents =\n        voice.modulatedGenerators[generatorTypes.fineTune] + // Soundfont fine tune\n        this.channelOctaveTuning[voice.midiNote] + // MTS octave tuning\n        this.channelTuningCents; // Channel tuning\n    let semitones = voice.modulatedGenerators[generatorTypes.coarseTune]; // Soundfont coarse tuning\n\n    // Midi tuning standard\n    const tuning =\n        this.synthProps.tunings[this.preset?.program ?? 0]?.[voice.realKey];\n    if (tuning?.centTuning) {\n        // Override key\n        targetKey = tuning.midiNote;\n        // Add micro-tonal tuning\n        cents += tuning.centTuning;\n    }\n\n    // Portamento\n    if (voice.portamentoFromKey > -1) {\n        // 0 to 1\n        const elapsed = Math.min(\n            (timeNow - voice.startTime) / voice.portamentoDuration,\n            1\n        );\n        const diff = targetKey - voice.portamentoFromKey;\n        // Zero progress means the pitch being in fromKey, full progress means the normal pitch\n        semitones -= diff * (1 - elapsed);\n    }\n\n    // Calculate tuning by key using soundfont's scale tuning\n    cents +=\n        (targetKey - voice.sample.rootKey) *\n        voice.modulatedGenerators[generatorTypes.scaleTuning];\n\n    // Low pass excursion with LFO and mod envelope\n    let lowpassExcursion = 0;\n    let volumeExcursionCentibels = 0;\n\n    // Vibrato LFO\n    const vibPitchDepth =\n        voice.modulatedGenerators[generatorTypes.vibLfoToPitch];\n    const vibVolDepth =\n        voice.modulatedGenerators[generatorTypes.vibLfoToVolume];\n    const vibFilterDepth =\n        voice.modulatedGenerators[generatorTypes.vibLfoToFilterFc];\n    if (vibPitchDepth !== 0 || vibVolDepth !== 0 || vibFilterDepth !== 0) {\n        // Calculate start time and lfo value\n        const vibStart =\n            voice.startTime +\n            timecentsToSeconds(\n                voice.modulatedGenerators[generatorTypes.delayVibLFO]\n            );\n        const vibFreqHz = absCentsToHz(\n            voice.modulatedGenerators[generatorTypes.freqVibLFO]\n        );\n        const vibLfoValue = getLFOValue(vibStart, vibFreqHz, timeNow);\n        // Use modulation multiplier (RPN modulation depth)\n        cents +=\n            vibLfoValue *\n            (vibPitchDepth *\n                this.customControllers[customControllers.modulationMultiplier]);\n        // Vol env volume offset\n        // Negate the lfo value because audigy starts with increase rather than decrease\n        volumeExcursionCentibels += -vibLfoValue * vibVolDepth;\n        // Low pass frequency\n        lowpassExcursion += vibLfoValue * vibFilterDepth;\n    }\n\n    // Mod LFO\n    const modPitchDepth =\n        voice.modulatedGenerators[generatorTypes.modLfoToPitch];\n    const modVolDepth =\n        voice.modulatedGenerators[generatorTypes.modLfoToVolume];\n    const modFilterDepth =\n        voice.modulatedGenerators[generatorTypes.modLfoToFilterFc];\n    // Don't compute mod lfo unless necessary\n    if (modPitchDepth !== 0 || modFilterDepth !== 0 || modVolDepth !== 0) {\n        // Calculate start time and lfo value\n        const modStart =\n            voice.startTime +\n            timecentsToSeconds(\n                voice.modulatedGenerators[generatorTypes.delayModLFO]\n            );\n        const modFreqHz = absCentsToHz(\n            voice.modulatedGenerators[generatorTypes.freqModLFO]\n        );\n        const modLfoValue = getLFOValue(modStart, modFreqHz, timeNow);\n        // Use modulation multiplier (RPN modulation depth)\n        cents +=\n            modLfoValue *\n            (modPitchDepth *\n                this.customControllers[customControllers.modulationMultiplier]);\n        // Vol env volume offset\n        // Negate the lfo value because audigy starts with increase rather than decrease\n        volumeExcursionCentibels += -modLfoValue * modVolDepth;\n        // Low pass frequency\n        lowpassExcursion += modLfoValue * modFilterDepth;\n    }\n\n    // Channel vibrato (GS NRPN)\n    if (this.channelVibrato.depth > 0) {\n        // Same as others\n        const channelVibrato = getLFOValue(\n            voice.startTime + this.channelVibrato.delay,\n            this.channelVibrato.rate,\n            timeNow\n        );\n        if (channelVibrato) {\n            cents += channelVibrato * this.channelVibrato.depth;\n        }\n    }\n\n    // Mod env\n    const modEnvPitchDepth =\n        voice.modulatedGenerators[generatorTypes.modEnvToPitch];\n    const modEnvFilterDepth =\n        voice.modulatedGenerators[generatorTypes.modEnvToFilterFc];\n    // Don't compute mod env unless necessary\n    if (modEnvFilterDepth !== 0 || modEnvPitchDepth !== 0) {\n        const modEnv = ModulationEnvelope.getValue(voice, timeNow);\n        // Apply values\n        lowpassExcursion += modEnv * modEnvFilterDepth;\n        cents += modEnv * modEnvPitchDepth;\n    }\n\n    // Default resonant modulator: it does not affect the filter gain (neither XG nor GS did that)\n    volumeExcursionCentibels -= voice.resonanceOffset;\n\n    // Finally, calculate the playback rate\n    const centsTotal = ~~(cents + semitones * 100);\n    if (centsTotal !== voice.currentTuningCents) {\n        voice.currentTuningCents = centsTotal;\n        voice.currentTuningCalculated = Math.pow(2, centsTotal / 1200);\n    }\n\n    // SYNTHESIS\n    const bufferOut = new Float32Array(sampleCount);\n\n    // Looping mode 2: start on release. process only volEnv\n    if (voice.sample.loopingMode === 2 && !voice.isInRelease) {\n        VolumeEnvelope.apply(\n            voice,\n            bufferOut,\n            volumeExcursionCentibels,\n            this.synthProps.volumeEnvelopeSmoothingFactor\n        );\n        return voice.finished;\n    }\n\n    // Wave table oscillator\n    WavetableOscillator.getSample(\n        voice,\n        bufferOut,\n        this.synthProps.masterParameters.interpolationType\n    );\n\n    // Low pass filter\n    LowpassFilter.apply(\n        voice,\n        bufferOut,\n        lowpassExcursion,\n        this.synthProps.filterSmoothingFactor\n    );\n\n    // Vol env\n    VolumeEnvelope.apply(\n        voice,\n        bufferOut,\n        volumeExcursionCentibels,\n        this.synthProps.volumeEnvelopeSmoothingFactor\n    );\n\n    this.panAndMixVoice(\n        voice,\n        bufferOut,\n        outputLeft,\n        outputRight,\n        reverbOutputLeft,\n        reverbOutputRight,\n        chorusOutputLeft,\n        chorusOutputRight,\n        startIndex\n    );\n    return voice.finished;\n}\n", "import { SpessaSynthInfo } from \"../../../../../utils/loggin\";\nimport { consoleColors } from \"../../../../../utils/other\";\nimport type { MIDIChannel } from \"../../../engine_components/midi_channel\";\nimport type { GeneratorType } from \"../../../../../soundbank/basic_soundbank/generator_types\";\nimport { NON_CC_INDEX_OFFSET } from \"../../../engine_components/controller_tables\";\nimport { modulatorSources } from \"../../../../../soundbank/enums\";\nimport { customControllers, dataEntryStates } from \"../../../../enums\";\nimport { midiControllers } from \"../../../../../midi/enums\";\n\nexport const registeredParameterTypes = {\n    pitchWheelRange: 0x0000,\n    fineTuning: 0x0001,\n    coarseTuning: 0x0002,\n    modulationDepth: 0x0005,\n    resetParameters: 0x3fff\n};\n\nexport const nonRegisteredMSB = {\n    partParameter: 0x01,\n    awe32: 0x7f,\n    SF2: 120\n};\n\n/**\n * https://cdn.roland.com/assets/media/pdf/SC-88PRO_OM.pdf\n * http://hummer.stanford.edu/sig/doc/classes/MidiOutput/rpn.html\n * @enum {number}\n */\nconst nonRegisteredGSLSB = {\n    vibratoRate: 0x08,\n    vibratoDepth: 0x09,\n    vibratoDelay: 0x0a,\n\n    TVFFilterCutoff: 0x20,\n    TVFFilterResonance: 0x21,\n\n    EGAttackTime: 0x63,\n    EGReleaseTime: 0x66\n};\n\n/**\n * Executes a data entry coarse (MSB) change for the current channel.\n * @param dataValue The value to set for the data entry coarse controller (0-127).\n */\nexport function dataEntryCoarse(this: MIDIChannel, dataValue: number) {\n    // Store in cc table\n    this.midiControllers[midiControllers.dataEntryMSB] = dataValue << 7;\n    /*\n    A note on this vibrato.\n    This is a completely custom vibrato, with its own oscillator and parameters.\n    It is disabled by default,\n    only being enabled when one of the NPRN messages changing it is received\n    and stays on until the next system-reset.\n    It was implemented very early in SpessaSynth's development,\n    because I wanted support for Touhou MIDIs :-)\n     */\n    const addDefaultVibrato = () => {\n        if (\n            this.channelVibrato.delay === 0 &&\n            this.channelVibrato.rate === 0 &&\n            this.channelVibrato.depth === 0\n        ) {\n            this.channelVibrato.depth = 50;\n            this.channelVibrato.rate = 8;\n            this.channelVibrato.delay = 0.6;\n        }\n    };\n\n    // A helper function to log info in a nice way\n    const coolInfo = (what: string, value: string | number, type: string) => {\n        if (type.length > 0) {\n            type = \" \" + type;\n        }\n        SpessaSynthInfo(\n            `%c${what} for %c${this.channelNumber}%c is now set to %c${value}%c${type}.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.value,\n            consoleColors.info\n        );\n    };\n    switch (this.dataEntryState) {\n        default:\n        case dataEntryStates.Idle:\n            break;\n\n        // Process GS NRPNs\n        case dataEntryStates.NRPFine: {\n            if (this.lockGSNRPNParams) {\n                return;\n            }\n            const NRPNCoarse =\n                this.midiControllers[\n                    midiControllers.nonRegisteredParameterMSB\n                ] >> 7;\n            const NRPNFine =\n                this.midiControllers[\n                    midiControllers.nonRegisteredParameterLSB\n                ] >> 7;\n            const dataEntryFine =\n                this.midiControllers[midiControllers.dataEntryLSB] >> 7;\n            switch (NRPNCoarse) {\n                default:\n                    if (dataValue === 64) {\n                        // Default value\n                        return;\n                    }\n                    SpessaSynthInfo(\n                        `%cUnrecognized NRPN for %c${this.channelNumber}%c: %c(0x${NRPNFine.toString(\n                            16\n                        ).toUpperCase()} 0x${NRPNFine.toString(\n                            16\n                        ).toUpperCase()})%c data value: %c${dataValue}`,\n                        consoleColors.warn,\n                        consoleColors.recognized,\n                        consoleColors.warn,\n                        consoleColors.unrecognized,\n                        consoleColors.warn,\n                        consoleColors.value\n                    );\n                    break;\n\n                // Part parameters: vibrato, cutoff\n                case nonRegisteredMSB.partParameter:\n                    switch (NRPNFine) {\n                        default:\n                            if (dataValue === 64) {\n                                // Default value\n                                return;\n                            }\n                            SpessaSynthInfo(\n                                `%cUnrecognized NRPN for %c${this.channelNumber}%c: %c(0x${NRPNCoarse.toString(16)} 0x${NRPNFine.toString(\n                                    16\n                                )})%c data value: %c${dataValue}`,\n                                consoleColors.warn,\n                                consoleColors.recognized,\n                                consoleColors.warn,\n                                consoleColors.unrecognized,\n                                consoleColors.warn,\n                                consoleColors.value\n                            );\n                            break;\n\n                        // Vibrato rate\n                        case nonRegisteredGSLSB.vibratoRate:\n                            if (dataValue === 64) {\n                                return;\n                            }\n                            addDefaultVibrato();\n                            this.channelVibrato.rate = (dataValue / 64) * 8;\n                            coolInfo(\n                                \"Vibrato rate\",\n                                `${dataValue} = ${this.channelVibrato.rate}`,\n                                \"Hz\"\n                            );\n                            break;\n\n                        // Vibrato depth\n                        case nonRegisteredGSLSB.vibratoDepth:\n                            if (dataValue === 64) {\n                                return;\n                            }\n                            addDefaultVibrato();\n                            this.channelVibrato.depth = dataValue / 2;\n                            coolInfo(\n                                \"Vibrato depth\",\n                                `${dataValue} = ${this.channelVibrato.depth}`,\n                                \"cents of detune\"\n                            );\n                            break;\n\n                        // Vibrato delay\n                        case nonRegisteredGSLSB.vibratoDelay:\n                            if (dataValue === 64) {\n                                return;\n                            }\n                            addDefaultVibrato();\n                            this.channelVibrato.delay = dataValue / 64 / 3;\n                            coolInfo(\n                                \"Vibrato delay\",\n                                `${dataValue} = ${this.channelVibrato.delay}`,\n                                \"seconds\"\n                            );\n                            break;\n\n                        // Filter cutoff\n                        case nonRegisteredGSLSB.TVFFilterCutoff:\n                            // Affect the \"brightness\" controller as we have a default modulator that controls it\n                            this.controllerChange(\n                                midiControllers.brightness,\n                                dataValue\n                            );\n                            coolInfo(\"Filter cutoff\", dataValue.toString(), \"\");\n                            break;\n\n                        // Attack time\n                        case nonRegisteredGSLSB.EGAttackTime:\n                            // Affect the \"attack time\" controller as we have a default modulator that controls it\n                            this.controllerChange(\n                                midiControllers.attackTime,\n                                dataValue\n                            );\n                            coolInfo(\n                                \"EG attack time\",\n                                dataValue.toString(),\n                                \"\"\n                            );\n                            break;\n\n                        // Release time\n                        case nonRegisteredGSLSB.EGReleaseTime:\n                            // Affect the \"release time\" controller as we have a default modulator that controls it\n                            this.controllerChange(\n                                midiControllers.releaseTime,\n                                dataValue\n                            );\n                            coolInfo(\n                                \"EG release time\",\n                                dataValue.toString(),\n                                \"\"\n                            );\n                            break;\n                    }\n                    break;\n\n                case nonRegisteredMSB.awe32:\n                    break;\n\n                // SF2 NRPN\n                case nonRegisteredMSB.SF2: {\n                    if (NRPNFine > 100) {\n                        // Sf spec:\n                        // Note that NRPN Select LSB greater than 100 are for setup only, and should not be used on their own to select a\n                        // Generator parameter.\n                        break;\n                    }\n                    const gen = this.customControllers[\n                        customControllers.sf2NPRNGeneratorLSB\n                    ] as GeneratorType;\n                    const offset = ((dataValue << 7) | dataEntryFine) - 8192;\n                    this.setGeneratorOffset(gen, offset);\n                    break;\n                }\n            }\n            break;\n        }\n\n        case dataEntryStates.RPCoarse:\n        case dataEntryStates.RPFine: {\n            const rpnValue =\n                this.midiControllers[midiControllers.registeredParameterMSB] |\n                (this.midiControllers[midiControllers.registeredParameterLSB] >>\n                    7);\n            switch (rpnValue) {\n                default:\n                    SpessaSynthInfo(\n                        `%cUnrecognized RPN for %c${this.channelNumber}%c: %c(0x${rpnValue.toString(16)})%c data value: %c${dataValue}`,\n                        consoleColors.warn,\n                        consoleColors.recognized,\n                        consoleColors.warn,\n                        consoleColors.unrecognized,\n                        consoleColors.warn,\n                        consoleColors.value\n                    );\n                    break;\n\n                // Pitch bend range\n                case registeredParameterTypes.pitchWheelRange:\n                    this.midiControllers[\n                        NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange\n                    ] = dataValue << 7;\n                    coolInfo(\n                        \"Pitch wheel range\",\n                        dataValue.toString(),\n                        \"semitones\"\n                    );\n                    break;\n\n                // Coarse tuning\n                case registeredParameterTypes.coarseTuning: {\n                    // Semitones\n                    const semitones = dataValue - 64;\n                    this.setCustomController(\n                        customControllers.channelTuningSemitones,\n                        semitones\n                    );\n                    coolInfo(\n                        \"Coarse tuning\",\n                        semitones.toString(),\n                        \"semitones\"\n                    );\n                    break;\n                }\n\n                // Fine-tuning\n                case registeredParameterTypes.fineTuning:\n                    // Note: this will not work properly unless the lsb is sent!\n                    // Here we store the raw value to then adjust in fine\n                    this.setTuning(dataValue - 64, false);\n                    break;\n\n                // Modulation depth\n                case registeredParameterTypes.modulationDepth:\n                    this.setModulationDepth(dataValue * 100);\n                    break;\n\n                case registeredParameterTypes.resetParameters:\n                    this.resetParameters();\n                    break;\n            }\n        }\n    }\n}\n", "import { SpessaSynthWarn } from \"../../../../../utils/loggin\";\nimport { consoleColors } from \"../../../../../utils/other\";\nimport {\n    type GeneratorType,\n    generatorTypes\n} from \"../../../../../soundbank/basic_soundbank/generator_types\";\nimport type { MIDIChannel } from \"../../../engine_components/midi_channel\";\n\n/**\n * SoundBlaster AWE32 NRPN generator mappings.\n * http://archive.gamedev.net/archive/reference/articles/article445.html\n * https://github.com/user-attachments/files/15757220/adip301.pdf\n */\nconst AWE_NRPN_GENERATOR_MAPPINGS: GeneratorType[] = [\n    generatorTypes.delayModLFO,\n    generatorTypes.freqModLFO,\n\n    generatorTypes.delayVibLFO,\n    generatorTypes.freqVibLFO,\n\n    generatorTypes.delayModEnv,\n    generatorTypes.attackModEnv,\n    generatorTypes.holdModEnv,\n    generatorTypes.decayModEnv,\n    generatorTypes.sustainModEnv,\n    generatorTypes.releaseModEnv,\n\n    generatorTypes.delayVolEnv,\n    generatorTypes.attackVolEnv,\n    generatorTypes.holdVolEnv,\n    generatorTypes.decayVolEnv,\n    generatorTypes.sustainVolEnv,\n    generatorTypes.releaseVolEnv,\n\n    generatorTypes.fineTune,\n\n    generatorTypes.modLfoToPitch,\n    generatorTypes.vibLfoToPitch,\n    generatorTypes.modEnvToPitch,\n    generatorTypes.modLfoToVolume,\n\n    generatorTypes.initialFilterFc,\n    generatorTypes.initialFilterQ,\n\n    generatorTypes.modLfoToFilterFc,\n    generatorTypes.modEnvToFilterFc,\n\n    generatorTypes.chorusEffectsSend,\n    generatorTypes.reverbEffectsSend\n] as const;\n\n/**\n * Function that emulates AWE32 similarly to fluidsynth\n * https://github.com/FluidSynth/fluidsynth/wiki/FluidFeatures\n *\n * Note: This makes use of findings by mrbumpy409:\n * https://github.com/fluidSynth/fluidsynth/issues/1473\n *\n * The excellent test files are available here, also collected and converted by mrbumpy409:\n * https://github.com/mrbumpy409/AWE32-midi-conversions\n */\nexport function handleAWE32NRPN(\n    this: MIDIChannel,\n    aweGen: number,\n    dataLSB: number,\n    dataMSB: number\n) {\n    // Helper functions\n    const clip = (v: number, min: number, max: number) =>\n        Math.max(min, Math.min(max, v));\n    const msecToTimecents = (ms: number) =>\n        Math.max(-32768, 1200 * Math.log2(ms / 1000));\n    const hzToCents = (hz: number) => 6900 + 1200 * Math.log2(hz / 440);\n\n    let dataValue = (dataMSB << 7) | dataLSB;\n    // Center the value\n    // Though ranges reported as 0 to 127 only use LSB\n    dataValue -= 8192;\n    const generator = AWE_NRPN_GENERATOR_MAPPINGS[aweGen];\n    if (!generator) {\n        SpessaSynthWarn(\n            `Invalid AWE32 LSB: %c${aweGen}`,\n            consoleColors.unrecognized\n        );\n    }\n    let milliseconds, hertz, centibels, cents;\n    switch (generator) {\n        default:\n            // This should not happen\n            break;\n\n        // Delays\n        case generatorTypes.delayModLFO:\n        case generatorTypes.delayVibLFO:\n        case generatorTypes.delayVolEnv:\n        case generatorTypes.delayModEnv:\n            milliseconds = 4 * clip(dataValue, 0, 5900);\n            // Convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n\n        // Attacks\n        case generatorTypes.attackVolEnv:\n        case generatorTypes.attackModEnv:\n            milliseconds = clip(dataValue, 0, 5940);\n            // Convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n\n        // Holds\n        case generatorTypes.holdVolEnv:\n        case generatorTypes.holdModEnv:\n            milliseconds = clip(dataValue, 0, 8191);\n            // Convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n\n        // Decays and releases (share clips and units)\n        case generatorTypes.decayModEnv:\n        case generatorTypes.decayVolEnv:\n        case generatorTypes.releaseVolEnv:\n        case generatorTypes.releaseModEnv:\n            milliseconds = 4 * clip(dataValue, 0, 5940);\n            // Convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n\n        // Lfo frequencies\n        case generatorTypes.freqVibLFO:\n        case generatorTypes.freqModLFO:\n            hertz = 0.084 * dataLSB;\n            // Convert to abs cents\n            this.setGeneratorOverride(generator, hzToCents(hertz), true);\n            break;\n\n        // Sustains\n        case generatorTypes.sustainVolEnv:\n        case generatorTypes.sustainModEnv:\n            // 0.75 dB is 7.5 cB\n            centibels = dataLSB * 7.5;\n            this.setGeneratorOverride(generator, centibels);\n            break;\n\n        // Pitch\n        case generatorTypes.fineTune:\n            // Data is already centered\n            this.setGeneratorOverride(generator, dataValue, true);\n            break;\n\n        // Lfo to pitch\n        case generatorTypes.modLfoToPitch:\n        case generatorTypes.vibLfoToPitch:\n            cents = clip(dataValue, -127, 127) * 9.375;\n            this.setGeneratorOverride(generator, cents, true);\n            break;\n\n        // Env to pitch\n        case generatorTypes.modEnvToPitch:\n            cents = clip(dataValue, -127, 127) * 9.375;\n            this.setGeneratorOverride(generator, cents);\n            break;\n\n        // Mod lfo to vol\n        case generatorTypes.modLfoToVolume:\n            // 0.1875 dB is 1.875 cB\n            centibels = 1.875 * dataLSB;\n            this.setGeneratorOverride(generator, centibels, true);\n            break;\n\n        // Filter fc\n        case generatorTypes.initialFilterFc: {\n            // Minimum: 100 Hz -> 4335 cents\n            const fcCents = 4335 + 59 * dataLSB;\n            this.setGeneratorOverride(generator, fcCents, true);\n            break;\n        }\n\n        // Filter Q\n        case generatorTypes.initialFilterQ:\n            // Note: this uses the \"modulator-ish\" approach proposed by mrbumpy409\n            // Here https://github.com/FluidSynth/fluidsynth/issues/1473\n            centibels = 215 * (dataLSB / 127);\n            this.setGeneratorOverride(generator, centibels, true);\n            break;\n\n        // To filterFc\n        case generatorTypes.modLfoToFilterFc:\n            cents = clip(dataValue, -64, 63) * 56.25;\n            this.setGeneratorOverride(generator, cents, true);\n            break;\n\n        case generatorTypes.modEnvToFilterFc:\n            cents = clip(dataValue, -64, 63) * 56.25;\n            this.setGeneratorOverride(generator, cents);\n            break;\n\n        // Effects\n        case generatorTypes.chorusEffectsSend:\n        case generatorTypes.reverbEffectsSend:\n            this.setGeneratorOverride(\n                generator,\n                clip(dataValue, 0, 255) * (1000 / 255)\n            );\n            break;\n    }\n}\n", "import { consoleColors } from \"../../../../../utils/other\";\nimport { SpessaSynthInfo } from \"../../../../../utils/loggin\";\nimport { NON_CC_INDEX_OFFSET } from \"../../../engine_components/controller_tables\";\nimport { nonRegisteredMSB, registeredParameterTypes } from \"./data_entry_coarse\";\nimport { handleAWE32NRPN } from \"./awe32\";\nimport type { MIDIChannel } from \"../../../engine_components/midi_channel\";\nimport { midiControllers } from \"../../../../../midi/enums\";\nimport { customControllers, dataEntryStates } from \"../../../../enums\";\nimport { modulatorSources } from \"../../../../../soundbank/enums\";\n\n/**\n * Executes a data entry fine (LSB) change for the current channel.\n * @param dataValue The value to set for the data entry fine controller (0-127).\n */\nexport function dataEntryFine(this: MIDIChannel, dataValue: number) {\n    // Store in cc table\n    this.midiControllers[midiControllers.dataEntryLSB] = dataValue << 7;\n    switch (this.dataEntryState) {\n        default:\n            break;\n\n        case dataEntryStates.RPCoarse:\n        case dataEntryStates.RPFine: {\n            const rpnValue =\n                this.midiControllers[midiControllers.registeredParameterMSB] |\n                (this.midiControllers[midiControllers.registeredParameterLSB] >>\n                    7);\n            switch (rpnValue) {\n                default:\n                    break;\n\n                // Pitch bend range fine tune\n                case registeredParameterTypes.pitchWheelRange: {\n                    if (dataValue === 0) {\n                        break;\n                    }\n                    // 14-bit value, so upper 7 are coarse and lower 7 are fine!\n                    this.midiControllers[\n                        NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange\n                    ] |= dataValue;\n                    const actualTune =\n                        (this.midiControllers[\n                            NON_CC_INDEX_OFFSET +\n                                modulatorSources.pitchWheelRange\n                        ] >>\n                            7) +\n                        dataValue / 128;\n                    SpessaSynthInfo(\n                        `%cChannel ${this.channelNumber} pitch wheel range. Semitones: %c${actualTune}`,\n                        consoleColors.info,\n                        consoleColors.value\n                    );\n                    break;\n                }\n\n                // Fine-tuning\n                case registeredParameterTypes.fineTuning: {\n                    // Grab the data and shift\n                    const coarse =\n                        this.customControllers[customControllers.channelTuning];\n                    const finalTuning = (coarse << 7) | dataValue;\n                    this.setTuning(finalTuning * 0.01220703125); // Multiply by 8192 / 100 (cent increments)\n                    break;\n                }\n\n                // Modulation depth\n                case registeredParameterTypes.modulationDepth: {\n                    const currentModulationDepthCents =\n                        this.customControllers[\n                            customControllers.modulationMultiplier\n                        ] * 50;\n                    const cents =\n                        currentModulationDepthCents + (dataValue / 128) * 100;\n                    this.setModulationDepth(cents);\n                    break;\n                }\n\n                case 0x3fff:\n                    this.resetParameters();\n                    break;\n            }\n            break;\n        }\n\n        case dataEntryStates.NRPFine: {\n            const NRPNCoarse =\n                this.midiControllers[\n                    midiControllers.nonRegisteredParameterMSB\n                ] >> 7;\n            const NRPNFine =\n                this.midiControllers[\n                    midiControllers.nonRegisteredParameterLSB\n                ] >> 7;\n            if (NRPNCoarse === nonRegisteredMSB.SF2) {\n                return;\n            }\n            switch (NRPNCoarse) {\n                default:\n                    SpessaSynthInfo(\n                        `%cUnrecognized NRPN LSB for %c${this.channelNumber}%c: %c(0x${NRPNFine.toString(\n                            16\n                        ).toUpperCase()} 0x${NRPNFine.toString(\n                            16\n                        ).toUpperCase()})%c data value: %c${dataValue}`,\n                        consoleColors.warn,\n                        consoleColors.recognized,\n                        consoleColors.warn,\n                        consoleColors.unrecognized,\n                        consoleColors.warn,\n                        consoleColors.value\n                    );\n                    break;\n\n                case nonRegisteredMSB.awe32:\n                    handleAWE32NRPN.call(\n                        this,\n                        NRPNFine,\n                        dataValue,\n                        this.midiControllers[midiControllers.dataEntryMSB] >> 7\n                    );\n                    break;\n            }\n        }\n    }\n}\n", "import { nonRegisteredMSB } from \"./data_entry/data_entry_coarse\";\nimport type { MIDIChannel } from \"../../engine_components/midi_channel\";\nimport { type MIDIController, midiControllers } from \"../../../../midi/enums\";\nimport { customControllers, dataEntryStates } from \"../../../enums\";\nimport { DEFAULT_PERCUSSION } from \"../../engine_components/synth_constants\";\nimport { BankSelectHacks } from \"../../../../utils/midi_hacks\";\n\n/**\n * Handles MIDI controller changes for a channel.\n * @param controllerNumber The MIDI controller number (0-127).\n * @param controllerValue The value of the controller (0-127).\n * @param sendEvent If an event should be emitted.\n * @remarks\n * This function processes MIDI controller changes, updating the channel's\n * midiControllers table and handling special cases like bank select,\n * data entry, and sustain pedal. It also computes modulators for all voices\n * in the channel based on the controller change.\n * If the controller number is greater than 127, it is treated as a channel\n * configuration controller, and the `force` parameter must be set to true\n * to allow changes.\n */\nexport function controllerChange(\n    this: MIDIChannel,\n    controllerNumber: MIDIController,\n    controllerValue: number,\n    sendEvent = true\n) {\n    if (controllerNumber > 127) {\n        throw new Error(\"Invalid MIDI Controller.\");\n    }\n\n    // Lsb controller values: append them as the lower nibble of the 14-bit value\n    // Excluding bank select and data entry as it's handled separately\n    if (\n        controllerNumber >= midiControllers.modulationWheelLSB &&\n        controllerNumber <= midiControllers.effectControl2LSB &&\n        controllerNumber !== midiControllers.dataEntryLSB\n    ) {\n        const actualCCNum = controllerNumber - 32;\n        if (this.lockedControllers[actualCCNum]) {\n            return;\n        }\n        // Append the lower nibble to the main controller\n        this.midiControllers[actualCCNum] =\n            (this.midiControllers[actualCCNum] & 0x3f80) |\n            (controllerValue & 0x7f);\n        this.voices.forEach((v) => this.computeModulators(v, 1, actualCCNum));\n    }\n    if (this.lockedControllers[controllerNumber]) {\n        return;\n    }\n\n    // Apply the cc to the table\n    this.midiControllers[controllerNumber] = controllerValue << 7;\n\n    // Interpret special CCs\n    {\n        switch (controllerNumber) {\n            case midiControllers.allNotesOff:\n                this.stopAllNotes();\n                break;\n\n            case midiControllers.allSoundOff:\n                this.stopAllNotes(true);\n                break;\n\n            // Special case: bank select\n            case midiControllers.bankSelect:\n                this.setBankMSB(controllerValue);\n                // Ensure that for XG, drum channels always are 127\n                // Testcase\n                // Dave-Rodgers-D-j-Vu-Anonymous-20200419154845-nonstop2k.com.mid\n                if (\n                    this.channelNumber % 16 === DEFAULT_PERCUSSION &&\n                    BankSelectHacks.isSystemXG(this.channelSystem)\n                ) {\n                    this.setBankMSB(127);\n                }\n\n                break;\n\n            case midiControllers.bankSelectLSB:\n                this.setBankLSB(controllerValue);\n                break;\n\n            // Check for RPN and NPRN and data entry\n            case midiControllers.registeredParameterLSB:\n                this.dataEntryState = dataEntryStates.RPFine;\n                break;\n\n            case midiControllers.registeredParameterMSB:\n                this.dataEntryState = dataEntryStates.RPCoarse;\n                break;\n\n            case midiControllers.nonRegisteredParameterMSB:\n                // Sf spec section 9.6.2\n                this.customControllers[customControllers.sf2NPRNGeneratorLSB] =\n                    0;\n                this.dataEntryState = dataEntryStates.NRPCoarse;\n                break;\n\n            case midiControllers.nonRegisteredParameterLSB:\n                if (\n                    this.midiControllers[\n                        midiControllers.nonRegisteredParameterMSB\n                    ] >>\n                        7 ===\n                    nonRegisteredMSB.SF2\n                ) {\n                    // If a <100 value has already been sent, reset!\n                    if (\n                        this.customControllers[\n                            customControllers.sf2NPRNGeneratorLSB\n                        ] %\n                            100 !==\n                        0\n                    ) {\n                        this.customControllers[\n                            customControllers.sf2NPRNGeneratorLSB\n                        ] = 0;\n                    }\n\n                    if (controllerValue === 100) {\n                        this.customControllers[\n                            customControllers.sf2NPRNGeneratorLSB\n                        ] += 100;\n                    } else if (controllerValue === 101) {\n                        this.customControllers[\n                            customControllers.sf2NPRNGeneratorLSB\n                        ] += 1000;\n                    } else if (controllerValue === 102) {\n                        this.customControllers[\n                            customControllers.sf2NPRNGeneratorLSB\n                        ] += 10000;\n                    } else if (controllerValue < 100) {\n                        this.customControllers[\n                            customControllers.sf2NPRNGeneratorLSB\n                        ] += controllerValue;\n                    }\n                }\n                this.dataEntryState = dataEntryStates.NRPFine;\n                break;\n\n            case midiControllers.dataEntryMSB:\n                this.dataEntryCoarse(controllerValue);\n                break;\n\n            case midiControllers.dataEntryLSB:\n                this.dataEntryFine(controllerValue);\n                break;\n\n            case midiControllers.resetAllControllers:\n                this.resetControllersRP15Compliant();\n                break;\n\n            case midiControllers.sustainPedal:\n                if (controllerValue < 64) {\n                    this.sustainedVoices.forEach((v) => {\n                        v.release(this.synth.currentSynthTime);\n                    });\n                    this.sustainedVoices = [];\n                }\n                break;\n\n            // Default: just compute modulators\n            default:\n                this.voices.forEach((v) =>\n                    this.computeModulators(v, 1, controllerNumber)\n                );\n                break;\n        }\n    }\n    if (!sendEvent) {\n        return;\n    }\n    this.synthProps.callEvent(\"controllerChange\", {\n        channel: this.channelNumber,\n        controllerNumber: controllerNumber,\n        controllerValue: controllerValue\n    });\n}\n", "// Tests were performed by John Novak\n// https://github.com/dosbox-staging/dosbox-staging/pull/2705\n\n/*\nCC 5 value  Portamento time\n----------  ---------------\n     0          0.000 s\n     1          0.006 s\n     2          0.023 s\n     4          0.050 s\n     8          0.110 s\n    16          0.250 s\n    32          0.500 s\n    64          2.060 s\n    80          4.200 s\n    96          8.400 s\n   112         19.500 s\n   116         26.700 s\n   120         40.000 s\n   124         80.000 s\n   127        480.000 s\n*/\n\nconst portamentoLookup: Record<number, number> = {\n    0: 0.0,\n    1: 0.006,\n    2: 0.023,\n    4: 0.05,\n    8: 0.11,\n    16: 0.25,\n    32: 0.5,\n    64: 2.06,\n    80: 4.2,\n    96: 8.4,\n    112: 19.5,\n    116: 26.7,\n    120: 40.0,\n    124: 80.0,\n    127: 480.0\n} as const;\n\nfunction getLookup(value: number): number {\n    if (portamentoLookup[value] !== undefined) {\n        return portamentoLookup[value];\n    }\n    // Get the nearest lower and upper points from the lookup table\n    let lower = null;\n    let upper = null;\n\n    for (const k of Object.keys(portamentoLookup)) {\n        const key = parseInt(k);\n        if (key < value && (lower === null || key > lower)) {\n            lower = key;\n        }\n        if (key > value && (upper === null || key < upper)) {\n            upper = key;\n        }\n    }\n\n    // If we have found both lower and upper points, perform linear interpolation\n    if (lower !== null && upper !== null) {\n        const lowerTime = portamentoLookup[lower];\n        const upperTime = portamentoLookup[upper];\n\n        // Linear interpolation\n        return (\n            lowerTime +\n            ((value - lower) * (upperTime - lowerTime)) / (upper - lower)\n        );\n    }\n    return 0;\n}\n\n/**\n * Converts portamento time to seconds.\n * @param time MIDI portamento time (CC 5 value) (0-127)\n * @param distance Distance in semitones (keys) to slide over.\n * @returns The portamento time in seconds.\n */\nexport function portamentoTimeToSeconds(\n    time: number,\n    distance: number\n): number {\n    // This seems to work fine for the MIDIs I have.\n    // Why? No idea, but it does. :-)\n    // Note: Some tests about portamento were compared to SC-VA and SYXG50\n    return getLookup(time) * (distance / 36);\n}\n", "import { portamentoTimeToSeconds } from \"./portamento_time\";\nimport { Modulator } from \"../../../soundbank/basic_soundbank/modulator\";\nimport { GENERATOR_OVERRIDE_NO_CHANGE_VALUE } from \"../engine_components/synth_constants\";\nimport { SpessaSynthWarn } from \"../../../utils/loggin\";\nimport type { MIDIChannel } from \"../engine_components/midi_channel\";\nimport { generatorTypes } from \"../../../soundbank/basic_soundbank/generator_types\";\nimport { midiControllers } from \"../../../midi/enums\";\nimport { customControllers } from \"../../enums\";\n\n/**\n * Sends a \"MIDI Note on\" message and starts a note.\n * @param midiNote The MIDI note number (0-127).\n * @param velocity The velocity of the note (0-127). If less than 1, it will send a note off instead.\n */\nexport function noteOn(this: MIDIChannel, midiNote: number, velocity: number) {\n    if (velocity < 1) {\n        this.noteOff(midiNote);\n        return;\n    }\n    velocity = Math.min(127, velocity);\n\n    if (\n        (this.synthProps.masterParameters.blackMIDIMode &&\n            this.synth.totalVoicesAmount > 200 &&\n            velocity < 40) ||\n        (this.synthProps.masterParameters.blackMIDIMode && velocity < 10) ||\n        this._isMuted\n    ) {\n        return;\n    }\n\n    if (!this.preset) {\n        SpessaSynthWarn(`No preset for channel ${this.channelNumber}!`);\n        return;\n    }\n\n    const realKey =\n        midiNote +\n        this.channelTransposeKeyShift +\n        this.customControllers[customControllers.channelKeyShift];\n    let internalMidiNote = realKey;\n\n    if (realKey > 127 || realKey < 0) {\n        return;\n    }\n    const program = this.preset?.program;\n    const tune = this.synthProps.tunings[program]?.[realKey]?.midiNote;\n    if (tune >= 0) {\n        internalMidiNote = tune;\n    }\n\n    // Monophonic retrigger\n    if (this.synthProps.masterParameters.monophonicRetriggerMode) {\n        this.killNote(midiNote, -7200);\n    }\n\n    // Key velocity override\n    const keyVel = this.synth.keyModifierManager.getVelocity(\n        this.channelNumber,\n        realKey\n    );\n    if (keyVel > -1) {\n        velocity = keyVel;\n    }\n\n    // Gain\n    const voiceGain = this.synth.keyModifierManager.getGain(\n        this.channelNumber,\n        realKey\n    );\n\n    // Portamento\n    let portamentoFromKey = -1;\n    let portamentoDuration = 0;\n    // Note: the 14-bit value needs to go down to 7-bit\n    const portamentoTime =\n        this.midiControllers[midiControllers.portamentoTime] >> 7;\n    const control = this.midiControllers[midiControllers.portamentoControl];\n    const currentFromKey = control >> 7;\n    if (\n        !this.drumChannel && // No portamento on drum channel\n        currentFromKey !== internalMidiNote && // If the same note, there's no portamento\n        this.midiControllers[midiControllers.portamentoOnOff] >= 8192 && // (64 << 7)\n        portamentoTime > 0 // 0 duration is no portamento\n    ) {\n        // A value of one means the initial portamento\n        if (control !== 1) {\n            const diff = Math.abs(internalMidiNote - currentFromKey);\n            portamentoDuration = portamentoTimeToSeconds(portamentoTime, diff);\n            portamentoFromKey = currentFromKey;\n        }\n        // Set portamento control to previous value\n        this.controllerChange(\n            midiControllers.portamentoControl,\n            internalMidiNote\n        );\n    }\n    // Get voices\n    const voices = this.synthProps.getVoices(\n        this.channelNumber,\n        internalMidiNote,\n        velocity,\n        realKey\n    );\n\n    // Zero means disabled\n    let panOverride = 0;\n    if (this.randomPan) {\n        // The range is -500 to 500\n        panOverride = Math.round(Math.random() * 1000 - 500);\n    }\n\n    // Add voices\n    const channelVoices = this.voices;\n    voices.forEach((voice) => {\n        // Apply portamento\n        voice.portamentoFromKey = portamentoFromKey;\n        voice.portamentoDuration = portamentoDuration;\n\n        // Apply pan override\n        voice.overridePan = panOverride;\n\n        // Apply gain override\n        voice.gain = voiceGain;\n\n        // Dynamic modulators (if none, this won't iterate over anything)\n        this.sysExModulators.modulatorList.forEach((m) => {\n            const mod = m.mod;\n            const existingModIndex = voice.modulators.findIndex((voiceMod) =>\n                Modulator.isIdentical(voiceMod, mod)\n            );\n\n            // Replace or add\n            if (existingModIndex !== -1) {\n                voice.modulators[existingModIndex] = Modulator.copyFrom(mod);\n            } else {\n                voice.modulators.push(Modulator.copyFrom(mod));\n            }\n        });\n\n        // Apply generator override\n        if (this.generatorOverridesEnabled) {\n            this.generatorOverrides.forEach((overrideValue, generatorType) => {\n                if (overrideValue === GENERATOR_OVERRIDE_NO_CHANGE_VALUE) {\n                    return;\n                }\n                voice.generators[generatorType] = overrideValue;\n            });\n        }\n\n        // Apply exclusive class\n        const exclusive = voice.exclusiveClass;\n        if (exclusive !== 0) {\n            // Kill all voices with the same exclusive class\n            channelVoices.forEach((v) => {\n                if (v.exclusiveClass === exclusive) {\n                    v.exclusiveRelease(this.synth.currentSynthTime);\n                }\n            });\n        }\n        // Compute all modulators\n        this.computeModulators(voice);\n        // Modulate sample offsets (these are not real time)\n        const cursorStartOffset =\n            voice.modulatedGenerators[generatorTypes.startAddrsOffset] +\n            voice.modulatedGenerators[generatorTypes.startAddrsCoarseOffset] *\n                32768;\n        const endOffset =\n            voice.modulatedGenerators[generatorTypes.endAddrOffset] +\n            voice.modulatedGenerators[generatorTypes.endAddrsCoarseOffset] *\n                32768;\n        const loopStartOffset =\n            voice.modulatedGenerators[generatorTypes.startloopAddrsOffset] +\n            voice.modulatedGenerators[\n                generatorTypes.startloopAddrsCoarseOffset\n            ] *\n                32768;\n        const loopEndOffset =\n            voice.modulatedGenerators[generatorTypes.endloopAddrsOffset] +\n            voice.modulatedGenerators[generatorTypes.endloopAddrsCoarseOffset] *\n                32768;\n        const sm = voice.sample;\n        // Apply them\n        const clamp = (num: number) =>\n            Math.max(0, Math.min(sm.sampleData.length - 1, num));\n        sm.cursor = clamp(sm.cursor + cursorStartOffset);\n        sm.end = clamp(sm.end + endOffset);\n        sm.loopStart = clamp(sm.loopStart + loopStartOffset);\n        sm.loopEnd = clamp(sm.loopEnd + loopEndOffset);\n        // Swap loops if needed\n        if (sm.loopEnd < sm.loopStart) {\n            const temp = sm.loopStart;\n            sm.loopStart = sm.loopEnd;\n            sm.loopEnd = temp;\n        }\n        if (sm.loopEnd - sm.loopStart < 1) {\n            // Disable loop if enabled\n            // Don't disable on release mode. Testcase:\n            // https://github.com/spessasus/SpessaSynth/issues/174\n            if (sm.loopingMode === 1 || sm.loopingMode === 3) {\n                sm.loopingMode = 0;\n                sm.isLooping = false;\n            }\n        }\n        // Set the current attenuation to target,\n        // As it's interpolated (we don't want 0 attenuation for even a split second)\n        voice.volumeEnvelope.attenuation =\n            voice.volumeEnvelope.attenuationTargetGain;\n        // Set initial pan to avoid split second changing from middle to the correct value\n        voice.currentPan = Math.max(\n            -500,\n            Math.min(500, voice.modulatedGenerators[generatorTypes.pan])\n        ); //  -500 to 500\n    });\n\n    this.synth.totalVoicesAmount += voices.length;\n    // Cap the voices\n    if (\n        this.synth.totalVoicesAmount > this.synthProps.masterParameters.voiceCap\n    ) {\n        this.synthProps.voiceKilling(voices.length);\n    }\n    channelVoices.push(...voices);\n    this.sendChannelProperty();\n    this.synthProps.callEvent(\"noteOn\", {\n        midiNote: midiNote,\n        channel: this.channelNumber,\n        velocity: velocity\n    });\n}\n", "import { SpessaSynthWarn } from \"../../../../utils/loggin\";\nimport type { MIDIChannel } from \"../../engine_components/midi_channel\";\nimport { customControllers } from \"../../../enums\";\n\n/**\n * Releases a note by its MIDI note number.\n * If the note is in high performance mode and the channel is not a drum channel,\n * it kills the note instead of releasing it.\n * @param midiNote The MIDI note number to release (0-127).\n */\nexport function noteOff(this: MIDIChannel, midiNote: number) {\n    if (midiNote > 127 || midiNote < 0) {\n        SpessaSynthWarn(`Received a noteOn for note`, midiNote, \"Ignoring.\");\n        return;\n    }\n\n    // Adjust the midi note with the channel transpose key shift\n    const realKey =\n        midiNote +\n        this.channelTransposeKeyShift +\n        this.customControllers[customControllers.channelKeyShift];\n\n    // If high performance mode, kill notes instead of stopping them\n    if (this.synthProps.masterParameters.blackMIDIMode) {\n        // If the channel is percussion channel, do not kill the notes\n        if (!this.drumChannel) {\n            this.killNote(realKey, -6950);\n            this.synthProps.callEvent(\"noteOff\", {\n                midiNote: midiNote,\n                channel: this.channelNumber\n            });\n            return;\n        }\n    }\n\n    const channelVoices = this.voices;\n    channelVoices.forEach((v) => {\n        if (v.realKey !== realKey || v.isInRelease) {\n            return;\n        }\n        // If hold pedal, move to sustain\n        if (this.holdPedal) {\n            this.sustainedVoices.push(v);\n        } else {\n            v.release(this.synth.currentSynthTime);\n        }\n    });\n    this.synthProps.callEvent(\"noteOff\", {\n        midiNote: midiNote,\n        channel: this.channelNumber\n    });\n}\n", "import { SpessaSynthWarn } from \"../../../utils/loggin\";\nimport { BasicPreset } from \"../../../soundbank/basic_soundbank/basic_preset\";\nimport type { MIDIChannel } from \"../engine_components/midi_channel\";\n\n/**\n * Changes the program (preset) of the channel.\n * @param program The program number (0-127) to change to.\n */\nexport function programChange(this: MIDIChannel, program: number) {\n    if (this.lockPreset) {\n        return;\n    }\n\n    this.patch.program = program;\n    let preset = this.synth.soundBankManager.getPreset(\n        this.patch,\n        this.channelSystem\n    );\n    if (!preset) {\n        SpessaSynthWarn(\"No presets! Using empty fallback.\");\n        preset = new BasicPreset(\n            this.synth.soundBankManager.soundBankList[0].soundBank\n        );\n        // Fallback preset, make it scream so it's easy to notice :-)\n        preset.name = \"SPESSA EMPTY FALLBACK PRESET\";\n    }\n    this.preset = preset;\n\n    // Drums first\n    if (preset.isAnyDrums !== this.drumChannel) {\n        this.setDrumFlag(preset.isAnyDrums);\n    }\n    // Do not spread the preset as we don't want to copy it entirely.\n    this.synthProps.callEvent(\"programChange\", {\n        channel: this.channelNumber,\n        bankLSB: this.preset.bankLSB,\n        bankMSB: this.preset.bankMSB,\n        program: this.preset.program,\n        isGMGSDrum: this.preset.isGMGSDrum\n    });\n    this.sendChannelProperty();\n}\n", "import { Modulator } from \"../../../soundbank/basic_soundbank/modulator\";\nimport { modulatorCurveTypes, type ModulatorSourceEnum } from \"../../../soundbank/enums\";\nimport { NON_CC_INDEX_OFFSET } from \"./controller_tables\";\nimport type { GeneratorType } from \"../../../soundbank/basic_soundbank/generator_types\";\nimport { ModulatorSource } from \"../../../soundbank/basic_soundbank/modulator_source\";\n\n/**\n * A class for dynamic modulators\n * that are assigned for more complex system exclusive messages\n */\nexport class DynamicModulatorSystem {\n    /**\n     * The current dynamic modulator list.\n     */\n    public modulatorList: { mod: Modulator; id: string }[] = [];\n\n    public resetModulators() {\n        this.modulatorList = [];\n    }\n\n    /**\n     * @param source Like in midiControllers: values below NON_CC_INDEX_OFFSET are CCs,\n     * above are regular modulator sources.\n     * @param destination The generator type to modulate.\n     * @param amount The amount of modulation to apply.\n     * @param isBipolar If true, the modulation is bipolar (ranges from -1 to 1 instead of from 0 to 1).\n     * @param isNegative If true, the modulation is negative (goes from 1 to 0 instead of from 0 to 1).\n     */\n    public setModulator(\n        source: ModulatorSourceEnum,\n        destination: GeneratorType,\n        amount: number,\n        isBipolar = false,\n        isNegative = false\n    ) {\n        const id = this.getModulatorID(\n            source,\n            destination,\n            isBipolar,\n            isNegative\n        );\n        if (amount === 0) {\n            this.deleteModulator(id);\n        }\n        const mod = this.modulatorList.find((m) => m.id === id);\n        if (mod) {\n            mod.mod.transformAmount = amount;\n        } else {\n            let srcNum: ModulatorSourceEnum, isCC: boolean;\n            if (source >= NON_CC_INDEX_OFFSET) {\n                srcNum = (source - NON_CC_INDEX_OFFSET) as ModulatorSourceEnum;\n                isCC = false;\n            } else {\n                srcNum = source;\n                isCC = true;\n            }\n            const modulator = new Modulator(\n                new ModulatorSource(\n                    srcNum,\n                    modulatorCurveTypes.linear,\n                    isCC,\n                    isBipolar\n                ),\n                new ModulatorSource(),\n                destination,\n                amount,\n                0\n            );\n            this.modulatorList.push({\n                mod: modulator,\n                id: id\n            });\n        }\n    }\n\n    private getModulatorID(\n        source: number,\n        destination: GeneratorType,\n        isBipolar: boolean,\n        isNegative: boolean\n    ) {\n        return `${source}-${destination}-${isBipolar}-${isNegative}`;\n    }\n\n    private deleteModulator(id: string) {\n        this.modulatorList = this.modulatorList.filter((m) => m.id !== id);\n    }\n}\n", "import { VolumeEnvelope } from \"./dsp_chain/volume_envelope\";\nimport { ModulationEnvelope } from \"./dsp_chain/modulation_envelope\";\nimport { Modulator } from \"../../../soundbank/basic_soundbank/modulator\";\nimport { generatorTypes } from \"../../../soundbank/enums\";\nimport { generatorLimits, type GeneratorType } from \"../../../soundbank/basic_soundbank/generator_types\";\nimport type { MIDIChannel } from \"./midi_channel\";\nimport type { Voice } from \"./voice\";\n\n/**\n * Compute_modulator.ts\n * purpose: precomputes all curve types and computes modulators\n */\n\nconst EFFECT_MODULATOR_TRANSFORM_MULTIPLIER = 1000 / 200;\n\n/**\n * Computes a given modulator\n * @param controllerTable all midi controllers as 14bit values + the non-controller indexes, starting at 128\n * @param modulator the modulator to compute\n * @param voice the voice belonging to the modulator\n * @returns the computed value\n */\nexport function computeModulator(\n    controllerTable: Int16Array,\n    modulator: Modulator,\n    voice: Voice\n): number {\n    if (modulator.transformAmount === 0) {\n        modulator.currentValue = 0;\n        return 0;\n    }\n    const sourceValue = modulator.primarySource.getValue(\n        controllerTable,\n        voice\n    );\n    const secondSrcValue = modulator.secondarySource.getValue(\n        controllerTable,\n        voice\n    );\n\n    // See the comment for isEffectModulator (modulator.ts in basic_soundbank) for explanation\n    let transformAmount = modulator.transformAmount;\n    if (modulator.isEffectModulator && transformAmount <= 1000) {\n        transformAmount *= EFFECT_MODULATOR_TRANSFORM_MULTIPLIER;\n        transformAmount = Math.min(transformAmount, 1000);\n    }\n\n    // Compute the modulator\n    let computedValue = sourceValue * secondSrcValue * transformAmount;\n\n    if (modulator.transformType === 2) {\n        // Abs value\n        computedValue = Math.abs(computedValue);\n    }\n\n    // Resonant modulator: take its value and ensure that it won't change the final gain\n    if (modulator.isDefaultResonantModulator) {\n        // Half the gain, negates the filter\n        voice.resonanceOffset = Math.max(0, computedValue / 2);\n    }\n\n    modulator.currentValue = computedValue;\n    return computedValue;\n}\n\n/**\n * Computes modulators of a given voice. Source and index indicate what modulators shall be computed.\n * @param voice the voice to compute modulators for.\n * @param sourceUsesCC what modulators should be computed, -1 means all, 0 means modulator source enum 1 means midi controller.\n * @param sourceIndex enum for the source.\n */\nexport function computeModulators(\n    this: MIDIChannel,\n    voice: Voice,\n    sourceUsesCC: -1 | 0 | 1 = -1,\n    sourceIndex = 0\n) {\n    const modulators = voice.modulators;\n    let generators = voice.generators;\n    // Apply offsets if enabled\n    if (this.generatorOffsetsEnabled) {\n        generators = new Int16Array(generators);\n        for (let i = 0; i < generators.length; i++) {\n            generators[i] += this.generatorOffsets[i];\n        }\n    }\n    const modulatedGenerators = voice.modulatedGenerators;\n\n    if (sourceUsesCC === -1) {\n        // All modulators mode: compute all modulators\n        modulatedGenerators.set(generators);\n        modulators.forEach((mod) => {\n            // Prevent -32k overflow\n            // Testcase: gm.dls polysynth\n            modulatedGenerators[mod.destination] = Math.min(\n                32767,\n                Math.max(\n                    -32768,\n                    modulatedGenerators[mod.destination] +\n                        computeModulator(this.midiControllers, mod, voice)\n                )\n            );\n        });\n        // Apply limits\n        for (let gen = 0; gen < modulatedGenerators.length; gen++) {\n            const limit = generatorLimits[gen];\n            if (!limit) {\n                // Skip unused\n                continue;\n            }\n            modulatedGenerators[gen] = Math.min(\n                limit.max,\n                Math.max(limit.min, modulatedGenerators[gen])\n            );\n        }\n        VolumeEnvelope.recalculate(voice);\n        ModulationEnvelope.recalculate(voice);\n        return;\n    }\n\n    // Optimized mode: calculate only modulators that use the given source\n    const volumeEnvelopeNeedsRecalculation = new Set<GeneratorType>([\n        generatorTypes.initialAttenuation,\n        generatorTypes.delayVolEnv,\n        generatorTypes.attackVolEnv,\n        generatorTypes.holdVolEnv,\n        generatorTypes.decayVolEnv,\n        generatorTypes.sustainVolEnv,\n        generatorTypes.releaseVolEnv,\n        generatorTypes.keyNumToVolEnvHold,\n        generatorTypes.keyNumToVolEnvDecay\n    ]);\n\n    const computedDestinations = new Set<GeneratorType>();\n\n    const sourceCC = !!sourceUsesCC;\n\n    modulators.forEach((mod) => {\n        if (\n            (mod.primarySource.isCC === sourceCC &&\n                mod.primarySource.index === sourceIndex) ||\n            (mod.secondarySource.isCC === sourceCC &&\n                mod.secondarySource.index === sourceIndex)\n        ) {\n            const destination = mod.destination;\n            if (!computedDestinations.has(destination)) {\n                // Reset this destination\n                let outputValue = generators[destination];\n                // Compute our modulator\n                computeModulator(this.midiControllers, mod, voice);\n                // Sum the values of all modulators for this destination\n                modulators.forEach((m) => {\n                    if (m.destination === destination) {\n                        outputValue += m.currentValue;\n                    }\n                });\n                // Apply the limits instantly to prevent -32k overflow\n                // Testcase: gm.dls polysynth\n                const limits = generatorLimits[destination];\n                modulatedGenerators[destination] = Math.max(\n                    limits.min,\n                    Math.min(outputValue, limits.max)\n                );\n                computedDestinations.add(destination);\n            }\n        }\n    });\n\n    // Recalculate volume envelope if necessary\n    if (\n        [...computedDestinations].some((dest) =>\n            volumeEnvelopeNeedsRecalculation.has(dest)\n        )\n    ) {\n        VolumeEnvelope.recalculate(voice);\n    }\n\n    ModulationEnvelope.recalculate(voice);\n}\n", "import { CONTROLLER_TABLE_SIZE, CUSTOM_CONTROLLER_TABLE_SIZE, NON_CC_INDEX_OFFSET } from \"./controller_tables\";\nimport {\n    resetControllers,\n    resetControllersRP15Compliant,\n    resetParameters,\n    resetPreset\n} from \"../engine_methods/controller_control/reset_controllers\";\nimport { renderVoice } from \"./dsp_chain/render_voice\";\nimport { panAndMixVoice } from \"./dsp_chain/stereo_panner\";\nimport { dataEntryFine } from \"../engine_methods/controller_control/data_entry/data_entry_fine\";\nimport { controllerChange } from \"../engine_methods/controller_control/controller_change\";\nimport { dataEntryCoarse } from \"../engine_methods/controller_control/data_entry/data_entry_coarse\";\nimport { noteOn } from \"../engine_methods/note_on\";\nimport { noteOff } from \"../engine_methods/stopping_notes/note_off\";\nimport { programChange } from \"../engine_methods/program_change\";\nimport { DEFAULT_PERCUSSION, GENERATOR_OVERRIDE_NO_CHANGE_VALUE } from \"./synth_constants\";\nimport { DynamicModulatorSystem } from \"./dynamic_modulator_system\";\nimport { computeModulators } from \"./compute_modulator\";\nimport {\n    generatorLimits,\n    GENERATORS_AMOUNT,\n    type GeneratorType,\n    generatorTypes\n} from \"../../../soundbank/basic_soundbank/generator_types\";\nimport type { BasicPreset } from \"../../../soundbank/basic_soundbank/basic_preset\";\nimport type { ChannelProperty, SynthSystem, VoiceList } from \"../../types\";\nimport type { SpessaSynthProcessor } from \"../../processor\";\nimport { type CustomController, customControllers, type DataEntryState, dataEntryStates } from \"../../enums\";\nimport { SpessaSynthInfo } from \"../../../utils/loggin\";\nimport { consoleColors } from \"../../../utils/other\";\nimport type { ProtectedSynthValues } from \"./internal_synth_values\";\nimport { midiControllers } from \"../../../midi/enums\";\nimport { modulatorSources } from \"../../../soundbank/enums\";\nimport type { MIDIPatch } from \"../../../soundbank/basic_soundbank/midi_patch\";\nimport { BankSelectHacks } from \"../../../utils/midi_hacks\";\n\n/**\n * This class represents a single MIDI Channel within the synthesizer.\n */\nexport class MIDIChannel {\n    /*\n     * An array of MIDI controllers for the channel.\n     * This array is used to store the state of various MIDI controllers\n     * such as volume, pan, modulation, etc.\n     * @remarks\n     * A bit of an explanation:\n     * The controller table is stored as an int16 array, it stores 14-bit values.\n     * This controller table is then extended with the modulatorSources section,\n     * for example, pitch range and pitch range depth.\n     * This allows us for precise control range and supports full pitch-wheel resolution.\n     */\n    public readonly midiControllers: Int16Array = new Int16Array(\n        CONTROLLER_TABLE_SIZE\n    );\n\n    /**\n     * An array indicating if a controller, at the equivalent index in the midiControllers array, is locked\n     * (i.e., not allowed changing).\n     * A locked controller cannot be modified.\n     */\n    public lockedControllers: boolean[] = Array(CONTROLLER_TABLE_SIZE).fill(\n        false\n    ) as boolean[];\n\n    /**\n     * An array of custom (non-SF2) control values such as RPN pitch tuning, transpose, modulation depth, etc.\n     * Refer to controller_tables.ts for the index definitions.\n     */\n    public readonly customControllers: Float32Array = new Float32Array(\n        CUSTOM_CONTROLLER_TABLE_SIZE\n    );\n\n    /**\n     * The key shift of the channel (in semitones).\n     */\n    public channelTransposeKeyShift = 0;\n\n    /**\n     * An array of octave tuning values for each note on the channel.\n     * Each index corresponds to a note (0 = C, 1 = C#, ..., 11 = B).\n     * Note: Repeated every 12 notes.\n     */\n    public channelOctaveTuning: Int8Array = new Int8Array(128);\n    /**\n     * A system for dynamic modulator assignment for advanced system exclusives.\n     */\n    public sysExModulators: DynamicModulatorSystem =\n        new DynamicModulatorSystem();\n    /**\n     * Indicates whether this channel is a drum channel.\n     */\n    public drumChannel = false;\n    /**\n     * Enables random panning for every note played on this channel.\n     */\n    public randomPan = false;\n    /**\n     * The current state of the data entry for the channel.\n     */\n    public dataEntryState: DataEntryState = dataEntryStates.Idle;\n\n    /**\n     * The currently selected MIDI patch of the channel.\n     * Note that the exact matching preset may not be available, but this represents exactly what MIDI asks for.\n     */\n    public readonly patch: MIDIPatch = {\n        bankMSB: 0,\n        bankLSB: 0,\n        program: 0,\n        isGMGSDrum: false\n    };\n    /**\n     * The preset currently assigned to the channel.\n     */\n    public preset?: BasicPreset;\n    /**\n     * Indicates whether the program on this channel is locked.\n     */\n    public lockPreset = false;\n    /**\n     * Indicates the MIDI system when the preset was locked.\n     */\n    public lockedSystem: SynthSystem = \"gs\";\n    /**\n     * Indicates whether the GS NRPN parameters are enabled for this channel.\n     */\n    public lockGSNRPNParams = false;\n    /**\n     * The vibrato settings for the channel.\n     * @property depth - Depth of the vibrato effect in cents.\n     * @property delay - Delay before the vibrato effect starts (in seconds).\n     * @property rate - Rate of the vibrato oscillation (in Hz).\n     */\n    public channelVibrato: { delay: number; depth: number; rate: number } = {\n        delay: 0,\n        depth: 0,\n        rate: 0\n    };\n    /**\n     * An array of voices currently active on the channel.\n     */\n    public voices: VoiceList = [];\n    /**\n     * An array of voices that are sustained on the channel.\n     */\n    public sustainedVoices: VoiceList = [];\n    /**\n     * The channel's number (0-based index)\n     */\n    public readonly channelNumber: number;\n    /**\n     * Parent processor instance.\n     */\n    public synth: SpessaSynthProcessor;\n    /**\n     * Grants access to protected synth values.\n     */\n    public synthProps: ProtectedSynthValues;\n    // MIDI messages\n    /**\n     * Sends a \"MIDI Note on\" message and starts a note.\n     * @param midiNote The MIDI note number (0-127).\n     * @param velocity The velocity of the note (0-127). If less than 1, it will send a note off instead.\n     */\n    public noteOn = noteOn.bind(this) as typeof noteOn;\n    // (A hacky way to split the class into multiple files)\n    /**\n     * Releases a note by its MIDI note number.\n     * If the note is in high performance mode and the channel is not a drum channel,\n     * it kills the note instead of releasing it.\n     * @param midiNote The MIDI note number to release (0-127).\n     */\n    public noteOff = noteOff.bind(this) as typeof noteOff;\n    // Bind all methods to the instance\n    /**\n     * Changes the program (preset) of the channel.\n     * @param programNumber The program number (0-127) to change to.\n     */\n    public programChange = programChange.bind(this) as typeof programChange;\n    // CC (Continuous Controller)\n    public controllerChange = controllerChange.bind(\n        this\n    ) as typeof controllerChange;\n    /**\n     * Reset all controllers for channel.\n     * This will reset all controllers to their default values,\n     * except for the locked controllers.\n     */\n    public readonly resetControllers = resetControllers.bind(\n        this\n    ) as typeof resetControllers;\n    public readonly resetPreset = resetPreset.bind(this) as typeof resetPreset;\n    /**\n     * https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp15.pdf\n     * Reset controllers according to RP-15 Recommended Practice.\n     */\n    public readonly resetControllersRP15Compliant =\n        resetControllersRP15Compliant.bind(\n            this\n        ) as typeof resetControllersRP15Compliant;\n    /**\n     * Reset all parameters to their default values.\n     * This includes NRPN and RPN controllers, data entry state,\n     * and generator overrides and offsets.\n     */\n    public resetParameters = resetParameters.bind(\n        this\n    ) as typeof resetParameters;\n    /**\n     * Executes a data entry fine (LSB) change for the current channel.\n     * @param dataValue The value to set for the data entry fine controller (0-127).\n     */\n    public dataEntryFine = dataEntryFine.bind(this) as typeof dataEntryFine;\n    /**\n     * Executes a data entry coarse (MSB) change for the current channel.\n     * @param dataValue The value to set for the data entry coarse controller (0-127).\n     */\n    public dataEntryCoarse = dataEntryCoarse.bind(\n        this\n    ) as typeof dataEntryCoarse;\n    /**\n     * Will be updated every time something tuning-related gets changed.\n     * This is used to avoid a big addition for every voice rendering call.\n     */\n    protected channelTuningCents = 0;\n    /**\n     * An array of offsets generators for SF2 nrpn support.\n     * A value of 0 means no change; -10 means 10 lower, etc.\n     */\n    protected generatorOffsets: Int16Array = new Int16Array(GENERATORS_AMOUNT);\n    // Tuning\n    /**\n     * A small optimization that disables applying offsets until at least one is set.\n     */\n    protected generatorOffsetsEnabled = false;\n    /**\n     * An array of override generators for AWE32 support.\n     * A value of 32,767 means unchanged, as it is not allowed anywhere.\n     */\n    protected generatorOverrides: Int16Array = new Int16Array(\n        GENERATORS_AMOUNT\n    );\n    /**\n     * A small optimization that disables applying overrides until at least one is set.\n     */\n    protected generatorOverridesEnabled = false;\n    // Voice rendering methods\n    protected renderVoice = renderVoice.bind(this);\n    protected panAndMixVoice = panAndMixVoice.bind(this);\n    protected computeModulators = computeModulators.bind(this);\n\n    /**\n     * Constructs a new MIDI channel.\n     */\n    public constructor(\n        synth: SpessaSynthProcessor,\n        synthProps: ProtectedSynthValues,\n        preset: BasicPreset | undefined,\n        channelNumber: number\n    ) {\n        this.synth = synth;\n        this.synthProps = synthProps;\n        this.preset = preset;\n        this.channelNumber = channelNumber;\n        this.resetGeneratorOverrides();\n        this.resetGeneratorOffsets();\n    }\n\n    /**\n     * Indicates whether the channel is muted.\n     */\n    protected _isMuted = false;\n\n    /**\n     * Indicates whether the channel is muted.\n     */\n    public get isMuted() {\n        return this._isMuted;\n    }\n\n    /**\n     * Indicates whether the sustain (hold) pedal is active.\n     */\n    public get holdPedal() {\n        // 64 << 7 = 8192\n        return this.midiControllers[midiControllers.sustainPedal] >= 8192;\n    }\n\n    protected get channelSystem(): SynthSystem {\n        return this.lockPreset\n            ? this.lockedSystem\n            : this.synthProps.masterParameters.midiSystem;\n    }\n\n    /**\n     * Transposes the channel by given amount of semitones.\n     * @param semitones The number of semitones to transpose the channel by. Can be decimal.\n     * @param force Defaults to false, if true, it will force the transpose even if the channel is a drum channel.\n     */\n    public transposeChannel(semitones: number, force = false) {\n        if (!this.drumChannel) {\n            semitones += this.synthProps.masterParameters.transposition;\n        }\n        const keyShift = Math.trunc(semitones);\n        const currentTranspose =\n            this.channelTransposeKeyShift +\n            this.customControllers[customControllers.channelTransposeFine] /\n                100;\n        if ((this.drumChannel && !force) || semitones === currentTranspose) {\n            return;\n        }\n        if (keyShift !== this.channelTransposeKeyShift) {\n            // Stop all\n            this.stopAllNotes();\n        }\n        // Apply transpose\n        this.channelTransposeKeyShift = keyShift;\n        this.setCustomController(\n            customControllers.channelTransposeFine,\n            (semitones - keyShift) * 100\n        );\n        this.sendChannelProperty();\n    }\n\n    /**\n     * Sets the octave tuning for a given channel.\n     * @param tuning The tuning array of 12 values, each representing the tuning for a note in the octave.\n     * @remarks\n     * Cent tunings are relative.\n     */\n    public setOctaveTuning(tuning: Int8Array) {\n        if (tuning.length !== 12) {\n            throw new Error(\"Tuning is not the length of 12.\");\n        }\n        this.channelOctaveTuning = new Int8Array(128);\n        for (let i = 0; i < 128; i++) {\n            this.channelOctaveTuning[i] = tuning[i % 12];\n        }\n    }\n\n    /**\n     * Sets the modulation depth for the channel.\n     * @param cents The modulation depth in cents to set.\n     * @remarks\n     * This method sets the modulation depth for the channel by converting the given cents value into a\n     * multiplier. The MIDI specification assumes the default modulation depth is 50 cents,\n     * but it may vary for different sound banks.\n     * For example, if you want a modulation depth of 100 cents,\n     * the multiplier will be 2,\n     * which, for a preset with a depth of 50,\n     * will create a total modulation depth of 100 cents.\n     *\n     */\n    public setModulationDepth(cents: number) {\n        cents = Math.round(cents);\n        SpessaSynthInfo(\n            `%cChannel ${this.channelNumber} modulation depth. Cents: %c${cents}`,\n            consoleColors.info,\n            consoleColors.value\n        );\n        this.setCustomController(\n            customControllers.modulationMultiplier,\n            cents / 50\n        );\n    }\n\n    /**\n     * Sets the channel's tuning.\n     * @param cents The tuning in cents to set.\n     * @param log If true, logs the change to the console.\n     */\n    public setTuning(cents: number, log = true) {\n        cents = Math.round(cents);\n        this.setCustomController(customControllers.channelTuning, cents);\n        if (!log) {\n            return;\n        }\n        SpessaSynthInfo(\n            `%cFine tuning for %c${this.channelNumber}%c is now set to %c${cents}%c cents.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.value,\n            consoleColors.info\n        );\n    }\n\n    /**\n     * Sets the pitch of the given channel.\n     * @param pitch The pitch (0 - 16384)\n     */\n    public pitchWheel(pitch: number) {\n        if (\n            this.lockedControllers[\n                NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel\n            ]\n        ) {\n            return;\n        }\n        this.synthProps.callEvent(\"pitchWheel\", {\n            channel: this.channelNumber,\n            pitch\n        });\n        this.midiControllers[\n            NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel\n        ] = pitch;\n        this.voices.forEach((v) =>\n            // Compute pitch modulators\n            this.computeModulators(v, 0, modulatorSources.pitchWheel)\n        );\n        this.sendChannelProperty();\n    }\n\n    /**\n     * Sets the channel pressure (MIDI Aftertouch).\n     * @param pressure the pressure of the channel.\n     */\n    public channelPressure(pressure: number) {\n        this.midiControllers[\n            NON_CC_INDEX_OFFSET + modulatorSources.channelPressure\n        ] = pressure << 7;\n        this.updateChannelTuning();\n        this.voices.forEach((v) =>\n            this.computeModulators(v, 0, modulatorSources.channelPressure)\n        );\n        this.synthProps.callEvent(\"channelPressure\", {\n            channel: this.channelNumber,\n            pressure: pressure\n        });\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Sets the pressure of the given note on a specific channel.\n     * This is used for polyphonic pressure (aftertouch).\n     * @param midiNote 0 - 127, the MIDI note number to set the pressure for.\n     * @param pressure 0 - 127, the pressure value to set for the note.\n     */\n    public polyPressure(midiNote: number, pressure: number) {\n        this.voices.forEach((v) => {\n            if (v.midiNote !== midiNote) {\n                return;\n            }\n            v.pressure = pressure;\n            this.computeModulators(v, 0, modulatorSources.polyPressure);\n        });\n        this.synthProps.callEvent(\"polyPressure\", {\n            channel: this.channelNumber,\n            midiNote: midiNote,\n            pressure: pressure\n        });\n    }\n\n    public setCustomController(type: CustomController, value: number) {\n        this.customControllers[type] = value;\n        this.updateChannelTuning();\n    }\n\n    public updateChannelTuning() {\n        this.channelTuningCents =\n            this.customControllers[customControllers.channelTuning] + // RPN channel fine tuning\n            this.customControllers[customControllers.channelTransposeFine] + // User tuning (transpose)\n            this.customControllers[customControllers.masterTuning] + // Master tuning, set by sysEx\n            this.customControllers[customControllers.channelTuningSemitones] *\n                100; // RPN channel coarse tuning\n    }\n\n    /**\n     * Renders Float32 audio for this channel.\n     * @param outputLeft the left output buffer.\n     * @param outputRight the right output buffer.\n     * @param reverbOutputLeft left output for reverb.\n     * @param reverbOutputRight right output for reverb.\n     * @param chorusOutputLeft left output for chorus.\n     * @param chorusOutputRight right output for chorus.\n     * @param startIndex start index offset.\n     * @param sampleCount sample count to render.\n     */\n    public renderAudio(\n        outputLeft: Float32Array,\n        outputRight: Float32Array,\n        reverbOutputLeft: Float32Array,\n        reverbOutputRight: Float32Array,\n        chorusOutputLeft: Float32Array,\n        chorusOutputRight: Float32Array,\n        startIndex: number,\n        sampleCount: number\n    ) {\n        this.voices = this.voices.filter(\n            (v) =>\n                !this.renderVoice(\n                    v,\n                    this.synth.currentSynthTime,\n                    outputLeft,\n                    outputRight,\n                    reverbOutputLeft,\n                    reverbOutputRight,\n                    chorusOutputLeft,\n                    chorusOutputRight,\n                    startIndex,\n                    sampleCount\n                )\n        );\n    }\n\n    /**\n     * Locks or unlocks the preset from MIDI program changes.\n     * @param locked If the preset should be locked.\n     */\n    public setPresetLock(locked: boolean) {\n        if (this.lockPreset === locked) {\n            return;\n        }\n        this.lockPreset = locked;\n        if (locked) {\n            this.lockedSystem = this.synthProps.masterParameters.midiSystem;\n        }\n    }\n\n    /**\n     * Changes the preset to, or from drums.\n     * Note that this executes a program change.\n     * @param isDrum If the channel should be a drum preset or not.\n     */\n    public setDrums(isDrum: boolean) {\n        if (BankSelectHacks.isSystemXG(this.channelSystem)) {\n            if (isDrum) {\n                this.setBankMSB(\n                    BankSelectHacks.getDrumBank(this.channelSystem)\n                );\n                this.setBankLSB(0);\n            } else {\n                if (this.channelNumber % 16 === DEFAULT_PERCUSSION) {\n                    throw new Error(\n                        `Cannot disable drums on channel ${this.channelNumber} for XG.`\n                    );\n                }\n                this.setBankMSB(0);\n                this.setBankLSB(0);\n            }\n        } else {\n            this.setGSDrums(isDrum);\n        }\n        this.setDrumFlag(isDrum);\n        this.programChange(this.patch.program);\n    }\n\n    /**\n     * Sets the channel to a given MIDI patch.\n     * Note that this executes a program change.\n     * @param patch The MIDI patch to set the channel to.\n     */\n    public setPatch(patch: MIDIPatch) {\n        this.setBankMSB(patch.bankMSB);\n        this.setBankLSB(patch.bankLSB);\n        this.setGSDrums(patch.isGMGSDrum);\n        this.programChange(patch.program);\n    }\n\n    /**\n     * Sets the GM/GS drum flag.\n     * @param drums\n     */\n    public setGSDrums(drums: boolean) {\n        if (drums === this.patch.isGMGSDrum) {\n            return;\n        }\n        this.setBankLSB(0);\n        this.setBankMSB(0);\n        this.patch.isGMGSDrum = drums;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Sets a custom vibrato.\n     * @param depth In cents.\n     * @param rate In Hertz.\n     * @param delay seconds.\n     */\n    public setVibrato(depth: number, rate: number, delay: number) {\n        if (this.lockGSNRPNParams) {\n            return;\n        }\n        this.channelVibrato.rate = rate;\n        this.channelVibrato.delay = delay;\n        this.channelVibrato.depth = depth;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Disables and locks all GS NPRN parameters, including the custom vibrato.\n     */\n    public disableAndLockGSNRPN() {\n        this.lockGSNRPNParams = true;\n        this.channelVibrato.rate = 0;\n        this.channelVibrato.delay = 0;\n        this.channelVibrato.depth = 0;\n    }\n\n    public resetGeneratorOverrides() {\n        this.generatorOverrides.fill(GENERATOR_OVERRIDE_NO_CHANGE_VALUE);\n        this.generatorOverridesEnabled = false;\n    }\n\n    public setGeneratorOverride(\n        gen: GeneratorType,\n        value: number,\n        realtime = false\n    ) {\n        this.generatorOverrides[gen] = value;\n        this.generatorOverridesEnabled = true;\n        if (realtime) {\n            this.voices.forEach((v) => {\n                v.generators[gen] = value;\n                this.computeModulators(v);\n            });\n        }\n    }\n\n    public resetGeneratorOffsets() {\n        this.generatorOffsets.fill(0);\n        this.generatorOffsetsEnabled = false;\n    }\n\n    public setGeneratorOffset(gen: GeneratorType, value: number) {\n        this.generatorOffsets[gen] = value * generatorLimits[gen].nrpn;\n        this.generatorOffsetsEnabled = true;\n        this.voices.forEach((v) => {\n            this.computeModulators(v);\n        });\n    }\n\n    /**\n     * Stops a note nearly instantly.\n     * @param midiNote The note to stop.\n     * @param releaseTime in timecents, defaults to -12000 (very short release).\n     */\n    public killNote(midiNote: number, releaseTime = -12000) {\n        // Adjust midiNote by channel key shift\n        midiNote += this.customControllers[customControllers.channelKeyShift];\n\n        this.voices.forEach((v) => {\n            if (v.realKey !== midiNote) {\n                return;\n            }\n            v.modulatedGenerators[generatorTypes.releaseVolEnv] = releaseTime; // Set release to be very short\n            v.release(this.synth.currentSynthTime);\n        });\n    }\n\n    /**\n     * Stops all notes on the channel.\n     * @param force If true, stops all notes immediately, otherwise applies release time.\n     */\n    public stopAllNotes(force = false) {\n        if (force) {\n            // Force stop all\n            this.voices.length = 0;\n            this.sustainedVoices.length = 0;\n            this.sendChannelProperty();\n        } else {\n            this.voices.forEach((v) => {\n                if (v.isInRelease) {\n                    return;\n                }\n                v.release(this.synth.currentSynthTime);\n            });\n            this.sustainedVoices.forEach((v) => {\n                v.release(this.synth.currentSynthTime);\n            });\n        }\n        this.synthProps.callEvent(\"stopAll\", {\n            channel: this.channelNumber,\n            force\n        });\n    }\n\n    /**\n     * Mutes or unmutes a channel.\n     * @param isMuted If the channel should be muted.\n     */\n    public muteChannel(isMuted: boolean) {\n        if (isMuted) {\n            this.stopAllNotes(true);\n        }\n        this._isMuted = isMuted;\n        this.sendChannelProperty();\n        this.synthProps.callEvent(\"muteChannel\", {\n            channel: this.channelNumber,\n            isMuted: isMuted\n        });\n    }\n\n    /**\n     * Sends this channel's property\n     */\n    public sendChannelProperty() {\n        if (!this.synth.enableEventSystem) {\n            return;\n        }\n        const data: ChannelProperty = {\n            voicesAmount: this.voices.length,\n            pitchWheel:\n                this.midiControllers[\n                    NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel\n                ],\n            pitchWheelRange:\n                this.midiControllers[\n                    NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange\n                ] / 128,\n            isMuted: this.isMuted,\n            transposition:\n                this.channelTransposeKeyShift +\n                this.customControllers[customControllers.channelTransposeFine] /\n                    100,\n            isDrum: this.drumChannel\n        };\n        this.synthProps.callEvent(\"channelPropertyChange\", {\n            channel: this.channelNumber,\n            property: data\n        });\n    }\n\n    protected setBankMSB(bankMSB: number) {\n        if (this.lockPreset) {\n            return;\n        }\n        this.patch.bankMSB = bankMSB;\n    }\n\n    protected setBankLSB(bankLSB: number) {\n        if (this.lockPreset) {\n            return;\n        }\n        this.patch.bankLSB = bankLSB;\n    }\n\n    /**\n     * Sets drums on channel.\n     */\n    protected setDrumFlag(isDrum: boolean) {\n        if (this.lockPreset || !this.preset) {\n            return;\n        }\n        if (this.drumChannel === isDrum) {\n            return;\n        }\n        if (isDrum) {\n            // Clear transpose\n            this.channelTransposeKeyShift = 0;\n            this.drumChannel = true;\n        } else {\n            this.drumChannel = false;\n        }\n        this.synthProps.callEvent(\"drumChange\", {\n            channel: this.channelNumber,\n            isDrumChannel: this.drumChannel\n        });\n    }\n}\n", "import { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport { writeBinaryStringIndexed } from \"../../../utils/byte_functions/string\";\nimport { writeLittleEndianIndexed } from \"../../../utils/byte_functions/little_endian\";\nimport { SpessaSynthInfo } from \"../../../utils/loggin\";\nimport { consoleColors } from \"../../../utils/other\";\nimport type { BasicSoundBank } from \"../../basic_soundbank/basic_soundbank\";\nimport type { ProgressFunction, SampleEncodingFunction } from \"../../types\";\n\n/*\nSdta structure:\n\nLIST chunk\n- \"sdta\" ASCII string\n- smpl chunk\n- - raw data\n */\n\n// In bytes, from the start of sdta-LIST to the first actual sample\nconst SDTA_TO_DATA_OFFSET =\n    4 + // \"LIST\"\n    4 + // Sdta size\n    4 + // \"sdta\"\n    4 + // \"smpl\"\n    4; // Smpl size\n\nexport async function getSDTA(\n    bank: BasicSoundBank,\n    smplStartOffsets: number[],\n    smplEndOffsets: number[],\n    compress: boolean,\n    decompress: boolean,\n    vorbisFunc?: SampleEncodingFunction,\n    progressFunc?: ProgressFunction\n): Promise<Uint8Array> {\n    // Write smpl: write int16 data of each sample linearly\n    // Get size (calling getAudioData twice doesn't matter since it gets cached)\n    let writtenCount = 0;\n    let smplChunkSize = 0;\n    const sampleDatas: Uint8Array[] = [];\n\n    // Linear async is faster here as the writing function usually uses a single wasm instance\n    for (const s of bank.samples) {\n        if (compress && vorbisFunc) {\n            await s.compressSample(vorbisFunc);\n        }\n        if (decompress) {\n            s.setAudioData(s.getAudioData(), s.sampleRate);\n        }\n\n        // Raw data: either copy s16le or encoded vorbis or encode manually if overridden\n        // Use set timeout so the thread doesn't die\n        const r = s.getRawData(true);\n        writtenCount++;\n        await progressFunc?.(s.name, writtenCount, bank.samples.length);\n\n        SpessaSynthInfo(\n            `%cEncoded sample %c${writtenCount}. ${s.name}%c of %c${bank.samples.length}%c. Compressed: %c${s.isCompressed}%c.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            s.isCompressed\n                ? consoleColors.recognized\n                : consoleColors.unrecognized,\n            consoleColors.info\n        );\n\n        /* 6.1 Sample Data Format in the smpl Sub-chunk\n        Each sample is followed by a minimum of forty-six zero\n        valued sample data points. These zero valued data points are necessary to guarantee that any reasonable upward pitch shift\n        using any reasonable interpolator can loop on zero data at the end of the sound.\n        This doesn't apply to sf3 tho\n         */\n        smplChunkSize += r.length + (s.isCompressed ? 0 : 92);\n        sampleDatas.push(r);\n    }\n\n    if (smplChunkSize % 2 !== 0) {\n        smplChunkSize++;\n    }\n\n    const sdta = new IndexedByteArray(smplChunkSize + SDTA_TO_DATA_OFFSET);\n\n    // Avoid using writeRIFFChunk for performance\n    // Sdta chunk\n    writeBinaryStringIndexed(sdta, \"LIST\");\n    // \"sdta\" + full smpl length\n    writeLittleEndianIndexed(sdta, smplChunkSize + SDTA_TO_DATA_OFFSET - 8, 4);\n    writeBinaryStringIndexed(sdta, \"sdta\");\n    writeBinaryStringIndexed(sdta, \"smpl\");\n    writeLittleEndianIndexed(sdta, smplChunkSize, 4);\n\n    let offset = 0;\n    // Write out\n    bank.samples.forEach((sample, i) => {\n        const data = sampleDatas[i];\n        sdta.set(data, offset + SDTA_TO_DATA_OFFSET);\n        let startOffset;\n        let endOffset;\n        if (sample.isCompressed) {\n            // Sf3 offset is in bytes\n            startOffset = offset;\n            endOffset = startOffset + data.length;\n        } else {\n            // Sf2 in sample data points\n            startOffset = offset / 2; // Inclusive\n            endOffset = startOffset + data.length / 2; // Exclusive\n            offset += 92; // 46 sample data points\n        }\n        offset += data.length;\n        smplStartOffsets.push(startOffset);\n\n        smplEndOffsets.push(endOffset);\n    });\n\n    return sdta;\n}\n", "import { SpessaSynthWarn } from \"../../utils/loggin\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_wrapper\";\nimport { type SampleType, sampleTypes } from \"../enums\";\nimport type { BasicInstrument } from \"./basic_instrument\";\nimport type { SampleEncodingFunction } from \"../types\";\n\n// Should be reasonable for most cases\nconst RESAMPLE_RATE = 48000;\n\nexport class BasicSample {\n    /**\n     * The sample's name.\n     */\n    public name: string;\n\n    /**\n     * Sample rate in Hz.\n     */\n    public sampleRate: number;\n\n    /**\n     * Original pitch of the sample as a MIDI note number.\n     */\n    public originalKey: number;\n\n    /**\n     * Pitch correction, in cents. Can be negative.\n     */\n    public pitchCorrection: number;\n\n    /**\n     * Linked sample, unused if mono.\n     */\n    public linkedSample?: BasicSample;\n\n    /**\n     * The type of the sample.\n     */\n    public sampleType: SampleType;\n\n    /**\n     * Relative to the start of the sample in sample points.\n     */\n    public loopStart: number;\n\n    /**\n     * Relative to the start of the sample in sample points.\n     */\n    public loopEnd: number;\n    /**\n     * Sample's linked instruments (the instruments that use it)\n     * note that duplicates are allowed since one instrument can use the same sample multiple times.\n     */\n    public linkedTo: BasicInstrument[] = [];\n    /**\n     * Indicates if the data was overridden, so it cannot be copied back unchanged.\n     */\n    protected dataOverridden = true;\n    /**\n     * The compressed sample data if the sample has been compressed.\n     */\n    protected compressedData?: Uint8Array;\n    /**\n     * The sample's audio data.\n     */\n    protected audioData?: Float32Array;\n\n    /**\n     * The basic representation of a sample\n     * @param sampleName The sample's name\n     * @param sampleRate The sample's rate in Hz\n     * @param originalKey The sample's pitch as a MIDI note number\n     * @param pitchCorrection The sample's pitch correction in cents\n     * @param sampleType The sample's type, an enum that can indicate SF3\n     * @param loopStart The sample's loop start relative to the sample start in sample points\n     * @param loopEnd The sample's loop end relative to the sample start in sample points\n     */\n    public constructor(\n        sampleName: string,\n        sampleRate: number,\n        originalKey: number,\n        pitchCorrection: number,\n        sampleType: SampleType,\n        loopStart: number,\n        loopEnd: number\n    ) {\n        this.name = sampleName;\n        this.sampleRate = sampleRate;\n        this.originalKey = originalKey;\n        this.pitchCorrection = pitchCorrection;\n        this.loopStart = loopStart;\n        this.loopEnd = loopEnd;\n        this.sampleType = sampleType;\n    }\n\n    /**\n     * Indicates if the sample is compressed using vorbis SF3.\n     */\n    public get isCompressed(): boolean {\n        return this.compressedData !== undefined;\n    }\n\n    /**\n     * If the sample is linked to another sample.\n     */\n    public get isLinked(): boolean {\n        return (\n            this.sampleType === sampleTypes.rightSample ||\n            this.sampleType === sampleTypes.leftSample ||\n            this.sampleType === sampleTypes.linkedSample\n        );\n    }\n\n    /**\n     * The sample's use count\n     */\n    public get useCount() {\n        return this.linkedTo.length;\n    }\n\n    /**\n     * Get raw data for writing the file, either a compressed bit stream or signed 16-bit little endian PCM data.\n     * @param allowVorbis if vorbis file data is allowed.\n     * @return either s16le or vorbis data.\n     */\n    public getRawData(allowVorbis: boolean): Uint8Array {\n        if (this.compressedData && allowVorbis && !this.dataOverridden) {\n            return this.compressedData;\n        }\n        return this.encodeS16LE();\n    }\n\n    /**\n     * Resamples the audio data to a given sample rate.\n     */\n    public resampleData(newSampleRate: number) {\n        let audioData = this.getAudioData();\n        const ratio = newSampleRate / this.sampleRate;\n        const resampled = new Float32Array(\n            Math.floor(audioData.length * ratio)\n        );\n        for (let i = 0; i < resampled.length; i++) {\n            resampled[i] = audioData[Math.floor(i * (1 / ratio))];\n        }\n        audioData = resampled;\n        this.sampleRate = newSampleRate;\n        // Adjust loop points\n        this.loopStart = Math.floor(this.loopStart * ratio);\n        this.loopEnd = Math.floor(this.loopEnd * ratio);\n        this.audioData = audioData;\n    }\n\n    /**\n     * Compresses the audio data\n     * @param encodeVorbis the compression function to use when compressing\n     */\n    public async compressSample(encodeVorbis: SampleEncodingFunction) {\n        // No need to compress\n        if (this.isCompressed) {\n            return;\n        }\n        // Compress, always mono!\n        try {\n            // If the sample rate is too low or too high, resample\n            let audioData = this.getAudioData();\n            if (this.sampleRate < 8000 || this.sampleRate > 96000) {\n                this.resampleData(RESAMPLE_RATE);\n                audioData = this.getAudioData();\n            }\n            const compressed = await encodeVorbis(audioData, this.sampleRate);\n            this.setCompressedData(compressed);\n        } catch (e) {\n            SpessaSynthWarn(\n                `Failed to compress ${this.name}. Leaving as uncompressed!`,\n                e\n            );\n            this.compressedData = undefined;\n        }\n    }\n\n    /**\n     * Sets the sample type and unlinks if needed.\n     * @param type The type to set it to.\n     */\n    public setSampleType(type: SampleType) {\n        this.sampleType = type;\n        if (!this.isLinked) {\n            // Unlink the other sample\n            if (this.linkedSample) {\n                this.linkedSample.linkedSample = undefined;\n                this.linkedSample.sampleType = type;\n            }\n\n            this.linkedSample = undefined;\n        }\n        if ((type & 0x8000) > 0) {\n            throw new Error(\"ROM samples are not supported.\");\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Unlinks the sample from its stereo link if it has any.\n     */\n    public unlinkSample() {\n        this.setSampleType(sampleTypes.monoSample);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Links a stereo sample.\n     * @param sample the sample to link to.\n     * @param type either left, right or linked.\n     */\n    public setLinkedSample(sample: BasicSample, type: SampleType) {\n        // Sanity check\n        if (sample.linkedSample) {\n            throw new Error(\n                `${sample.name} is linked tp ${sample.linkedSample.name}. Unlink it first.`\n            );\n        }\n        this.linkedSample = sample;\n        sample.linkedSample = this;\n        if (type === sampleTypes.leftSample) {\n            this.setSampleType(sampleTypes.leftSample);\n            sample.setSampleType(sampleTypes.rightSample);\n        } else if (type === sampleTypes.rightSample) {\n            this.setSampleType(sampleTypes.rightSample);\n            sample.setSampleType(sampleTypes.leftSample);\n        } else if (type === sampleTypes.linkedSample) {\n            this.setSampleType(sampleTypes.linkedSample);\n            sample.setSampleType(sampleTypes.linkedSample);\n        } else {\n            throw new Error(\"Invalid sample type: \" + type);\n        }\n    }\n\n    /**\n     * Links the sample to a given instrument\n     * @param instrument the instrument to link to\n     */\n    public linkTo(instrument: BasicInstrument) {\n        this.linkedTo.push(instrument);\n    }\n\n    /**\n     * Unlinks the sample from a given instrument\n     * @param instrument the instrument to unlink from\n     */\n    public unlinkFrom(instrument: BasicInstrument) {\n        const index = this.linkedTo.indexOf(instrument);\n        if (index < 0) {\n            SpessaSynthWarn(\n                `Cannot unlink ${instrument.name} from ${this.name}: not linked.`\n            );\n            return;\n        }\n        this.linkedTo.splice(index, 1);\n    }\n\n    /**\n     * Get the float32 audio data.\n     * Note that this either decodes the compressed data or passes the ready sampleData.\n     * If neither are set then it will throw an error!\n     * @returns the audio data\n     */\n    public getAudioData(): Float32Array {\n        if (this.audioData) {\n            return this.audioData;\n        }\n        if (this.isCompressed) {\n            // SF3\n            // If compressed, decode\n            this.audioData = this.decodeVorbis();\n            return this.audioData;\n        }\n        throw new Error(\"Sample data is undefined for a BasicSample instance.\");\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Replaces the audio data *in-place*.\n     * @param audioData The new audio data as Float32.\n     * @param sampleRate The new sample rate, in Hertz.\n     */\n    public setAudioData(audioData: Float32Array, sampleRate: number) {\n        this.audioData = audioData;\n        this.sampleRate = sampleRate;\n        this.dataOverridden = true;\n        this.compressedData = undefined;\n    }\n\n    /**\n     * Replaces the audio with a compressed data sample and flags the sample as compressed\n     * @param data the new compressed data\n     */\n    public setCompressedData(data: Uint8Array) {\n        this.audioData = undefined;\n        this.compressedData = data;\n        this.dataOverridden = false;\n    }\n\n    /**\n     * Encodes s16le sample\n     * @return the encoded data\n     */\n    protected encodeS16LE(): IndexedByteArray {\n        const data = this.getAudioData();\n        const data16 = new Int16Array(data.length);\n        const len = data.length;\n        for (let i = 0; i < len; i++) {\n            let sample = data[i] * 32768;\n            // Clamp for safety (do not use Math.max/Math.min here)\n            if (sample > 32767) {\n                sample = 32767;\n            } else if (sample < -32768) {\n                sample = -32768;\n            }\n            data16[i] = sample;\n        }\n        return new IndexedByteArray(data16.buffer);\n    }\n\n    /**\n     * Decode binary vorbis into a float32 pcm\n     */\n    protected decodeVorbis(): Float32Array {\n        if (this.audioData) {\n            return this.audioData;\n        }\n        if (!this.compressedData) {\n            throw new Error(\"Compressed data is missing.\");\n        }\n        try {\n            const vorbis = stbvorbis.decode(this.compressedData);\n            const decoded = vorbis.data[0];\n            if (decoded === undefined) {\n                SpessaSynthWarn(\n                    `Error decoding sample ${this.name}: Vorbis decode returned undefined.`\n                );\n                return new Float32Array(0);\n            }\n            // Clip\n            // Because vorbis can go above 1 sometimes\n            for (let i = 0; i < decoded.length; i++) {\n                // Magic number is 32,767 / 32,768\n                decoded[i] = Math.max(\n                    -1,\n                    Math.min(decoded[i], 0.999969482421875)\n                );\n            }\n            return decoded;\n        } catch (e) {\n            // Do not error out, fill with silence\n            SpessaSynthWarn(\n                `Error decoding sample ${this.name}: ${e as Error}`\n            );\n            return new Float32Array(this.loopEnd + 1);\n        }\n    }\n}\n\nexport class EmptySample extends BasicSample {\n    /**\n     * A simplified class for creating samples.\n     */\n    public constructor() {\n        super(\"\", 44100, 60, 0, sampleTypes.monoSample, 0, 0);\n    }\n}\n", "import { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport { readLittleEndianIndexed, signedInt8 } from \"../../../utils/byte_functions/little_endian\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../../utils/loggin\";\nimport { readBinaryStringIndexed } from \"../../../utils/byte_functions/string\";\nimport { BasicSample } from \"../../basic_soundbank/basic_sample\";\nimport { consoleColors } from \"../../../utils/other\";\nimport type { SampleType } from \"../../enums\";\nimport type { RIFFChunk } from \"../../../utils/riff_chunk\";\n\n/**\n * Samples.ts\n * purpose: parses soundfont samples\n */\n\nexport const SF3_BIT_FLIT = 0x10;\n\nexport class SoundFontSample extends BasicSample {\n    /**\n     * Linked sample index for retrieving linked samples in sf2\n     */\n    public linkedSampleIndex: number;\n\n    /**\n     * The sliced sample from the smpl chunk.\n     */\n    protected s16leData?: Uint8Array;\n\n    protected startByteOffset: number;\n\n    protected endByteOffset: number;\n\n    protected sampleID: number;\n\n    /**\n     * Creates a sample\n     * @param sampleName\n     * @param sampleStartIndex\n     * @param sampleEndIndex\n     * @param sampleLoopStartIndex\n     * @param sampleLoopEndIndex\n     * @param sampleRate\n     * @param samplePitch\n     * @param samplePitchCorrection\n     * @param linkedSampleIndex\n     * @param sampleType\n     * @param sampleDataArray\n     * @param sampleIndex initial sample index when loading the sfont\n     * Used for SF2Pack support\n     */\n    public constructor(\n        sampleName: string,\n        sampleStartIndex: number,\n        sampleEndIndex: number,\n        sampleLoopStartIndex: number,\n        sampleLoopEndIndex: number,\n        sampleRate: number,\n        samplePitch: number,\n        samplePitchCorrection: number,\n        linkedSampleIndex: number,\n        sampleType: SampleType,\n        sampleDataArray: IndexedByteArray | Float32Array,\n        sampleIndex: number\n    ) {\n        // Read sf3\n        // https://github.com/FluidSynth/fluidsynth/wiki/SoundFont3Format\n        const compressed = (sampleType & SF3_BIT_FLIT) > 0;\n        // Remove the compression flag\n        sampleType &= ~SF3_BIT_FLIT;\n        super(\n            sampleName,\n            sampleRate,\n            samplePitch,\n            samplePitchCorrection,\n            sampleType as SampleType,\n            sampleLoopStartIndex - sampleStartIndex / 2,\n            sampleLoopEndIndex - sampleStartIndex / 2\n        );\n        this.dataOverridden = false;\n        this.name = sampleName;\n        // In bytes\n        this.startByteOffset = sampleStartIndex;\n        this.endByteOffset = sampleEndIndex;\n        this.sampleID = sampleIndex;\n        const smplStart =\n            sampleDataArray instanceof IndexedByteArray\n                ? sampleDataArray.currentIndex\n                : 0;\n\n        // Three data types in:\n        // SF2 (s16le)\n        // SF3 (vorbis)\n        // SF2Pack (entire smpl vorbis)\n        if (sampleDataArray instanceof IndexedByteArray) {\n            if (compressed) {\n                // Correct loop points\n                this.loopStart += this.startByteOffset / 2;\n                this.loopEnd += this.startByteOffset / 2;\n\n                // Copy the compressed data, it can be preserved during writing\n                this.setCompressedData(\n                    sampleDataArray.slice(\n                        this.startByteOffset / 2 + smplStart,\n                        this.endByteOffset / 2 + smplStart\n                    )\n                );\n            } else {\n                // Regular sf2 s16le\n                this.s16leData = sampleDataArray.slice(\n                    smplStart + this.startByteOffset,\n                    smplStart + this.endByteOffset\n                );\n            }\n        } else {\n            // Float32 array from SF2pack, copy directly\n            this.setAudioData(\n                sampleDataArray.slice(\n                    this.startByteOffset / 2,\n                    this.endByteOffset / 2\n                ),\n                sampleRate\n            );\n        }\n        this.linkedSampleIndex = linkedSampleIndex;\n    }\n\n    public getLinkedSample(samplesArray: BasicSample[]) {\n        if (this.linkedSample || !this.isLinked) {\n            return;\n        }\n        const linked = samplesArray[this.linkedSampleIndex];\n        if (!linked) {\n            // Log as info because it's common and not really dangerous\n            SpessaSynthInfo(\n                `%cInvalid linked sample for ${this.name}. Setting to mono.`,\n                consoleColors.warn\n            );\n            this.unlinkSample();\n        } else {\n            // Check for corrupted files (like FluidR3_GM.sf2 that link EVERYTHING to a single sample)\n            if (linked.linkedSample) {\n                SpessaSynthInfo(\n                    `%cInvalid linked sample for ${this.name}: ${linked.name} is already linked to ${linked.linkedSample.name}`,\n                    consoleColors.warn\n                );\n                this.unlinkSample();\n            } else {\n                this.setLinkedSample(linked, this.sampleType);\n            }\n        }\n    }\n\n    /**\n     * Loads the audio data and stores it for reuse\n     * @returns  The audio data\n     */\n    public getAudioData(): Float32Array {\n        if (this.audioData) {\n            return this.audioData;\n        }\n        // SF2Pack is decoded during load time\n        // SF3 is decoded in BasicSample\n        if (this.isCompressed) {\n            return super.getAudioData();\n        }\n        if (!this.s16leData) {\n            console.error(this);\n            throw new Error(\"Unexpected lack of audio data.\");\n        }\n\n        // Start loading data if it is not loaded\n        const byteLength = this.endByteOffset - this.startByteOffset;\n        if (byteLength < 1) {\n            SpessaSynthWarn(\n                `Invalid sample ${this.name}! Invalid length: ${byteLength}`\n            );\n            return new Float32Array(1);\n        }\n\n        // SF2\n        // Read the sample data\n        const audioData = new Float32Array(byteLength / 2);\n        const convertedSigned16 = new Int16Array(this.s16leData.buffer);\n\n        // Convert to float\n        for (let i = 0; i < convertedSigned16.length; i++) {\n            audioData[i] = convertedSigned16[i] / 32768;\n        }\n\n        this.audioData = audioData;\n        return audioData;\n    }\n\n    public getRawData(allowVorbis: boolean): Uint8Array {\n        if (this.dataOverridden || this.compressedData) {\n            // Return vorbis or encode manually\n            return super.getRawData(allowVorbis);\n        }\n        // Copy the smpl directly\n        return this.s16leData ?? new Uint8Array(0);\n    }\n}\n\n/**\n * Reads the samples from the shdr chunk\n */\nexport function readSamples(\n    sampleHeadersChunk: RIFFChunk,\n    smplChunkData: IndexedByteArray | Float32Array,\n    linkSamples = true\n): SoundFontSample[] {\n    const samples: SoundFontSample[] = [];\n    let index = 0;\n    while (\n        sampleHeadersChunk.data.length > sampleHeadersChunk.data.currentIndex\n    ) {\n        const sample = readSample(\n            index,\n            sampleHeadersChunk.data,\n            smplChunkData\n        );\n        samples.push(sample);\n        index++;\n    }\n    // Remove EOS\n    samples.pop();\n\n    // Link samples\n    if (linkSamples) {\n        samples.forEach((s) => s.getLinkedSample(samples));\n    }\n\n    return samples;\n}\n\n/**\n * Reads it into a sample\n */\nfunction readSample(\n    index: number,\n    sampleHeaderData: IndexedByteArray,\n    smplArrayData: IndexedByteArray | Float32Array\n): SoundFontSample {\n    // Read the sample name\n    const sampleName = readBinaryStringIndexed(sampleHeaderData, 20);\n\n    // Read the sample start index\n    const sampleStartIndex = readLittleEndianIndexed(sampleHeaderData, 4) * 2;\n\n    // Read the sample end index\n    const sampleEndIndex = readLittleEndianIndexed(sampleHeaderData, 4) * 2;\n\n    // Read the sample looping start index\n    const sampleLoopStartIndex = readLittleEndianIndexed(sampleHeaderData, 4);\n\n    // Read the sample looping end index\n    const sampleLoopEndIndex = readLittleEndianIndexed(sampleHeaderData, 4);\n\n    // Read the sample rate\n    const sampleRate = readLittleEndianIndexed(sampleHeaderData, 4);\n\n    // Read the original sample pitch\n    let samplePitch = sampleHeaderData[sampleHeaderData.currentIndex++];\n    if (samplePitch > 127) {\n        // If it's out of range, then default to 60\n        samplePitch = 60;\n    }\n\n    // Read the sample pitch correction\n    const samplePitchCorrection = signedInt8(\n        sampleHeaderData[sampleHeaderData.currentIndex++]\n    );\n\n    // Read the link to the other channel\n    const sampleLink = readLittleEndianIndexed(sampleHeaderData, 2);\n    const sampleType = readLittleEndianIndexed(\n        sampleHeaderData,\n        2\n    ) as SampleType;\n\n    return new SoundFontSample(\n        sampleName,\n        sampleStartIndex,\n        sampleEndIndex,\n        sampleLoopStartIndex,\n        sampleLoopEndIndex,\n        sampleRate,\n        samplePitch,\n        samplePitchCorrection,\n        sampleLink,\n        sampleType,\n        smplArrayData,\n        index\n    );\n}\n", "import { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport { writeBinaryStringIndexed } from \"../../../utils/byte_functions/string\";\nimport {\n    writeDword,\n    writeWord\n} from \"../../../utils/byte_functions/little_endian\";\nimport { writeRIFFChunkRaw } from \"../../../utils/riff_chunk\";\nimport { SF3_BIT_FLIT } from \"../read/samples\";\nimport type { BasicSoundBank } from \"../../basic_soundbank/basic_soundbank\";\n\nimport type { ExtendedSF2Chunks } from \"./types\";\n\nexport function getSHDR(\n    bank: BasicSoundBank,\n    smplStartOffsets: number[],\n    smplEndOffsets: number[]\n): ExtendedSF2Chunks {\n    const sampleLength = 46;\n    const shdrSize = sampleLength * (bank.samples.length + 1); // +1 because EOP\n    const shdrData = new IndexedByteArray(shdrSize);\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xshdrData = new IndexedByteArray(shdrSize);\n    let maxSampleLink = 0;\n    bank.samples.forEach((sample, index) => {\n        // Sample name\n        writeBinaryStringIndexed(shdrData, sample.name.substring(0, 20), 20);\n        writeBinaryStringIndexed(xshdrData, sample.name.substring(20), 20);\n        // Start offset\n        const dwStart = smplStartOffsets[index];\n        writeDword(shdrData, dwStart);\n        xshdrData.currentIndex += 4;\n        // End offset\n        const dwEnd = smplEndOffsets[index];\n        writeDword(shdrData, dwEnd);\n        xshdrData.currentIndex += 4;\n        // Loop is stored as relative in sample points, change it to absolute sample points here\n        let loopStart = sample.loopStart + dwStart;\n        let loopEnd = sample.loopEnd + dwStart;\n        if (sample.isCompressed) {\n            // https://github.com/FluidSynth/fluidsynth/wiki/SoundFont3Format\n            loopStart -= dwStart;\n            loopEnd -= dwStart;\n        }\n        writeDword(shdrData, loopStart);\n        writeDword(shdrData, loopEnd);\n        // Sample rate\n        writeDword(shdrData, sample.sampleRate);\n        // Pitch and correction\n        shdrData[shdrData.currentIndex++] = sample.originalKey;\n        shdrData[shdrData.currentIndex++] = sample.pitchCorrection;\n        // Skip all those for xshdr\n        xshdrData.currentIndex += 14;\n        // Sample link\n        const sampleLinkIndex = sample.linkedSample\n            ? bank.samples.indexOf(sample.linkedSample)\n            : 0;\n        writeWord(shdrData, Math.max(0, sampleLinkIndex) & 0xffff);\n        writeWord(xshdrData, Math.max(0, sampleLinkIndex) >> 16);\n        maxSampleLink = Math.max(maxSampleLink, sampleLinkIndex);\n        // Sample type: add byte if compressed\n        let type = sample.sampleType;\n        if (sample.isCompressed) {\n            type |= SF3_BIT_FLIT;\n        }\n        writeWord(shdrData, type);\n        xshdrData.currentIndex += 2;\n    });\n\n    // Write EOS and zero everything else\n    writeBinaryStringIndexed(shdrData, \"EOS\", sampleLength);\n    writeBinaryStringIndexed(xshdrData, \"EOS\", sampleLength);\n    const shdr = writeRIFFChunkRaw(\"shdr\", shdrData);\n    const xshdr = writeRIFFChunkRaw(\"shdr\", xshdrData);\n    return {\n        pdta: shdr,\n        xdta: xshdr\n    };\n}\n", "import type { BasicSoundBank } from \"../../basic_soundbank/basic_soundbank\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport { GEN_BYTE_SIZE, Generator } from \"../../basic_soundbank/generator\";\nimport {\n    DecodedModulator,\n    MOD_BYTE_SIZE,\n    Modulator\n} from \"../../basic_soundbank/modulator\";\nimport { BAG_BYTE_SIZE, BasicZone } from \"../../basic_soundbank/basic_zone\";\nimport type { ExtendedSF2Chunks } from \"./types\";\nimport { INST_BYTE_SIZE } from \"../../basic_soundbank/basic_instrument\";\nimport { PHDR_BYTE_SIZE } from \"../../basic_soundbank/basic_preset\";\nimport { writeRIFFChunkRaw } from \"../../../utils/riff_chunk\";\nimport { writeBinaryStringIndexed } from \"../../../utils/byte_functions/string\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian\";\n\nexport function writeSF2Elements(\n    bank: BasicSoundBank,\n    isPreset = false\n): {\n    gen: ExtendedSF2Chunks;\n    mod: ExtendedSF2Chunks;\n    bag: ExtendedSF2Chunks;\n    hdr: ExtendedSF2Chunks;\n    writeXdta: boolean;\n} {\n    // Note:\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    // Get headers\n    const elements = isPreset ? bank.presets : bank.instruments;\n    const genHeader = isPreset ? \"pgen\" : \"igen\";\n    const modHeader = isPreset ? \"pmod\" : \"imod\";\n    const bagHeader = isPreset ? \"pbag\" : \"ibag\";\n    const hdrHeader = isPreset ? \"phdr\" : \"inst\";\n    const hdrByteSize = isPreset ? PHDR_BYTE_SIZE : INST_BYTE_SIZE;\n\n    // Get indexes\n    let currentGenIndex = 0;\n    const generatorIndexes = new Array<number>();\n    let currentModIndex = 0;\n    const modulatorIndexes = new Array<number>();\n    const generators = new Array<Generator>();\n    const modulators = new Array<Modulator>();\n    let zoneIndex = 0;\n    const zoneIndexes = new Array<number>();\n\n    const writeZone = (z: BasicZone) => {\n        generatorIndexes.push(currentGenIndex);\n        const gens = z.getWriteGenerators(bank);\n        currentGenIndex += gens.length;\n        generators.push(...gens);\n\n        modulatorIndexes.push(currentModIndex);\n        const mods = z.modulators;\n        currentModIndex += mods.length;\n        modulators.push(...mods);\n    };\n\n    elements.forEach((el) => {\n        zoneIndexes.push(zoneIndex);\n        writeZone(el.globalZone);\n        el.zones.forEach(writeZone);\n        zoneIndex += el.zones.length + 1; // Terminal record\n    });\n    // Terminal records\n    generators.push(new Generator(0, 0, false));\n    modulators.push(new DecodedModulator(0, 0, 0, 0, 0));\n    generatorIndexes.push(currentGenIndex);\n    modulatorIndexes.push(currentModIndex);\n    zoneIndexes.push(zoneIndex);\n\n    // Write the parameters\n    const genSize = generators.length * GEN_BYTE_SIZE;\n    const genData = new IndexedByteArray(genSize);\n    generators.forEach((g) => g.write(genData));\n\n    const modSize = modulators.length * MOD_BYTE_SIZE;\n    const modData = new IndexedByteArray(modSize);\n    modulators.forEach((m) => m.write(modData));\n\n    const bagSize = modulatorIndexes.length * BAG_BYTE_SIZE;\n    const bagData: ExtendedSF2Chunks = {\n        pdta: new IndexedByteArray(bagSize),\n        xdta: new IndexedByteArray(bagSize)\n    };\n    modulatorIndexes.forEach((modulatorIndex, i) => {\n        const generatorIndex = generatorIndexes[i];\n        // Bottom WORD: regular ibag\n        writeWord(bagData.pdta, generatorIndex & 0xffff);\n        writeWord(bagData.pdta, modulatorIndex & 0xffff);\n        // Top WORD: extended ibag\n        writeWord(bagData.xdta, generatorIndex >> 16);\n        writeWord(bagData.xdta, modulatorIndex >> 16);\n    });\n\n    const hdrSize = (elements.length + 1) * hdrByteSize;\n    const hdrData: ExtendedSF2Chunks = {\n        pdta: new IndexedByteArray(hdrSize),\n        xdta: new IndexedByteArray(hdrSize)\n    };\n\n    elements.forEach((el, i) => el.write(hdrData, zoneIndexes[i]));\n\n    // Write terminal header records\n    if (isPreset) {\n        writeBinaryStringIndexed(hdrData.pdta, \"EOP\", 20);\n        hdrData.pdta.currentIndex += 4; // Program, bank\n        writeWord(hdrData.pdta, zoneIndex & 0xffff);\n        hdrData.pdta.currentIndex += 12; // Library, genre, morphology\n\n        writeBinaryStringIndexed(hdrData.xdta, \"\", 20);\n        hdrData.xdta.currentIndex += 4; // Program, bank\n        writeWord(hdrData.xdta, zoneIndex >> 16);\n        hdrData.xdta.currentIndex += 12; // Library, genre, morphology\n    } else {\n        // Write EOI\n        writeBinaryStringIndexed(hdrData.pdta, \"EOI\", 20);\n        writeWord(hdrData.pdta, zoneIndex & 0xffff);\n\n        writeBinaryStringIndexed(hdrData.xdta, \"\", 20);\n        writeWord(hdrData.xdta, zoneIndex >> 16);\n    }\n\n    return {\n        writeXdta:\n            Math.max(currentGenIndex, currentModIndex, zoneIndex) > 0xffff,\n        gen: {\n            pdta: writeRIFFChunkRaw(genHeader, genData),\n            // Same as pmod, this chunk includes only the terminal generator record to allow reuse of the pdta parser.\n            xdta: writeRIFFChunkRaw(\n                modHeader,\n                new IndexedByteArray(GEN_BYTE_SIZE)\n            )\n        },\n        mod: {\n            pdta: writeRIFFChunkRaw(modHeader, modData),\n            // This chunk exists solely to preserve parser compatibility and contains only the terminal modulator record.\n            xdta: writeRIFFChunkRaw(\n                modHeader,\n                new IndexedByteArray(MOD_BYTE_SIZE)\n            )\n        },\n        bag: {\n            pdta: writeRIFFChunkRaw(bagHeader, bagData.pdta),\n            xdta: writeRIFFChunkRaw(bagHeader, bagData.xdta)\n        },\n        hdr: {\n            pdta: writeRIFFChunkRaw(hdrHeader, hdrData.pdta),\n            xdta: writeRIFFChunkRaw(hdrHeader, hdrData.xdta)\n        }\n    };\n}\n", "import { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport {\n    writeRIFFChunkParts,\n    writeRIFFChunkRaw\n} from \"../../../utils/riff_chunk\";\nimport { getStringBytes } from \"../../../utils/byte_functions/string\";\nimport { consoleColors } from \"../../../utils/other\";\nimport { getSDTA } from \"./sdta\";\nimport { getSHDR } from \"./shdr\";\nimport {\n    writeLittleEndianIndexed,\n    writeWord\n} from \"../../../utils/byte_functions/little_endian\";\nimport {\n    SpessaSynthGroup,\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo\n} from \"../../../utils/loggin\";\nimport {\n    MOD_BYTE_SIZE,\n    Modulator,\n    SPESSASYNTH_DEFAULT_MODULATORS\n} from \"../../basic_soundbank/modulator\";\nimport { fillWithDefaults } from \"../../../utils/fill_with_defaults\";\nimport type {\n    SF2InfoFourCC,\n    SoundBankInfoData,\n    SoundBankInfoFourCC,\n    SoundFont2WriteOptions\n} from \"../../types\";\nimport type { BasicSoundBank } from \"../../basic_soundbank/basic_soundbank\";\nimport type { ExtendedSF2Chunks } from \"./types\";\nimport { writeSF2Elements } from \"./write_sf2_elements\";\n\nexport const DEFAULT_SF2_WRITE_OPTIONS: SoundFont2WriteOptions = {\n    compress: false,\n    compressionFunction: undefined,\n    progressFunction: undefined,\n    writeDefaultModulators: true,\n    writeExtendedLimits: true,\n    decompress: false\n};\n\n/**\n * Writes the sound bank as an SF2 file.\n * @param bank\n * @param writeOptions the options for writing.\n * @returns the binary file data.\n */\nexport async function writeSF2Internal(\n    bank: BasicSoundBank,\n    writeOptions: Partial<SoundFont2WriteOptions> = DEFAULT_SF2_WRITE_OPTIONS\n): Promise<ArrayBuffer> {\n    const options: SoundFont2WriteOptions = fillWithDefaults(\n        writeOptions,\n        DEFAULT_SF2_WRITE_OPTIONS\n    );\n    if (options?.compress) {\n        if (typeof options?.compressionFunction !== \"function\") {\n            throw new Error(\n                \"No compression function supplied but compression enabled.\"\n            );\n        }\n        if (options?.decompress) {\n            throw new Error(\"Decompressed and compressed at the same time.\");\n        }\n    }\n    SpessaSynthGroupCollapsed(\"%cSaving soundbank...\", consoleColors.info);\n    SpessaSynthInfo(\n        `%cCompression: %c${options?.compress || \"false\"}%c`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized\n    );\n    SpessaSynthGroup(\"%cWriting INFO...\", consoleColors.info);\n    /**\n     * Write INFO\n     */\n    const infoArrays: IndexedByteArray[] = [];\n    bank.soundBankInfo.software = \"SpessaSynth\"; // ( ͡° ͜ʖ ͡°)\n    if (options?.compress || bank.samples.some((s) => s.isCompressed)) {\n        // Set version to 3\n        bank.soundBankInfo.version.major = 3;\n        bank.soundBankInfo.version.minor = 0;\n    }\n    if (options?.decompress) {\n        // Set version to 2.4\n        bank.soundBankInfo.version.major = 2;\n        bank.soundBankInfo.version.minor = 4;\n    }\n\n    const writeSF2Info = (type: SF2InfoFourCC, data: string) => {\n        infoArrays.push(\n            writeRIFFChunkRaw(\n                type,\n                getStringBytes(data, true, true) // Pad with zero and ensure even length\n            )\n        );\n    };\n\n    // Write versions\n    const ifilData = new IndexedByteArray(4);\n    writeWord(ifilData, bank.soundBankInfo.version.major);\n    writeWord(ifilData, bank.soundBankInfo.version.minor);\n    infoArrays.push(writeRIFFChunkRaw(\"ifil\", ifilData));\n\n    if (bank.soundBankInfo.romVersion) {\n        const ifilData = new IndexedByteArray(4);\n        writeWord(ifilData, bank.soundBankInfo.romVersion.major);\n        writeWord(ifilData, bank.soundBankInfo.romVersion.minor);\n        infoArrays.push(writeRIFFChunkRaw(\"iver\", ifilData));\n    }\n\n    // Special comment case: merge subject and comment\n    const commentText =\n        (bank.soundBankInfo?.comment ?? \"\") +\n        (bank.soundBankInfo.subject\n            ? `\n${bank.soundBankInfo.subject}`\n            : \"\");\n\n    for (const [t, d] of Object.entries(bank.soundBankInfo)) {\n        const type = t as SoundBankInfoFourCC;\n        const data = d as SoundBankInfoData[SoundBankInfoFourCC];\n        if (!data) {\n            continue;\n        }\n\n        switch (type) {\n            case \"name\":\n                writeSF2Info(\"INAM\", data as string);\n                break;\n\n            case \"comment\":\n                writeSF2Info(\"ICMT\", commentText);\n                break;\n\n            case \"copyright\":\n                writeSF2Info(\"ICOP\", data as string);\n                break;\n\n            case \"creationDate\":\n                writeSF2Info(\"ICRD\", (data as Date).toISOString());\n                break;\n\n            case \"engineer\":\n                writeSF2Info(\"IENG\", data as string);\n                break;\n\n            case \"product\":\n                writeSF2Info(\"IPRD\", data as string);\n                break;\n\n            case \"romInfo\":\n                writeSF2Info(\"irom\", data as string);\n                break;\n\n            case \"software\":\n                writeSF2Info(\"ISFT\", data as string);\n                break;\n\n            case \"soundEngine\":\n                writeSF2Info(\"isng\", data as string);\n                break;\n\n            case \"subject\":\n                // Merged with the comment\n                break;\n        }\n    }\n\n    // Do not write unchanged default modulators\n    const unchangedDefaultModulators = bank.defaultModulators.some(\n        (mod) =>\n            SPESSASYNTH_DEFAULT_MODULATORS.findIndex((m) =>\n                Modulator.isIdentical(m, mod, true)\n            ) === -1\n    );\n\n    if (unchangedDefaultModulators && options?.writeDefaultModulators) {\n        const mods = bank.defaultModulators;\n        SpessaSynthInfo(\n            `%cWriting %c${mods.length}%c default modulators...`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        const dmodSize = MOD_BYTE_SIZE + mods.length * MOD_BYTE_SIZE;\n        const dmodData = new IndexedByteArray(dmodSize);\n        for (const mod of mods) {\n            mod.write(dmodData);\n        }\n\n        // Terminal modulator, is zero\n        writeLittleEndianIndexed(dmodData, 0, MOD_BYTE_SIZE);\n\n        infoArrays.push(writeRIFFChunkRaw(\"DMOD\", dmodData));\n    }\n\n    SpessaSynthGroupEnd();\n    SpessaSynthInfo(\"%cWriting SDTA...\", consoleColors.info);\n    // Write sdta\n    const smplStartOffsets: number[] = [];\n    const smplEndOffsets: number[] = [];\n    const sdtaChunk = await getSDTA(\n        bank,\n        smplStartOffsets,\n        smplEndOffsets,\n        options.compress,\n        options.decompress,\n        options?.compressionFunction,\n        options?.progressFunction\n    );\n\n    SpessaSynthInfo(\"%cWriting PDTA...\", consoleColors.info);\n    // Write pdta\n    // Go in reverse so the indexes are correct\n    // Instruments\n    SpessaSynthInfo(\"%cWriting SHDR...\", consoleColors.info);\n    const shdrChunk = getSHDR(bank, smplStartOffsets, smplEndOffsets);\n\n    // Note:\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n\n    SpessaSynthGroup(\"%cWriting instruments...\", consoleColors.info);\n    const instData = writeSF2Elements(bank, false);\n    SpessaSynthGroupEnd();\n\n    SpessaSynthGroup(\"%cWriting presets...\", consoleColors.info);\n    const presData = writeSF2Elements(bank, true);\n    SpessaSynthGroupEnd();\n\n    const chunks: ExtendedSF2Chunks[] = [\n        presData.hdr,\n        presData.bag,\n        presData.mod,\n        presData.gen,\n        instData.hdr,\n        instData.bag,\n        instData.mod,\n        instData.gen,\n        shdrChunk\n    ];\n    // Combine in the soundfont spec order\n    const pdtaChunk = writeRIFFChunkParts(\n        \"pdta\",\n        chunks.map((c) => c.pdta),\n        true\n    );\n\n    const writeXdta =\n        options.writeExtendedLimits &&\n        (instData.writeXdta ||\n            presData.writeXdta ||\n            bank.presets.some((p) => p.name.length > 20) ||\n            bank.instruments.some((i) => i.name.length > 20) ||\n            bank.samples.some((s) => s.name.length > 20));\n\n    if (writeXdta) {\n        SpessaSynthInfo(\n            `%cWriting the xdta chunk as writeExendedLimits is enabled and at least one condition was met.`,\n            consoleColors.info,\n            consoleColors.value\n        );\n        // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n        const xpdtaChunk = writeRIFFChunkParts(\n            \"xdta\",\n            chunks.map((c) => c.xdta),\n            true\n        );\n        infoArrays.push(xpdtaChunk);\n    }\n\n    const infoChunk = writeRIFFChunkParts(\"INFO\", infoArrays, true);\n    SpessaSynthInfo(\"%cWriting the output file...\", consoleColors.info);\n    // Finally, combine everything\n    const main = writeRIFFChunkParts(\"RIFF\", [\n        getStringBytes(\"sfbk\"),\n        infoChunk,\n        sdtaChunk,\n        pdtaChunk\n    ]);\n    SpessaSynthInfo(\n        `%cSaved succesfully! Final file size: %c${main.length}`,\n        consoleColors.info,\n        consoleColors.recognized\n    );\n    SpessaSynthGroupEnd();\n    return main.buffer;\n}\n", "import {\n    type FourCC,\n    readRIFFChunk,\n    type RIFFChunk\n} from \"../../utils/riff_chunk\";\nimport type { DLSChunkFourCC } from \"../types\";\nimport { SpessaSynthGroupEnd } from \"../../utils/loggin\";\nimport { readBinaryStringIndexed } from \"../../utils/byte_functions/string\";\n\nexport abstract class DLSVerifier {\n    /**\n     * @param chunk\n     * @param expected\n     * @throws error if the check doesn't pass\n     */\n    protected static verifyHeader(chunk: RIFFChunk, ...expected: FourCC[]) {\n        for (const expect of expected) {\n            if (chunk.header.toLowerCase() === expect.toLowerCase()) {\n                return;\n            }\n        }\n        this.parsingError(\n            `Invalid DLS chunk header! Expected \"${expected.join(\", or \")}\" got \"${chunk.header.toLowerCase()}\"`\n        );\n    }\n\n    /**\n     * @param text {string}\n     * @param expected {string}\n     * @throws error if the check doesn't pass\n     */\n    protected static verifyText(text: string, ...expected: DLSChunkFourCC[]) {\n        for (const expect of expected) {\n            if (text.toLowerCase() === expect.toLowerCase()) {\n                return;\n            }\n        }\n        this.parsingError(\n            `FourCC error: Expected \"${expected.join(\", or \")}\" got \"${text.toLowerCase()}\"`\n        );\n    }\n\n    /**\n     * @throws error if the check doesn't pass\n     */\n    protected static parsingError(error: string) {\n        SpessaSynthGroupEnd();\n        throw new Error(`DLS parse error: ${error} The file may be corrupted.`);\n    }\n\n    protected static verifyAndReadList(\n        chunk: RIFFChunk,\n        ...type: DLSChunkFourCC[]\n    ) {\n        this.verifyHeader(chunk, \"LIST\");\n        chunk.data.currentIndex = 0;\n        this.verifyText(readBinaryStringIndexed(chunk.data, 4), ...type);\n        const chunks: RIFFChunk[] = [];\n        while (chunk.data.length > chunk.data.currentIndex) {\n            chunks.push(readRIFFChunk(chunk.data));\n        }\n        return chunks;\n    }\n}\n", "import type { DLSLoop } from \"../types\";\nimport { type RIFFChunk, writeRIFFChunkRaw } from \"../../utils/riff_chunk\";\nimport {\n    readLittleEndianIndexed,\n    signedInt16,\n    writeDword,\n    writeWord\n} from \"../../utils/byte_functions/little_endian\";\nimport { type DLSLoopType, DLSLoopTypes, generatorTypes } from \"../enums\";\nimport { DLSVerifier } from \"./dls_verifier\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport type { BasicZone } from \"../basic_soundbank/basic_zone\";\nimport { type BasicSample } from \"../basic_soundbank/basic_sample\";\nimport type { SampleLoopingMode } from \"../../synthesizer/types\";\nimport { SpessaSynthWarn } from \"../../utils/loggin\";\nimport type { BasicInstrumentZone } from \"../basic_soundbank/basic_instrument_zone\";\n\nconst WSMP_SIZE = 20;\nconst WSMP_LOOP_SIZE = 16;\n\nexport class WaveSample extends DLSVerifier {\n    /**\n     * Specifies the gain to be applied to this sample in 32 bit relative gain units.\n     * Each unit of gain represents 1/655360 dB.\n     */\n    public gain = 0;\n    /**\n     * Specifies the MIDI note which will replay the sample at original pitch. This value ranges\n     * from 0 to 127 (a value of 60 represents Middle C, as defined by the MIDI specification).\n     */\n    public unityNote = 60;\n    /**\n     * Specifies the tuning offset from the usUnityNote in 16 bit relative pitch. (cents)\n     */\n    public fineTune = 0;\n    /**\n     * Specifies the number (count) of <wavesample-loop> records that are contained in the\n     * <wsmp-ck> chunk. The <wavesample-loop> records are stored immediately following the\n     * cSampleLoops data field. One shot sounds will have the cSampleLoops field set to 0.\n     * Looped sounds will have the cSampleLoops field set to 1. Values greater than 1 are not yet\n     * defined at this time.\n     */\n    public loops = new Array<DLSLoop>();\n\n    /**\n     * Specifies flag options for the digital audio sample.\n     * Default to F_WSMP_NO_COMPRESSION,\n     * according to all DLS files I have.\n     */\n    public fulOptions = 2;\n\n    public static copyFrom(inputWaveSample: WaveSample) {\n        const outputWaveSample = new WaveSample();\n        outputWaveSample.unityNote = inputWaveSample.unityNote;\n        outputWaveSample.gain = inputWaveSample.gain;\n        outputWaveSample.fineTune = inputWaveSample.fineTune;\n        outputWaveSample.loops = inputWaveSample.loops.map((l) => {\n            return { ...l };\n        });\n        outputWaveSample.fulOptions = inputWaveSample.fulOptions;\n        return outputWaveSample;\n    }\n\n    public static read(chunk: RIFFChunk) {\n        this.verifyHeader(chunk, \"wsmp\");\n        const waveSample = new WaveSample();\n        // CbSize\n        const cbSize = readLittleEndianIndexed(chunk.data, 4);\n        if (cbSize !== WSMP_SIZE) {\n            SpessaSynthWarn(\n                `Wsmp cbSize mismatch: got ${cbSize}, expected ${WSMP_SIZE}.`\n            );\n        }\n        waveSample.unityNote = readLittleEndianIndexed(chunk.data, 2);\n        // SFineTune\n        waveSample.fineTune = signedInt16(\n            chunk.data[chunk.data.currentIndex++],\n            chunk.data[chunk.data.currentIndex++]\n        );\n\n        // LGain: Each unit of gain represents 1/655360 dB\n        waveSample.gain = readLittleEndianIndexed(chunk.data, 4) | 0;\n        waveSample.fulOptions = readLittleEndianIndexed(chunk.data, 4);\n\n        // Read loop count (always one or zero)\n        const loopsAmount = readLittleEndianIndexed(chunk.data, 4);\n        if (loopsAmount === 0) {\n            // No loop\n        } else {\n            const cbSize = readLittleEndianIndexed(chunk.data, 4);\n            if (cbSize !== WSMP_LOOP_SIZE) {\n                SpessaSynthWarn(\n                    `CbSize for loop in wsmp mismatch. Expected ${WSMP_SIZE}, got ${cbSize}.`\n                );\n            }\n            // Loop type: loop normally or loop until release (like soundfont)\n            const loopType = readLittleEndianIndexed(\n                chunk.data,\n                4\n            ) as DLSLoopType; // Why is it long?\n            const loopStart = readLittleEndianIndexed(chunk.data, 4);\n            const loopLength = readLittleEndianIndexed(chunk.data, 4);\n            waveSample.loops.push({\n                loopStart,\n                loopLength,\n                loopType\n            });\n        }\n        return waveSample;\n    }\n\n    public static fromSFSample(sample: BasicSample) {\n        const waveSample = new WaveSample();\n        waveSample.unityNote = sample.originalKey;\n        waveSample.fineTune = sample.pitchCorrection;\n        if (sample.loopEnd !== 0 || sample.loopStart !== 0) {\n            waveSample.loops.push({\n                loopStart: sample.loopStart,\n                loopLength: sample.loopEnd - sample.loopStart,\n                loopType: DLSLoopTypes.forward\n            });\n        }\n        return waveSample;\n    }\n\n    public static fromSFZone(zone: BasicInstrumentZone) {\n        const waveSample = new WaveSample();\n        waveSample.unityNote = zone.getGenerator(\n            generatorTypes.overridingRootKey,\n            zone.sample.originalKey\n        );\n\n        // A lot of sound banks like to set scale tuning to 0 in drums and keep the key at 60\n        // Since we implement scale tuning via a dls articulator and fluid doesn't support these,\n        // Change the root key here\n        if (\n            zone.getGenerator(generatorTypes.scaleTuning, 100) === 0 &&\n            zone.keyRange.max - zone.keyRange.min === 0\n        ) {\n            waveSample.unityNote = zone.keyRange.min;\n        }\n\n        /*\n         Note: this may slightly change the generators themselves when doing SF -> DLS -> SF, but the tuning remains the same\n         Testcase: Helicopter from GeneralUser-GS v2.0.1\n         It sets coarse -13 fine 2 which is a total of -1298 cents\n         This then gets converted into -12 coarse and -98 tune which is still correct!\n        */\n        waveSample.fineTune = zone.fineTuning + zone.sample.pitchCorrection;\n        // E-mu attenuation correction\n        const attenuationCb =\n            zone.getGenerator(generatorTypes.initialAttenuation, 0) * 0.4;\n        // Gain is stored as a 32-bit value, shift here\n        waveSample.gain = -attenuationCb << 16;\n        const loopingMode = zone.getGenerator(\n            generatorTypes.sampleModes,\n            0\n        ) as SampleLoopingMode;\n        // Don't add loops unless needed\n        if (loopingMode !== 0) {\n            // Make sure to get offsets\n            const loopStart =\n                zone.sample.loopStart +\n                zone.getGenerator(generatorTypes.startloopAddrsOffset, 0) +\n                zone.getGenerator(\n                    generatorTypes.startloopAddrsCoarseOffset,\n                    0\n                ) *\n                    32768;\n            const loopEnd =\n                zone.sample.loopEnd +\n                zone.getGenerator(generatorTypes.endloopAddrsOffset, 0) +\n                zone.getGenerator(generatorTypes.endloopAddrsCoarseOffset, 0) *\n                    32768;\n            let dlsLoopType: DLSLoopType;\n            switch (loopingMode) {\n                case 1:\n                default:\n                    dlsLoopType = 0;\n                    break;\n\n                case 3:\n                    dlsLoopType = 1;\n            }\n            waveSample.loops.push({\n                loopType: dlsLoopType,\n                loopStart,\n                loopLength: loopEnd - loopStart\n            });\n        }\n        return waveSample;\n    }\n\n    /**\n     * Converts the wsmp data into an SF zone.\n     */\n    public toSFZone(zone: BasicZone, sample: BasicSample) {\n        let loopingMode: SampleLoopingMode = 0;\n        const loop = this.loops[0];\n        if (loop) {\n            loopingMode = loop.loopType === DLSLoopTypes.loopAndRelease ? 3 : 1;\n        }\n        if (loopingMode !== 0) {\n            zone.setGenerator(generatorTypes.sampleModes, loopingMode);\n        }\n\n        // Convert to signed and turn into attenuation (invert)\n        const wsmpGain16 = this.gain >> 16;\n        const wsmpAttenuation = -wsmpGain16;\n        // Apply the E-MU attenuation correction here\n        const wsmpAttenuationCorrected = wsmpAttenuation / 0.4;\n\n        if (wsmpAttenuationCorrected !== 0) {\n            zone.setGenerator(\n                generatorTypes.initialAttenuation,\n                wsmpAttenuationCorrected\n            );\n        }\n\n        // Correct tuning\n        zone.fineTuning = this.fineTune - sample.pitchCorrection;\n\n        // Correct the key if needed\n        if (this.unityNote !== sample.originalKey) {\n            zone.setGenerator(generatorTypes.overridingRootKey, this.unityNote);\n        }\n        // Correct loop if needed\n        if (loop) {\n            const diffStart = loop.loopStart - sample.loopStart;\n            const loopEnd = loop.loopStart + loop.loopLength;\n            const diffEnd = loopEnd - sample.loopEnd;\n            if (diffStart !== 0) {\n                const fine = diffStart % 32768;\n                zone.setGenerator(generatorTypes.startloopAddrsOffset, fine);\n                // Coarse generator uses 32768 samples per step\n                const coarse = Math.trunc(diffStart / 32768);\n                if (coarse !== 0) {\n                    zone.setGenerator(\n                        generatorTypes.startloopAddrsCoarseOffset,\n                        coarse\n                    );\n                }\n            }\n            if (diffEnd !== 0) {\n                const fine = diffEnd % 32768;\n                zone.setGenerator(generatorTypes.endloopAddrsOffset, fine);\n                // Coarse generator uses 32768 samples per step\n                const coarse = Math.trunc(diffEnd / 32768);\n                if (coarse !== 0) {\n                    zone.setGenerator(\n                        generatorTypes.endloopAddrsCoarseOffset,\n                        coarse\n                    );\n                }\n            }\n        }\n    }\n\n    public write() {\n        const wsmpData = new IndexedByteArray(\n            WSMP_SIZE + this.loops.length * WSMP_LOOP_SIZE\n        );\n        // CbSize\n        writeDword(wsmpData, WSMP_SIZE);\n        writeWord(wsmpData, this.unityNote);\n        writeWord(wsmpData, this.fineTune);\n        writeDword(wsmpData, this.gain);\n        writeDword(wsmpData, this.fulOptions);\n        // CSampleLoops\n        writeDword(wsmpData, this.loops.length);\n        this.loops.forEach((loop) => {\n            writeDword(wsmpData, WSMP_LOOP_SIZE);\n            writeDword(wsmpData, loop.loopType);\n            writeDword(wsmpData, loop.loopStart);\n            writeDword(wsmpData, loop.loopLength);\n        });\n        return writeRIFFChunkRaw(\"wsmp\", wsmpData);\n    }\n}\n", "import { BasicSample } from \"../basic_soundbank/basic_sample\";\nimport { SpessaSynthWarn } from \"../../utils/loggin\";\nimport { readLittleEndianIndexed } from \"../../utils/byte_functions/little_endian\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport type { RIFFChunk } from \"../../utils/riff_chunk\";\nimport { sampleTypes } from \"../enums\";\n\nconst W_FORMAT_TAG = {\n    PCM: 0x01,\n    ALAW: 0x6\n} as const;\n\nfunction readPCM(data: IndexedByteArray, bytesPerSample: number): Float32Array {\n    const maxSampleValue = Math.pow(2, bytesPerSample * 8 - 1); // Max value for the sample\n    const maxUnsigned = Math.pow(2, bytesPerSample * 8);\n\n    let normalizationFactor;\n    let isUnsigned = false;\n\n    if (bytesPerSample === 1) {\n        normalizationFactor = 255; // For 8-bit normalize from 0-255\n        isUnsigned = true;\n    } else {\n        normalizationFactor = maxSampleValue; // For 16-bit normalize from -32,768 to 32,767\n    }\n    const sampleLength = data.length / bytesPerSample;\n    const sampleData = new Float32Array(sampleLength);\n    if (bytesPerSample === 2) {\n        // Special optimized case for s16 (most common)\n        const s16 = new Int16Array(data.buffer);\n        for (let i = 0; i < s16.length; i++) {\n            sampleData[i] = s16[i] / 32768;\n        }\n    } else {\n        for (let i = 0; i < sampleData.length; i++) {\n            // Read\n            let sample = readLittleEndianIndexed(data, bytesPerSample);\n            // Turn into signed\n            if (isUnsigned) {\n                // Normalize unsigned 8-bit sample\n                sampleData[i] = sample / normalizationFactor - 0.5;\n            } else {\n                // Normalize signed sample\n                if (sample >= maxSampleValue) {\n                    sample -= maxUnsigned;\n                }\n                sampleData[i] = sample / normalizationFactor;\n            }\n        }\n    }\n    return sampleData;\n}\n\nfunction readALAW(\n    data: IndexedByteArray,\n    bytesPerSample: number\n): Float32Array {\n    const sampleLength = data.length / bytesPerSample;\n    const sampleData = new Float32Array(sampleLength);\n    for (let i = 0; i < sampleData.length; i++) {\n        // Read\n        const input = readLittleEndianIndexed(data, bytesPerSample);\n\n        // https://en.wikipedia.org/wiki/G.711#A-law\n        // Re-toggle toggled bits\n        let sample = input ^ 0x55;\n\n        // Remove sign bit\n        sample &= 0x7f;\n\n        // Extract exponent\n        const exponent = sample >> 4;\n        // Extract mantissa\n        let mantissa = sample & 0xf;\n        if (exponent > 0) {\n            mantissa += 16; // Add leading '1', if exponent > 0\n        }\n\n        mantissa = (mantissa << 4) + 0x8;\n        if (exponent > 1) {\n            mantissa = mantissa << (exponent - 1);\n        }\n\n        const s16sample = input > 127 ? mantissa : -mantissa;\n\n        // Convert to float\n        sampleData[i] = s16sample / 32678;\n    }\n    return sampleData;\n}\n\nexport class DLSSample extends BasicSample {\n    protected wFormatTag: number;\n    protected bytesPerSample: number;\n\n    /**\n     * Sample's raw data before decoding it, for faster writing\n     */\n    protected rawData: IndexedByteArray;\n\n    /**\n     * @param name\n     * @param rate\n     * @param pitch\n     * @param pitchCorrection\n     * @param loopStart sample data points\n     * @param loopEnd sample data points\n     * @param dataChunk\n     * @param wFormatTag\n     * @param bytesPerSample\n     */\n    public constructor(\n        name: string,\n        rate: number,\n        pitch: number,\n        pitchCorrection: number,\n        loopStart: number,\n        loopEnd: number,\n        dataChunk: RIFFChunk,\n        wFormatTag: number,\n        bytesPerSample: number\n    ) {\n        super(\n            name,\n            rate,\n            pitch,\n            pitchCorrection,\n            sampleTypes.monoSample,\n            loopStart,\n            loopEnd\n        );\n        this.dataOverridden = false;\n        this.rawData = dataChunk.data;\n        this.wFormatTag = wFormatTag;\n        this.bytesPerSample = bytesPerSample;\n    }\n\n    public getAudioData(): Float32Array {\n        if (!this.rawData) {\n            return new Float32Array(0);\n        }\n        if (!this.audioData) {\n            let sampleData;\n            switch (this.wFormatTag) {\n                default:\n                    SpessaSynthWarn(\n                        `Failed to decode sample. Unknown wFormatTag: ${this.wFormatTag}`\n                    );\n                    sampleData = new Float32Array(\n                        this.rawData.length / this.bytesPerSample\n                    );\n                    break;\n\n                case W_FORMAT_TAG.PCM:\n                    sampleData = readPCM(this.rawData, this.bytesPerSample);\n                    break;\n\n                case W_FORMAT_TAG.ALAW:\n                    sampleData = readALAW(this.rawData, this.bytesPerSample);\n                    break;\n            }\n            this.setAudioData(sampleData, this.sampleRate);\n        }\n        return this.audioData ?? new Float32Array(0);\n    }\n\n    public getRawData(allowVorbis: boolean) {\n        if (this.dataOverridden || this.isCompressed) {\n            return super.getRawData(allowVorbis);\n        }\n        if (this.wFormatTag === W_FORMAT_TAG.PCM && this.bytesPerSample === 2) {\n            // Copy straight away\n            return this.rawData;\n        }\n        return this.encodeS16LE();\n    }\n}\n", "import { DLSVerifier } from \"./dls_verifier\";\nimport { WaveSample } from \"./wave_sample\";\nimport {\n    findRIFFListType,\n    readRIFFChunk,\n    RIFFChunk,\n    writeRIFFChunkParts,\n    writeRIFFChunkRaw\n} from \"../../utils/riff_chunk\";\nimport {\n    readLittleEndianIndexed,\n    writeDword,\n    writeWord\n} from \"../../utils/byte_functions/little_endian\";\nimport {\n    getStringBytes,\n    readBinaryStringIndexed\n} from \"../../utils/byte_functions/string\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { SpessaSynthInfo } from \"../../utils/loggin\";\nimport { consoleColors } from \"../../utils/other\";\nimport { DLSSample } from \"./dls_sample\";\nimport type { BasicSoundBank } from \"../basic_soundbank/basic_soundbank\";\nimport type { BasicSample } from \"../basic_soundbank/basic_sample\";\n\nexport class DownloadableSoundsSample extends DLSVerifier {\n    public waveSample = new WaveSample();\n    public readonly wFormatTag: number;\n    public readonly bytesPerSample: number;\n    public readonly sampleRate: number;\n    public readonly dataChunk: RIFFChunk;\n    public name = \"Unnamed sample\";\n\n    public constructor(\n        wFormatTag: number,\n        bytesPerSample: number,\n        sampleRate: number,\n        dataChunk: RIFFChunk\n    ) {\n        super();\n        this.wFormatTag = wFormatTag;\n        this.bytesPerSample = bytesPerSample;\n        this.sampleRate = sampleRate;\n        this.dataChunk = dataChunk;\n    }\n\n    public static read(waveChunk: RIFFChunk) {\n        const chunks = this.verifyAndReadList(waveChunk, \"wave\");\n\n        const fmtChunk = chunks.find((c) => c.header === \"fmt \");\n        if (!fmtChunk) {\n            throw new Error(\"No fmt chunk in the wave file!\");\n        }\n\n        // https://github.com/tpn/winsdk-10/blob/9b69fd26ac0c7d0b83d378dba01080e93349c2ed/Include/10.0.14393.0/shared/mmreg.h#L2108\n        const wFormatTag = readLittleEndianIndexed(fmtChunk.data, 2);\n        const channelsAmount = readLittleEndianIndexed(fmtChunk.data, 2);\n        if (channelsAmount !== 1) {\n            throw new Error(\n                `Only mono samples are supported. Fmt reports ${channelsAmount} channels.`\n            );\n        }\n        const sampleRate = readLittleEndianIndexed(fmtChunk.data, 4);\n        // Skip avg bytes\n        readLittleEndianIndexed(fmtChunk.data, 4);\n        // BlockAlign\n        readLittleEndianIndexed(fmtChunk.data, 2);\n        // It's bits per sample because one channel\n        const wBitsPerSample = readLittleEndianIndexed(fmtChunk.data, 2);\n        const bytesPerSample = wBitsPerSample / 8;\n        const dataChunk = chunks.find((c) => c.header === \"data\");\n        if (!dataChunk) {\n            throw new Error(\"No data chunk in the WAVE chunk!\");\n        }\n        const sample = new DownloadableSoundsSample(\n            wFormatTag,\n            bytesPerSample,\n            sampleRate,\n            dataChunk\n        );\n\n        // Read sample name\n        const waveInfo = findRIFFListType(chunks, \"INFO\");\n        if (waveInfo) {\n            let infoChunk = readRIFFChunk(waveInfo.data);\n            while (\n                infoChunk.header !== \"INAM\" &&\n                waveInfo.data.currentIndex < waveInfo.data.length\n            ) {\n                infoChunk = readRIFFChunk(waveInfo.data);\n            }\n            if (infoChunk.header === \"INAM\") {\n                sample.name = readBinaryStringIndexed(\n                    infoChunk.data,\n                    infoChunk.size\n                ).trim();\n            }\n        }\n\n        // Read wave sample\n        const wsmpChunk = chunks.find((c) => c.header === \"wsmp\");\n        if (wsmpChunk) {\n            sample.waveSample = WaveSample.read(wsmpChunk);\n        }\n        return sample;\n    }\n\n    public static fromSFSample(sample: BasicSample) {\n        const raw = sample.getRawData(false);\n        const dlsSample = new DownloadableSoundsSample(\n            0x01, // PCM\n            2, // 2 bytes per sample\n            sample.sampleRate,\n            // Get the s16le data\n            new RIFFChunk(\n                \"data\",\n                raw.length,\n                new IndexedByteArray(raw.buffer as ArrayBuffer)\n            )\n        );\n        dlsSample.name = sample.name;\n        dlsSample.waveSample = WaveSample.fromSFSample(sample);\n        return dlsSample;\n    }\n\n    public toSFSample(soundBank: BasicSoundBank) {\n        // DLS allows tuning to be a SHORT (32767 max), while SF uses BYTE (with 99 max -99 min)\n        // Clamp it down and change root key if needed\n        let originalKey = this.waveSample.unityNote;\n        let pitchCorrection = this.waveSample.fineTune;\n        const samplePitchSemitones = Math.trunc(pitchCorrection / 100);\n\n        originalKey += samplePitchSemitones;\n        pitchCorrection -= samplePitchSemitones * 100;\n\n        let loopStart = 0;\n        let loopEnd = 0;\n        const loop = this.waveSample.loops?.[0];\n        if (loop) {\n            loopStart = loop.loopStart;\n            loopEnd = loop.loopStart + loop.loopLength;\n        }\n\n        const sample = new DLSSample(\n            this.name,\n            this.sampleRate,\n            originalKey,\n            pitchCorrection,\n            loopStart,\n            loopEnd,\n            this.dataChunk,\n            this.wFormatTag,\n            this.bytesPerSample\n        );\n        soundBank.addSamples(sample);\n    }\n\n    public write() {\n        const fmt = this.writeFmt();\n        const wsmp = this.waveSample.write();\n        const data = writeRIFFChunkRaw(\"data\", this.dataChunk.data);\n\n        const inam = writeRIFFChunkRaw(\"INAM\", getStringBytes(this.name, true));\n        const info = writeRIFFChunkRaw(\"INFO\", inam, false, true);\n        SpessaSynthInfo(\n            `%cSaved %c${this.name}%c successfully!`,\n            consoleColors.recognized,\n            consoleColors.value,\n            consoleColors.recognized\n        );\n        return writeRIFFChunkParts(\"wave\", [fmt, wsmp, data, info], true);\n    }\n\n    private writeFmt() {\n        const fmtData = new IndexedByteArray(18);\n        writeWord(fmtData, this.wFormatTag); // WFormatTag\n        writeWord(fmtData, 1); // WChannels\n        writeDword(fmtData, this.sampleRate);\n        writeDword(fmtData, this.sampleRate * 2); // 16-bit samples\n        writeWord(fmtData, 2); // WBlockAlign\n        writeWord(fmtData, this.bytesPerSample * 8); // WBitsPerSample\n        return writeRIFFChunkRaw(\"fmt \", fmtData);\n    }\n}\n", "import { DecodedModulator } from \"../basic_soundbank/modulator\";\nimport { generatorTypes } from \"../basic_soundbank/generator_types\";\n\nexport const DEFAULT_DLS_REVERB = new DecodedModulator(\n    0x00db,\n    0x0,\n    generatorTypes.reverbEffectsSend,\n    1000,\n    0\n);\n\nexport const DEFAULT_DLS_CHORUS = new DecodedModulator(\n    0x00dd,\n    0x0,\n    generatorTypes.chorusEffectsSend,\n    1000,\n    0\n);\n\nexport const DLS_1_NO_VIBRATO_MOD = new DecodedModulator(\n    0x0081,\n    0x0,\n    generatorTypes.vibLfoToPitch,\n    0,\n    0\n);\n\nexport const DLS_1_NO_VIBRATO_PRESSURE = new DecodedModulator(\n    0x000d,\n    0x0,\n    generatorTypes.vibLfoToPitch,\n    0,\n    0\n);\n", "import {\n    type DLSSource,\n    dlsSources,\n    type DLSTransform,\n    modulatorCurveTypes,\n    type ModulatorSourceEnum,\n    modulatorSources\n} from \"../enums\";\nimport { ModulatorSource } from \"../basic_soundbank/modulator_source\";\nimport { type MIDIController, midiControllers } from \"../../midi/enums\";\nimport type { ModulatorSourceIndex } from \"../types\";\n\nexport class ConnectionSource {\n    public source: DLSSource;\n    public transform: DLSTransform;\n    public bipolar: boolean;\n    public invert: boolean;\n\n    public constructor(\n        source: DLSSource = dlsSources.none,\n        transform: DLSTransform = modulatorCurveTypes.linear,\n        bipolar = false,\n        invert = false\n    ) {\n        this.source = source;\n        this.transform = transform;\n        this.bipolar = bipolar;\n        this.invert = invert;\n    }\n\n    private get sourceName() {\n        return (\n            Object.keys(dlsSources).find(\n                (k) => dlsSources[k as keyof typeof dlsSources] === this.source\n            ) ?? this.source.toString()\n        );\n    }\n\n    private get transformName() {\n        return (\n            Object.keys(modulatorCurveTypes).find(\n                (k) =>\n                    modulatorCurveTypes[\n                        k as keyof typeof modulatorCurveTypes\n                    ] === this.transform\n            ) ?? this.transform.toString()\n        );\n    }\n\n    public static copyFrom(inputSource: ConnectionSource) {\n        return new ConnectionSource(\n            inputSource.source,\n            inputSource.transform,\n            inputSource.bipolar,\n            inputSource.invert\n        );\n    }\n\n    public static fromSFSource(\n        source: ModulatorSource\n    ): ConnectionSource | undefined {\n        let sourceEnum: DLSSource | undefined = undefined;\n        if (source.isCC) {\n            // DLS only supports a specific set of controllers\n            switch (source.index as MIDIController) {\n                case midiControllers.modulationWheel:\n                    sourceEnum = dlsSources.modulationWheel;\n                    break;\n\n                case midiControllers.mainVolume:\n                    sourceEnum = dlsSources.volume;\n                    break;\n\n                case midiControllers.pan:\n                    sourceEnum = dlsSources.pan;\n                    break;\n\n                case midiControllers.expressionController:\n                    sourceEnum = dlsSources.expression;\n                    break;\n\n                case midiControllers.chorusDepth:\n                    sourceEnum = dlsSources.chorus;\n                    break;\n\n                case midiControllers.reverbDepth:\n                    sourceEnum = dlsSources.reverb;\n                    break;\n            }\n        } else {\n            switch (source.index as ModulatorSourceEnum) {\n                case modulatorSources.noController:\n                    sourceEnum = dlsSources.none;\n                    break;\n\n                case modulatorSources.noteOnKeyNum:\n                    sourceEnum = dlsSources.keyNum;\n                    break;\n\n                case modulatorSources.noteOnVelocity:\n                    sourceEnum = dlsSources.velocity;\n                    break;\n\n                case modulatorSources.pitchWheel:\n                    sourceEnum = dlsSources.pitchWheel;\n                    break;\n\n                case modulatorSources.pitchWheelRange:\n                    sourceEnum = dlsSources.pitchWheelRange;\n                    break;\n\n                case modulatorSources.polyPressure:\n                    sourceEnum = dlsSources.polyPressure;\n                    break;\n\n                case modulatorSources.channelPressure:\n                    sourceEnum = dlsSources.channelPressure;\n            }\n        }\n        // Unable to convert into DLS\n        if (sourceEnum === undefined) {\n            return undefined;\n        }\n\n        return new ConnectionSource(\n            sourceEnum,\n            source.curveType,\n            source.isBipolar,\n            source.isNegative\n        );\n    }\n\n    public toString() {\n        return `${this.sourceName} ${this.transformName} ${this.bipolar ? \"bipolar\" : \"unipolar\"} ${this.invert ? \"inverted\" : \"positive\"}`;\n    }\n\n    public toTransformFlag() {\n        return (\n            this.transform |\n            ((this.bipolar ? 1 : 0) << 4) |\n            ((this.invert ? 1 : 0) << 5)\n        );\n    }\n\n    public toSFSource(): ModulatorSource | undefined {\n        let sourceEnum: ModulatorSourceIndex | undefined = undefined;\n        let isCC = false;\n        switch (this.source) {\n            default:\n            case dlsSources.modLfo:\n            case dlsSources.vibratoLfo:\n            case dlsSources.coarseTune:\n            case dlsSources.fineTune:\n            case dlsSources.modEnv:\n                return undefined; // Cannot be this in sf2\n\n            case dlsSources.keyNum:\n                sourceEnum = modulatorSources.noteOnKeyNum;\n                break;\n            case dlsSources.none:\n                sourceEnum = modulatorSources.noController;\n                break;\n            case dlsSources.modulationWheel:\n                sourceEnum = midiControllers.modulationWheel;\n                isCC = true;\n                break;\n            case dlsSources.pan:\n                sourceEnum = midiControllers.pan;\n                isCC = true;\n                break;\n            case dlsSources.reverb:\n                sourceEnum = midiControllers.reverbDepth;\n                isCC = true;\n                break;\n            case dlsSources.chorus:\n                sourceEnum = midiControllers.chorusDepth;\n                isCC = true;\n                break;\n            case dlsSources.expression:\n                sourceEnum = midiControllers.expressionController;\n                isCC = true;\n                break;\n            case dlsSources.volume:\n                sourceEnum = midiControllers.mainVolume;\n                isCC = true;\n                break;\n            case dlsSources.velocity:\n                sourceEnum = modulatorSources.noteOnVelocity;\n                break;\n            case dlsSources.polyPressure:\n                sourceEnum = modulatorSources.polyPressure;\n                break;\n            case dlsSources.channelPressure:\n                sourceEnum = modulatorSources.channelPressure;\n                break;\n            case dlsSources.pitchWheel:\n                sourceEnum = modulatorSources.pitchWheel;\n                break;\n            case dlsSources.pitchWheelRange:\n                sourceEnum = modulatorSources.pitchWheelRange;\n                break;\n        }\n        if (sourceEnum === undefined) {\n            return undefined;\n        }\n\n        return new ModulatorSource(\n            sourceEnum,\n            this.transform,\n            isCC,\n            this.bipolar,\n            this.invert\n        );\n    }\n}\n", "import { ConnectionSource } from \"./connection_source\";\nimport {\n    type DLSDestination,\n    dlsDestinations,\n    type DLSSource,\n    dlsSources,\n    type DLSTransform,\n    modulatorCurveTypes\n} from \"../enums\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport {\n    readLittleEndianIndexed,\n    writeDword,\n    writeWord\n} from \"../../utils/byte_functions/little_endian\";\nimport { bitMaskToBool } from \"../../utils/byte_functions/bit_mask\";\nimport { Generator } from \"../basic_soundbank/generator\";\nimport {\n    type GeneratorType,\n    generatorTypes\n} from \"../basic_soundbank/generator_types\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../utils/loggin\";\nimport { BasicZone } from \"../basic_soundbank/basic_zone\";\nimport { consoleColors } from \"../../utils/other\";\nimport { ModulatorSource } from \"../basic_soundbank/modulator_source\";\nimport { Modulator } from \"../basic_soundbank/modulator\";\nimport type { DownloadableSoundsArticulation } from \"./articulation\";\nimport {\n    DEFAULT_DLS_CHORUS,\n    DEFAULT_DLS_REVERB\n} from \"./default_dls_modulators\";\n\nconst invalidGeneratorTypes = new Set<GeneratorType>([\n    generatorTypes.sampleModes, // Set in wave sample\n    generatorTypes.initialAttenuation, // Set in wave sample\n    generatorTypes.keyRange, // Set in region header\n    generatorTypes.velRange, // Set in region header\n    generatorTypes.sampleID, // Set in wave link\n    generatorTypes.fineTune, // Set in wave sample\n    generatorTypes.coarseTune, // Set in wave sample\n    generatorTypes.startAddrsOffset, // Does not exist in DLS\n    generatorTypes.startAddrsCoarseOffset, // Does not exist in DLS\n    generatorTypes.endAddrOffset, // Does not exist in DLS\n    generatorTypes.endAddrsCoarseOffset, // Set in wave sample\n    generatorTypes.startloopAddrsOffset, // Set in wave sample\n    generatorTypes.startloopAddrsCoarseOffset, // Set in wave sample\n    generatorTypes.endloopAddrsOffset, // Set in wave sample\n    generatorTypes.endloopAddrsCoarseOffset, // Set in wave sample\n    generatorTypes.overridingRootKey, // Set in wave sample\n    generatorTypes.exclusiveClass // Set in region header\n] as const);\n\n/**\n * Represents a single DLS articulator (connection block)\n */\nexport class ConnectionBlock {\n    /**\n     * Like SF2 modulator source.\n     */\n    public readonly source: ConnectionSource;\n    /**\n     * Like SF2 modulator secondary source.\n     */\n    public readonly control: ConnectionSource;\n    /**\n     * Like SF2 destination.\n     */\n    public readonly destination: DLSDestination;\n    /**\n     * Like SF2 amount, but long (32-bit) instead of short.\n     */\n    public readonly scale: number;\n    /**\n     * Like SF2 source transforms.\n     */\n    public readonly transform: DLSTransform;\n\n    public constructor(\n        source = new ConnectionSource(),\n        control = new ConnectionSource(),\n        destination: DLSDestination,\n        transform: DLSTransform,\n        scale: number\n    ) {\n        this.source = source;\n        this.control = control;\n        this.destination = destination;\n        this.transform = transform;\n        this.scale = scale;\n    }\n\n    public get isStaticParameter() {\n        return (\n            this.source.source === dlsSources.none &&\n            this.control.source === dlsSources.none\n        );\n    }\n\n    public get shortScale() {\n        return this.scale >> 16;\n    }\n\n    private get transformName() {\n        return (\n            Object.keys(modulatorCurveTypes).find(\n                (k) =>\n                    modulatorCurveTypes[\n                        k as keyof typeof modulatorCurveTypes\n                    ] === this.transform\n            ) ?? this.transform.toString()\n        );\n    }\n\n    private get destinationName() {\n        return (\n            Object.keys(dlsDestinations).find(\n                (k) =>\n                    dlsDestinations[k as keyof typeof dlsDestinations] ===\n                    this.destination\n            ) ?? this.destination.toString()\n        );\n    }\n\n    public static read(artData: IndexedByteArray) {\n        const usSource = readLittleEndianIndexed(artData, 2);\n        const usControl = readLittleEndianIndexed(artData, 2);\n        const usDestination = readLittleEndianIndexed(\n            artData,\n            2\n        ) as DLSDestination;\n        const usTransform = readLittleEndianIndexed(artData, 2);\n        const lScale = readLittleEndianIndexed(artData, 4) | 0;\n        /*\n        2.10 <art2-ck>, Level 2 Articulator Chunk\n        usTransform\n        Bits 0-3 specify one of 16 possible output transforms. Bits 4-7 specify one of 16 possible transforms to apply to\n        the usControl input. Bits 8 and 9 specify whether the usControl input should be inverted and/or bipolar. Bits 10-13\n        specify one of 16 possible transforms to apply to the usSource input. Bit 14 and 15 specify whether the usSource\n        input should be inverted and/or bipolar.\n       */\n        // Decode usTransform\n        const transform = (usTransform & 0x0f) as DLSTransform;\n\n        // Decode usControl\n        const controlTransform = ((usTransform >> 4) & 0x0f) as DLSTransform;\n        const controlBipolar = bitMaskToBool(usTransform, 8);\n        const controlInvert = bitMaskToBool(usTransform, 9);\n        const control = new ConnectionSource(\n            usControl as DLSSource,\n            controlTransform,\n            controlBipolar,\n            controlInvert\n        );\n\n        // Decode usSource\n        const sourceTransform = ((usTransform >> 10) & 0x0f) as DLSTransform;\n        const sourceBipolar = bitMaskToBool(usTransform, 14);\n        const sourceInvert = bitMaskToBool(usTransform, 15);\n\n        const source = new ConnectionSource(\n            usSource as DLSSource,\n            sourceTransform,\n            sourceBipolar,\n            sourceInvert\n        );\n\n        return new ConnectionBlock(\n            source,\n            control,\n            usDestination,\n            transform,\n            lScale\n        );\n    }\n\n    public static fromSFModulator(\n        m: Modulator,\n        articulation: DownloadableSoundsArticulation\n    ) {\n        const failed = (msg: string) => {\n            SpessaSynthWarn(\n                `Failed converting SF modulator into DLS:\\n ${m.toString()} \\n(${msg})`\n            );\n        };\n\n        if (m.transformType !== 0) {\n            failed(\"Absolute transform type is not supported\");\n            return;\n        }\n        // Do not write the default DLS effect modulators\n        if (\n            Modulator.isIdentical(m, DEFAULT_DLS_CHORUS, true) ||\n            Modulator.isIdentical(m, DEFAULT_DLS_REVERB, true)\n        ) {\n            return;\n        }\n        let source = ConnectionSource.fromSFSource(m.primarySource);\n        if (!source) {\n            failed(\"Invalid primary source\");\n            return;\n        }\n        let control = ConnectionSource.fromSFSource(m.secondarySource);\n        if (!control) {\n            failed(\"Invalid secondary source\");\n            return;\n        }\n        const dlsDestination = ConnectionBlock.fromSFDestination(\n            m.destination,\n            m.transformAmount\n        );\n        if (dlsDestination === undefined) {\n            failed(\"Invalid destination\");\n            return;\n        }\n        let amount = m.transformAmount;\n        let destination: DLSDestination;\n        if (typeof dlsDestination === \"number\") {\n            destination = dlsDestination;\n        } else {\n            destination = dlsDestination.destination;\n            amount = dlsDestination.amount;\n            /*\n             Check for a special case, for example mod wheel to vibLfoToPitch\n             comprises vibLFO source, mod wheel control and pitch destination.\n            */\n            if (dlsDestination.source !== dlsSources.none) {\n                if (\n                    control.source !== dlsSources.none &&\n                    source.source !== dlsSources.none\n                ) {\n                    failed(\n                        \"Articulation generators with secondary source are not supported\"\n                    );\n                    return;\n                }\n                // Move the source to control if needed\n                if (source.source !== dlsSources.none) {\n                    control = source;\n                }\n                source = new ConnectionSource(\n                    dlsDestination.source,\n                    modulatorCurveTypes.linear,\n                    dlsDestination.isBipolar\n                );\n            }\n        }\n        const bloc = new ConnectionBlock(\n            source,\n            control,\n            destination,\n            0,\n            amount << 16\n        );\n        articulation.connectionBlocks.push(bloc);\n    }\n\n    public static copyFrom(inputBlock: ConnectionBlock) {\n        return new ConnectionBlock(\n            ConnectionSource.copyFrom(inputBlock.source),\n            ConnectionSource.copyFrom(inputBlock.control),\n            inputBlock.destination,\n            inputBlock.transform,\n            inputBlock.scale\n        );\n    }\n\n    public static fromSFGenerator(\n        generator: Generator,\n        articulation: DownloadableSoundsArticulation\n    ) {\n        if (invalidGeneratorTypes.has(generator.generatorType)) {\n            return;\n        }\n\n        const failed = (msg: string) => {\n            SpessaSynthWarn(\n                `Failed converting SF2 generator into DLS:\\n ${generator.toString()} \\n(${msg})`\n            );\n        };\n\n        const dlsDestination = ConnectionBlock.fromSFDestination(\n            generator.generatorType,\n            generator.generatorValue\n        );\n        if (dlsDestination === undefined) {\n            failed(\"Invalid type\");\n            return;\n        }\n        const source = new ConnectionSource();\n        let destination: DLSDestination;\n        let amount = generator.generatorValue;\n\n        // Envelope generators are limited to 40 seconds,\n        // However the keyToEnv correction makes us use the full SF range.\n\n        if (typeof dlsDestination === \"number\") {\n            destination = dlsDestination;\n        } else {\n            destination = dlsDestination.destination;\n            amount = dlsDestination.amount;\n\n            source.source = dlsDestination.source;\n            source.bipolar = dlsDestination.isBipolar;\n        }\n\n        articulation.connectionBlocks.push(\n            new ConnectionBlock(\n                source,\n                new ConnectionSource(),\n                destination,\n                0,\n                amount << 16\n            )\n        );\n    }\n\n    private static fromSFDestination(\n        dest: GeneratorType,\n        amount: number\n    ):\n        | DLSDestination\n        | {\n              source: DLSSource;\n              destination: DLSDestination;\n              isBipolar: boolean;\n              amount: number;\n          }\n        | undefined {\n        switch (dest) {\n            default:\n                return undefined;\n\n            case generatorTypes.initialAttenuation:\n                // The amount does not get EMU corrected here, as this only applies to modulator attenuation\n                // The generator (affected) attenuation is handled in wsmp.\n                return {\n                    destination: dlsDestinations.gain,\n                    amount: -amount,\n                    isBipolar: false,\n                    source: dlsSources.none\n                };\n            case generatorTypes.fineTune:\n                return dlsDestinations.pitch;\n            case generatorTypes.pan:\n                return dlsDestinations.pan;\n            case generatorTypes.keyNum:\n                return dlsDestinations.keyNum;\n\n            case generatorTypes.reverbEffectsSend:\n                return dlsDestinations.reverbSend;\n            case generatorTypes.chorusEffectsSend:\n                return dlsDestinations.chorusSend;\n\n            case generatorTypes.freqModLFO:\n                return dlsDestinations.modLfoFreq;\n            case generatorTypes.delayModLFO:\n                return dlsDestinations.modLfoDelay;\n\n            case generatorTypes.delayVibLFO:\n                return dlsDestinations.vibLfoDelay;\n            case generatorTypes.freqVibLFO:\n                return dlsDestinations.vibLfoFreq;\n\n            case generatorTypes.delayVolEnv:\n                return dlsDestinations.volEnvDelay;\n            case generatorTypes.attackVolEnv:\n                return dlsDestinations.volEnvAttack;\n            case generatorTypes.holdVolEnv:\n                return dlsDestinations.volEnvHold;\n            case generatorTypes.decayVolEnv:\n                return dlsDestinations.volEnvDecay;\n            case generatorTypes.sustainVolEnv:\n                return {\n                    destination: dlsDestinations.volEnvSustain,\n                    amount: 1000 - amount,\n                    isBipolar: false,\n                    source: dlsSources.none\n                };\n            case generatorTypes.releaseVolEnv:\n                return dlsDestinations.volEnvRelease;\n\n            case generatorTypes.delayModEnv:\n                return dlsDestinations.modEnvDelay;\n            case generatorTypes.attackModEnv:\n                return dlsDestinations.modEnvAttack;\n            case generatorTypes.holdModEnv:\n                return dlsDestinations.modEnvHold;\n            case generatorTypes.decayModEnv:\n                return dlsDestinations.modEnvDecay;\n            case generatorTypes.sustainModEnv:\n                return {\n                    destination: dlsDestinations.modEnvSustain,\n                    amount: 1000 - amount,\n                    isBipolar: false,\n                    source: dlsSources.none\n                };\n            case generatorTypes.releaseModEnv:\n                return dlsDestinations.modEnvRelease;\n\n            case generatorTypes.initialFilterFc:\n                return dlsDestinations.filterCutoff;\n            case generatorTypes.initialFilterQ:\n                return dlsDestinations.filterQ;\n\n            // Mod env\n            case generatorTypes.modEnvToFilterFc:\n                return {\n                    source: dlsSources.modEnv,\n                    destination: dlsDestinations.filterCutoff,\n                    amount,\n                    isBipolar: false\n                };\n            case generatorTypes.modEnvToPitch:\n                return {\n                    source: dlsSources.modEnv,\n                    destination: dlsDestinations.pitch,\n                    amount,\n                    isBipolar: false\n                };\n\n            // Mod lfo\n            case generatorTypes.modLfoToFilterFc:\n                return {\n                    source: dlsSources.modLfo,\n                    destination: dlsDestinations.filterCutoff,\n                    amount,\n                    isBipolar: true\n                };\n            case generatorTypes.modLfoToVolume:\n                return {\n                    source: dlsSources.modLfo,\n                    destination: dlsDestinations.gain,\n                    amount,\n                    isBipolar: true\n                };\n            case generatorTypes.modLfoToPitch:\n                return {\n                    source: dlsSources.modLfo,\n                    destination: dlsDestinations.pitch,\n                    amount,\n                    isBipolar: true\n                };\n\n            // Vib lfo\n            case generatorTypes.vibLfoToPitch:\n                return {\n                    source: dlsSources.vibratoLfo,\n                    destination: dlsDestinations.pitch,\n                    amount,\n                    isBipolar: true\n                };\n\n            // Key to something\n            case generatorTypes.keyNumToVolEnvHold:\n                return {\n                    source: dlsSources.keyNum,\n                    destination: dlsDestinations.volEnvHold,\n                    amount,\n                    isBipolar: true\n                };\n            case generatorTypes.keyNumToVolEnvDecay:\n                return {\n                    source: dlsSources.keyNum,\n                    destination: dlsDestinations.volEnvDecay,\n                    amount,\n                    isBipolar: true\n                };\n            case generatorTypes.keyNumToModEnvHold:\n                return {\n                    source: dlsSources.keyNum,\n                    destination: dlsDestinations.modEnvHold,\n                    amount,\n                    isBipolar: true\n                };\n            case generatorTypes.keyNumToModEnvDecay:\n                return {\n                    source: dlsSources.keyNum,\n                    destination: dlsDestinations.modEnvDecay,\n                    amount,\n                    isBipolar: true\n                };\n\n            case generatorTypes.scaleTuning:\n                // Scale tuning is implemented in DLS via an articulator:\n                // KeyNum to relative pitch at 12,800 cents.\n                // Change that to scale tuning * 128.\n                // Therefore, a regular scale is still 12,800, half is 6400, etc.\n                return {\n                    source: dlsSources.keyNum,\n                    destination: dlsDestinations.pitch,\n                    amount: amount * 128,\n                    isBipolar: false // According to table 4, this should be false.\n                };\n        }\n    }\n\n    public toString() {\n        return (\n            `Source: ${this.source.toString()},\\n` +\n            `Control: ${this.control.toString()},\\n` +\n            `Scale: ${this.scale} >> 16 = ${this.shortScale},\\n` +\n            `Output transform: ${this.transformName}\\n` +\n            `Destination: ${this.destinationName}`\n        );\n    }\n\n    public write() {\n        const out = new IndexedByteArray(12);\n        writeWord(out, this.source.source);\n        writeWord(out, this.control.source);\n        writeWord(out, this.destination);\n        const transformEnum =\n            this.transform |\n            (this.control.toTransformFlag() << 4) |\n            (this.source.toTransformFlag() << 10);\n        writeWord(out, transformEnum);\n        writeDword(out, this.scale);\n        return out;\n    }\n\n    public toSFGenerator(zone: BasicZone) {\n        const destination = this.destination;\n        // SF2 uses 16-bit amounts, DLS uses 32-bit scale.\n        const value = this.shortScale;\n\n        switch (destination) {\n            default:\n                SpessaSynthInfo(\n                    `%cFailed converting DLS articulator into SF generator: %c${this.toString()}%c\\n(invalid destination)`,\n                    consoleColors.warn,\n                    consoleColors.value,\n                    consoleColors.unrecognized\n                );\n                return;\n\n            case dlsDestinations.pan:\n                zone.setGenerator(generatorTypes.pan, value);\n                break;\n            case dlsDestinations.gain:\n                // Turn to centibels and apply emu correction\n                zone.addToGenerator(\n                    generatorTypes.initialAttenuation,\n                    -value / 0.4\n                );\n                break;\n            case dlsDestinations.filterCutoff:\n                zone.setGenerator(generatorTypes.initialFilterFc, value);\n                break;\n            case dlsDestinations.filterQ:\n                zone.setGenerator(generatorTypes.initialFilterQ, value);\n                break;\n\n            // Mod LFO raw values it seems\n            case dlsDestinations.modLfoFreq:\n                zone.setGenerator(generatorTypes.freqModLFO, value);\n                break;\n            case dlsDestinations.modLfoDelay:\n                zone.setGenerator(generatorTypes.delayModLFO, value);\n                break;\n            case dlsDestinations.vibLfoFreq:\n                zone.setGenerator(generatorTypes.freqVibLFO, value);\n                break;\n            case dlsDestinations.vibLfoDelay:\n                zone.setGenerator(generatorTypes.delayVibLFO, value);\n                break;\n\n            // Vol. env: all times are timecents like sf2\n            case dlsDestinations.volEnvDelay:\n                zone.setGenerator(generatorTypes.delayVolEnv, value);\n                break;\n            case dlsDestinations.volEnvAttack:\n                zone.setGenerator(generatorTypes.attackVolEnv, value);\n                break;\n            case dlsDestinations.volEnvHold:\n                zone.setGenerator(generatorTypes.holdVolEnv, value);\n                break;\n            case dlsDestinations.volEnvDecay:\n                zone.setGenerator(generatorTypes.decayVolEnv, value);\n                break;\n            case dlsDestinations.volEnvRelease:\n                zone.setGenerator(generatorTypes.releaseVolEnv, value);\n                break;\n            case dlsDestinations.volEnvSustain:\n                // Gain seems to be (1000 - value) = sustain cB\n                zone.setGenerator(generatorTypes.sustainVolEnv, 1000 - value);\n                break;\n\n            // Mod env\n            case dlsDestinations.modEnvDelay:\n                zone.setGenerator(generatorTypes.delayModEnv, value);\n                break;\n            case dlsDestinations.modEnvAttack:\n                zone.setGenerator(generatorTypes.attackModEnv, value);\n                break;\n            case dlsDestinations.modEnvHold:\n                zone.setGenerator(generatorTypes.holdModEnv, value);\n                break;\n            case dlsDestinations.modEnvDecay:\n                zone.setGenerator(generatorTypes.decayModEnv, value);\n                break;\n            case dlsDestinations.modEnvRelease:\n                zone.setGenerator(generatorTypes.releaseModEnv, value);\n                break;\n            case dlsDestinations.modEnvSustain:\n                // DLS uses 0.1%, SF uses 0.1%\n                zone.setGenerator(generatorTypes.sustainModEnv, 1000 - value);\n                break;\n\n            case dlsDestinations.reverbSend:\n                zone.setGenerator(generatorTypes.reverbEffectsSend, value);\n                break;\n            case dlsDestinations.chorusSend:\n                zone.setGenerator(generatorTypes.chorusEffectsSend, value);\n                break;\n            case dlsDestinations.pitch:\n                zone.fineTuning += value;\n                break;\n        }\n    }\n\n    public toSFModulator(zone: BasicZone) {\n        // Output modulator variables\n        let amount = this.shortScale;\n        let modulatorDestination: GeneratorType;\n        let primarySource: ModulatorSource | undefined;\n        let secondarySource = new ModulatorSource();\n\n        const failed = (msg: string) => {\n            SpessaSynthInfo(\n                `%cFailed converting DLS articulator into SF2:\\n %c${this.toString()}%c\\n(${msg})`,\n                consoleColors.warn,\n                consoleColors.value,\n                consoleColors.unrecognized\n            );\n        };\n\n        const specialDestination = this.toCombinedSFDestination();\n        if (specialDestination) {\n            /*\n             Special destination detected.\n             This means modLfoToPitch for example, as an SF modulator like\n\n             CC#1 -> | x50 | -> modLfoToPitch\n\n             In DLS is:\n\n             Mod LFO -> | x50 | -> pitch\n             CC#1    -> |     |\n            */\n            modulatorDestination = specialDestination;\n            const controlSF = this.control.toSFSource();\n            if (!controlSF) {\n                failed(\"Invalid control\");\n                return;\n            }\n            primarySource = controlSF;\n        } else {\n            // Convert destination\n            const convertedDestination = this.toSFDestination();\n            if (!convertedDestination) {\n                // Cannot be a valid modulator\n                failed(\"Invalid destination\");\n                return;\n            }\n            // The conversion may specify an adjusted value\n            if (typeof convertedDestination === \"object\") {\n                amount = convertedDestination.newAmount;\n                modulatorDestination = convertedDestination.gen;\n            } else {\n                modulatorDestination = convertedDestination;\n            }\n            const convertedPrimary = this.source.toSFSource();\n            if (!convertedPrimary) {\n                failed(\"Invalid source\");\n                return;\n            }\n            primarySource = convertedPrimary;\n\n            const convertedSecondary = this.control.toSFSource();\n            if (!convertedSecondary) {\n                failed(\"Invalid control\");\n                return;\n            }\n            secondarySource = convertedSecondary;\n        }\n        // Output transform is ignored as it's not a thing in soundfont format\n        // Unless the curve type of source is linear, then output is copied.\n        // Testcase: Fury.dls (sets concave output transform for the key to attenuation)\n        if (\n            this.transform !== modulatorCurveTypes.linear &&\n            primarySource.curveType === modulatorCurveTypes.linear\n        ) {\n            primarySource.curveType = this.transform;\n        }\n\n        if (modulatorDestination === generatorTypes.initialAttenuation) {\n            if (\n                this.source.source === dlsSources.velocity ||\n                this.source.source === dlsSources.volume ||\n                this.source.source === dlsSources.expression\n            ) {\n                /*\n                Some DLS banks (example: Fury.dls or 1 - House.rmi) only specify the output transform,\n                while completely omitting the invert flag for this articulator.\n                This results in the modulator rendering the voice inaudible, as the attenuation increases with velocity,\n                which also conflicts with the default velToAtt modulator\n                Yet most software seems to load them fine, so we invert it here.\n                 */\n                primarySource.isNegative = true;\n            }\n\n            // A corrupted rendition of gm.dls was found under\n            // https://sembiance.com/fileFormatSamples/audio/downloadableSoundBank/\n            // Name: (GM.dls)\n            // Which specifies a whopping 32,768 centibels of attenuation\n            amount = Math.min(960, Math.max(0, amount));\n        }\n\n        // Get the modulator!\n        const mod = new Modulator(\n            primarySource,\n            secondarySource,\n            modulatorDestination,\n            amount,\n            0\n        );\n        zone.addModulators(mod);\n    }\n\n    /**\n     * Checks for an SF generator that consists of DLS source and destination (such as mod LFO and pitch)\n     * @returns either a matching SF generator or nothing.\n     */\n    public toCombinedSFDestination(): GeneratorType | undefined {\n        const source = this.source.source;\n        const destination = this.destination;\n        if (\n            source === dlsSources.vibratoLfo &&\n            destination === dlsDestinations.pitch\n        ) {\n            // Vibrato lfo to pitch\n            return generatorTypes.vibLfoToPitch;\n        } else if (\n            source === dlsSources.modLfo &&\n            destination === dlsDestinations.pitch\n        ) {\n            // Mod lfo to pitch\n            return generatorTypes.modLfoToPitch;\n        } else if (\n            source === dlsSources.modLfo &&\n            destination === dlsDestinations.filterCutoff\n        ) {\n            // Mod lfo to filter\n            return generatorTypes.modLfoToFilterFc;\n        } else if (\n            source === dlsSources.modLfo &&\n            destination === dlsDestinations.gain\n        ) {\n            // Mod lfo to volume\n            return generatorTypes.modLfoToVolume;\n        } else if (\n            source === dlsSources.modEnv &&\n            destination === dlsDestinations.filterCutoff\n        ) {\n            // Mod envelope to filter\n            return generatorTypes.modEnvToFilterFc;\n        } else if (\n            source === dlsSources.modEnv &&\n            destination === dlsDestinations.pitch\n        ) {\n            // Mod envelope to pitch\n            return generatorTypes.modEnvToPitch;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Converts DLS destination of this block to an SF2 one, also with the correct amount.\n     * @private\n     */\n    private toSFDestination():\n        | GeneratorType\n        | undefined\n        | { gen: GeneratorType; newAmount: number } {\n        const amount = this.shortScale;\n        switch (this.destination) {\n            default:\n            case dlsDestinations.none:\n                return undefined;\n            case dlsDestinations.pan:\n                return generatorTypes.pan;\n            case dlsDestinations.gain:\n                return {\n                    // DLS uses gain, SF uses attenuation\n                    gen: generatorTypes.initialAttenuation,\n                    newAmount: -amount\n                };\n            case dlsDestinations.pitch:\n                return generatorTypes.fineTune;\n            case dlsDestinations.keyNum:\n                return generatorTypes.overridingRootKey;\n\n            // Vol env\n            case dlsDestinations.volEnvDelay:\n                return generatorTypes.delayVolEnv;\n            case dlsDestinations.volEnvAttack:\n                return generatorTypes.attackVolEnv;\n            case dlsDestinations.volEnvHold:\n                return generatorTypes.holdVolEnv;\n            case dlsDestinations.volEnvDecay:\n                return generatorTypes.decayVolEnv;\n            case dlsDestinations.volEnvSustain:\n                return {\n                    gen: generatorTypes.sustainVolEnv,\n                    newAmount: 1000 - amount\n                };\n            case dlsDestinations.volEnvRelease:\n                return generatorTypes.releaseVolEnv;\n\n            // Mod env\n            case dlsDestinations.modEnvDelay:\n                return generatorTypes.delayModEnv;\n            case dlsDestinations.modEnvAttack:\n                return generatorTypes.attackModEnv;\n            case dlsDestinations.modEnvHold:\n                return generatorTypes.holdModEnv;\n            case dlsDestinations.modEnvDecay:\n                return generatorTypes.decayModEnv;\n            case dlsDestinations.modEnvSustain:\n                return {\n                    gen: generatorTypes.sustainModEnv,\n                    newAmount: 1000 - amount\n                };\n            case dlsDestinations.modEnvRelease:\n                return generatorTypes.releaseModEnv;\n\n            case dlsDestinations.filterCutoff:\n                return generatorTypes.initialFilterFc;\n            case dlsDestinations.filterQ:\n                return generatorTypes.initialFilterQ;\n            case dlsDestinations.chorusSend:\n                return generatorTypes.chorusEffectsSend;\n            case dlsDestinations.reverbSend:\n                return generatorTypes.reverbEffectsSend;\n\n            // Lfo\n            case dlsDestinations.modLfoFreq:\n                return generatorTypes.freqModLFO;\n            case dlsDestinations.modLfoDelay:\n                return generatorTypes.delayModLFO;\n            case dlsDestinations.vibLfoFreq:\n                return generatorTypes.freqVibLFO;\n            case dlsDestinations.vibLfoDelay:\n                return generatorTypes.delayVibLFO;\n        }\n    }\n}\n", "import {\n    type DLSDestination,\n    dlsDestinations,\n    dlsSources,\n    type GeneratorType,\n    generatorTypes\n} from \"../enums\";\nimport {\n    findRIFFListType,\n    readRIFFChunk,\n    type RIFFChunk,\n    writeRIFFChunkParts,\n    writeRIFFChunkRaw\n} from \"../../utils/riff_chunk\";\nimport {\n    readLittleEndianIndexed,\n    writeDword\n} from \"../../utils/byte_functions/little_endian\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { DLSVerifier } from \"./dls_verifier\";\nimport { BasicZone } from \"../basic_soundbank/basic_zone\";\nimport { BasicInstrumentZone, Modulator } from \"../exports\";\nimport { SpessaSynthWarn } from \"../../utils/loggin\";\nimport {\n    DLS_1_NO_VIBRATO_MOD,\n    DLS_1_NO_VIBRATO_PRESSURE\n} from \"./default_dls_modulators\";\nimport { ConnectionBlock } from \"./connection_block\";\n\ntype KeyToEnv =\n    | typeof generatorTypes.keyNumToModEnvDecay\n    | typeof generatorTypes.keyNumToModEnvHold\n    | typeof generatorTypes.keyNumToVolEnvDecay\n    | typeof generatorTypes.keyNumToVolEnvHold;\n\nexport class DownloadableSoundsArticulation extends DLSVerifier {\n    public readonly connectionBlocks = new Array<ConnectionBlock>();\n    public mode: \"dls1\" | \"dls2\" = \"dls2\";\n    public get length() {\n        return this.connectionBlocks.length;\n    }\n\n    public copyFrom(inputArticulation: DownloadableSoundsArticulation) {\n        this.mode = inputArticulation.mode;\n        inputArticulation.connectionBlocks.forEach((block) => {\n            this.connectionBlocks.push(ConnectionBlock.copyFrom(block));\n        });\n    }\n\n    public fromSFZone(z: BasicInstrumentZone) {\n        this.mode = \"dls2\";\n\n        // Copy to avoid changing the input zone\n        const zone = new BasicZone();\n        zone.copyFrom(z);\n\n        // Read_articulation.ts:\n        // According to viena and another strange (with modulators) rendition of gm.dls in sf2,\n        // It shall be divided by -128,\n        // And a strange correction needs to be applied to the real value:\n        // Real + (60 / 128) * scale\n        // We do this here.\n        for (const relativeGenerator of zone.generators) {\n            let absoluteCounterpart: GeneratorType | undefined = undefined;\n            switch (relativeGenerator.generatorType) {\n                default:\n                    continue;\n\n                case generatorTypes.keyNumToVolEnvDecay:\n                    absoluteCounterpart = generatorTypes.decayVolEnv;\n                    break;\n                case generatorTypes.keyNumToVolEnvHold:\n                    absoluteCounterpart = generatorTypes.holdVolEnv;\n                    break;\n                case generatorTypes.keyNumToModEnvDecay:\n                    absoluteCounterpart = generatorTypes.decayModEnv;\n                    break;\n                case generatorTypes.keyNumToModEnvHold:\n                    absoluteCounterpart = generatorTypes.holdModEnv;\n            }\n            const absoluteValue = zone.getGenerator(\n                absoluteCounterpart,\n                undefined\n            );\n            const dlsRelative = relativeGenerator.generatorValue * -128;\n\n            if (absoluteValue === undefined) {\n                // There's no absolute generator here.\n                continue;\n            }\n            const subtraction = (60 / 128) * dlsRelative;\n            const newAbsolute = absoluteValue - subtraction;\n            zone.setGenerator(\n                relativeGenerator.generatorType,\n                dlsRelative,\n                false\n            );\n            zone.setGenerator(absoluteCounterpart, newAbsolute, false);\n        }\n        for (const generator of zone.generators) {\n            ConnectionBlock.fromSFGenerator(generator, this);\n        }\n        for (const modulator of zone.modulators) {\n            ConnectionBlock.fromSFModulator(modulator, this);\n        }\n    }\n\n    /**\n     * Chunk list for the region/instrument (containing lar2 or lart)\n     * @param chunks\n     */\n    public read(chunks: RIFFChunk[]) {\n        const lart = findRIFFListType(chunks, \"lart\");\n        const lar2 = findRIFFListType(chunks, \"lar2\");\n\n        if (lart) {\n            this.mode = \"dls1\";\n            while (lart.data.currentIndex < lart.data.length) {\n                const art1 = readRIFFChunk(lart.data);\n                // Note:\n                // DLS Specification says that lar2 should only have art2, but a DirectMusic Producer example\n                // \"FarmGame.dls\" has 'art1' in there.\n                // Hence, we allow art2 in lart and art1 in lar2.\n                DownloadableSoundsArticulation.verifyHeader(\n                    art1,\n                    \"art1\",\n                    \"art2\"\n                );\n                const artData = art1.data;\n                const cbSize = readLittleEndianIndexed(artData, 4);\n                if (cbSize !== 8) {\n                    SpessaSynthWarn(\n                        `CbSize in articulation mismatch. Expected 8, got ${cbSize}`\n                    );\n                }\n                const connectionsAmount = readLittleEndianIndexed(artData, 4);\n                for (let i = 0; i < connectionsAmount; i++) {\n                    this.connectionBlocks.push(ConnectionBlock.read(artData));\n                }\n            }\n        } else if (lar2) {\n            this.mode = \"dls2\";\n            while (lar2.data.currentIndex < lar2.data.length) {\n                const art2 = readRIFFChunk(lar2.data);\n                // Note:\n                // DLS Specification says that lar2 should only have art2, but a DirectMusic Producer example\n                // \"FarmGame.dls\" has 'art1' in there.\n                // Hence, we allow art2 in lart and art1 in lar2.\n                DownloadableSoundsArticulation.verifyHeader(\n                    art2,\n                    \"art2\",\n                    \"art1\"\n                );\n                const artData = art2.data;\n                const cbSize = readLittleEndianIndexed(artData, 4);\n                if (cbSize !== 8) {\n                    SpessaSynthWarn(\n                        `CbSize in articulation mismatch. Expected 8, got ${cbSize}`\n                    );\n                }\n                const connectionsAmount = readLittleEndianIndexed(artData, 4);\n                for (let i = 0; i < connectionsAmount; i++) {\n                    this.connectionBlocks.push(ConnectionBlock.read(artData));\n                }\n            }\n        }\n    }\n\n    /**\n     * Note: this writes \"lar2\", not just \"art2\"\n     */\n    public write() {\n        const art2Data = new IndexedByteArray(8);\n        writeDword(art2Data, 8); // CbSize\n        writeDword(art2Data, this.connectionBlocks.length); // CConnectionBlocks\n\n        const out = this.connectionBlocks.map((a) => a.write());\n        const art2 = writeRIFFChunkParts(\n            this.mode === \"dls2\" ? \"art2\" : \"art1\",\n            [art2Data, ...out]\n        );\n        return writeRIFFChunkRaw(\n            this.mode === \"dls2\" ? \"lar2\" : \"lart\",\n            art2,\n            false,\n            true\n        );\n    }\n\n    /**\n     * Converts DLS articulation into an SF zone.\n     * @param zone The zone to write to.\n     */\n    public toSFZone(zone: BasicZone) {\n        const applyKeyToCorrection = (\n            value: number,\n            keyToGen: KeyToEnv,\n            realGen: GeneratorType,\n            dlsDestination: DLSDestination\n        ) => {\n            // According to viena and another strange (with modulators) rendition of gm.dls in sf2,\n            // It shall be divided by -128\n            // And a strange correction needs to be applied to the real (generator) value:\n            // Real + (60 / 128) * scale\n            // Where real means the actual generator (e.g. decayVolEnv\n            // And scale means the keyNumToVolEnvDecay\n            const keyToGenValue = value / -128;\n            zone.setGenerator(keyToGen, keyToGenValue);\n            // Airfont 340 fix\n            if (keyToGenValue <= 120) {\n                // Apply correction\n                const correction = Math.round((60 / 128) * value);\n\n                const realValueConnection = this.connectionBlocks.find(\n                    (block) =>\n                        block.isStaticParameter &&\n                        block.destination === dlsDestination\n                );\n                if (realValueConnection) {\n                    // Overwrite existing\n                    zone.setGenerator(\n                        realGen,\n                        correction + realValueConnection.shortScale\n                    );\n                }\n            }\n        };\n\n        for (const connection of this.connectionBlocks) {\n            // SF2 uses 16-bit amounts, DLS uses 32-bit scale.\n            const amount = connection.shortScale;\n\n            const source = connection.source.source;\n            const control = connection.control.source;\n            const destination = connection.destination;\n\n            // If source and control are both zero, it's a generator\n            if (connection.isStaticParameter) {\n                connection.toSFGenerator(zone);\n                continue;\n            }\n            // A few special cases which are generators\n            if (control === dlsSources.none) {\n                // The keyNum source\n                // It usually requires a special treatment\n                if (source === dlsSources.keyNum) {\n                    // Scale tuning\n                    if (destination === dlsDestinations.pitch) {\n                        zone.setGenerator(\n                            generatorTypes.scaleTuning,\n                            amount / 128\n                        );\n                        continue;\n                    }\n                    if (\n                        destination === dlsDestinations.modEnvHold ||\n                        destination === dlsDestinations.modEnvDecay ||\n                        destination === dlsDestinations.volEnvHold ||\n                        destination == dlsDestinations.volEnvDecay\n                    ) {\n                        // Skip, will be applied later\n                        continue;\n                    }\n                } else {\n                    const specialGen = connection.toCombinedSFDestination();\n                    if (specialGen) {\n                        zone.setGenerator(specialGen, amount);\n                        continue;\n                    }\n                }\n            }\n            // Modulator, transform!\n            connection.toSFModulator(zone);\n        }\n\n        // It seems that dls 1 does not have vibrato lfo, so we shall disable it\n        if (this.mode === \"dls1\") {\n            zone.addModulators(\n                // Modulation to vibrato\n                Modulator.copyFrom(DLS_1_NO_VIBRATO_MOD),\n                Modulator.copyFrom(DLS_1_NO_VIBRATO_PRESSURE)\n                // Pressure to vibrato\n            );\n        }\n\n        // Perform correction for the key to something generators\n        for (const connection of this.connectionBlocks) {\n            if (connection.source.source !== dlsSources.keyNum) {\n                continue;\n            }\n            const generatorAmount = connection.shortScale;\n            switch (connection.destination) {\n                default:\n                    continue;\n\n                case dlsDestinations.volEnvHold:\n                    // Key to vol env hold\n                    applyKeyToCorrection(\n                        generatorAmount,\n                        generatorTypes.keyNumToVolEnvHold,\n                        generatorTypes.holdVolEnv,\n                        dlsDestinations.volEnvHold\n                    );\n                    break;\n\n                case dlsDestinations.volEnvDecay:\n                    applyKeyToCorrection(\n                        generatorAmount,\n                        generatorTypes.keyNumToVolEnvDecay,\n                        generatorTypes.decayVolEnv,\n                        dlsDestinations.volEnvDecay\n                    );\n                    break;\n\n                case dlsDestinations.modEnvHold:\n                    applyKeyToCorrection(\n                        generatorAmount,\n                        generatorTypes.keyNumToModEnvHold,\n                        generatorTypes.holdModEnv,\n                        dlsDestinations.modEnvHold\n                    );\n                    break;\n\n                case dlsDestinations.modEnvDecay:\n                    applyKeyToCorrection(\n                        generatorAmount,\n                        generatorTypes.keyNumToModEnvDecay,\n                        generatorTypes.decayModEnv,\n                        dlsDestinations.modEnvDecay\n                    );\n                    break;\n            }\n        }\n    }\n}\n", "import { type RIFFChunk, writeRIFFChunkRaw } from \"../../utils/riff_chunk\";\nimport {\n    readLittleEndianIndexed,\n    writeDword,\n    writeWord\n} from \"../../utils/byte_functions/little_endian\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport type { BasicSample } from \"../basic_soundbank/basic_sample\";\nimport type { BasicInstrumentZone } from \"../basic_soundbank/basic_instrument_zone\";\nimport { sampleTypes } from \"../enums\";\n\nexport class WaveLink {\n    /**\n     * Specifies the channel placement of the sample. This is used to place mono sounds within a\n     * stereo pair or for multi-track placement. Each bit position within the ulChannel field specifies\n     * a channel placement with bit 0 specifying a mono sample or the left channel of a stereo file.\n     */\n    public channel = 1;\n\n    /**\n     * Specifies the 0 based index of the cue entry in the wave pool table.\n     */\n    public tableIndex: number;\n\n    /**\n     * Specifies flag options for this wave link. All bits not defined must be set to 0.\n     */\n    public fusOptions = 0;\n\n    /**\n     * Specifies a group number for samples which are phase locked. All waves in a set of wave\n     * links with the same group are phase locked and follow the wave in the group with the\n     * F_WAVELINK_PHASE_MASTER flag set. If a wave is not a member of a phase locked\n     * group, this value should be set to 0.\n     */\n    public phaseGroup = 0;\n\n    public constructor(tableIndex: number) {\n        this.tableIndex = tableIndex;\n    }\n\n    public static copyFrom(waveLink: WaveLink) {\n        const wlnk = new WaveLink(waveLink.tableIndex);\n        wlnk.channel = waveLink.channel;\n        wlnk.phaseGroup = waveLink.phaseGroup;\n        wlnk.fusOptions = waveLink.fusOptions;\n        return wlnk;\n    }\n\n    public static read(chunk: RIFFChunk) {\n        // Flags\n        const fusOptions = readLittleEndianIndexed(chunk.data, 2);\n        // Phase group\n        const phaseGroup = readLittleEndianIndexed(chunk.data, 2);\n        // Channel\n        const ulChannel = readLittleEndianIndexed(chunk.data, 4);\n        // Table index\n        const ulTableIndex = readLittleEndianIndexed(chunk.data, 4);\n        const wlnk = new WaveLink(ulTableIndex);\n        wlnk.channel = ulChannel;\n        wlnk.fusOptions = fusOptions;\n        wlnk.phaseGroup = phaseGroup;\n        return wlnk;\n    }\n\n    public static fromSFZone(\n        samples: BasicSample[],\n        zone: BasicInstrumentZone\n    ) {\n        const index = samples.indexOf(zone.sample);\n        if (index < 0) {\n            throw new Error(\n                `Wave link error: Sample ${zone.sample.name} does not exist in the sample list.`\n            );\n        }\n        const waveLink = new WaveLink(index);\n        switch (zone.sample.sampleType) {\n            default:\n            case sampleTypes.leftSample:\n            case sampleTypes.monoSample:\n                // Left (or mono)\n                waveLink.channel = 1 << 0;\n                break;\n\n            case sampleTypes.rightSample:\n                // Right channel\n                waveLink.channel = 1 << 1;\n        }\n        return waveLink;\n    }\n\n    public write() {\n        const wlnkData = new IndexedByteArray(12);\n        writeWord(wlnkData, this.fusOptions); // FusOptions\n        writeWord(wlnkData, this.phaseGroup); // UsPhaseGroup\n        writeDword(wlnkData, this.channel); // UlChannel\n        writeDword(wlnkData, this.tableIndex); // UlTableIndex\n        return writeRIFFChunkRaw(\"wlnk\", wlnkData);\n    }\n}\n", "import { DownloadableSoundsArticulation } from \"./articulation\";\nimport type { GenericRange } from \"../types\";\nimport { WaveSample } from \"./wave_sample\";\nimport { WaveLink } from \"./wave_link\";\nimport {\n    type RIFFChunk,\n    writeRIFFChunkParts,\n    writeRIFFChunkRaw\n} from \"../../utils/riff_chunk\";\nimport { SpessaSynthWarn } from \"../../utils/loggin\";\nimport {\n    readLittleEndianIndexed,\n    writeWord\n} from \"../../utils/byte_functions/little_endian\";\nimport { DLSVerifier } from \"./dls_verifier\";\nimport type { DownloadableSoundsSample } from \"./sample\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport type { BasicInstrumentZone } from \"../basic_soundbank/basic_instrument_zone\";\nimport type { BasicSample } from \"../basic_soundbank/basic_sample\";\nimport type { BasicInstrument } from \"../basic_soundbank/basic_instrument\";\nimport {\n    generatorLimits,\n    generatorTypes\n} from \"../basic_soundbank/generator_types\";\n\nexport class DownloadableSoundsRegion extends DLSVerifier {\n    public readonly articulation = new DownloadableSoundsArticulation();\n    /**\n     * Specifies the key range for this region.\n     */\n    public keyRange: GenericRange = {\n        min: 0,\n        max: 127\n    };\n    /**\n     * Specifies the velocity range for this region.\n     */\n    public velRange: GenericRange = {\n        min: 0,\n        max: 127\n    };\n\n    /**\n     * Specifies the key group for a drum instrument. Key group values allow multiple regions\n     * within a drum instrument to belong to the same \"key group.\" If a synthesis engine is\n     * instructed to play a note with a key group setting and any other notes are currently playing\n     * with this same key group, then the synthesis engine should turn off all notes with the same\n     * key group value as soon as possible.\n     */\n    public keyGroup = 0;\n\n    /**\n     * Specifies flag options for the synthesis of this region.\n     */\n    public fusOptions = 0;\n\n    /**\n     * Indicates the layer of this region for editing purposes. This field facilitates the\n     * organization of overlapping regions into layers for display to the user of a DLS sound editor.\n     * For example, if a piano sound and a string section are overlapped to create a piano/string pad,\n     * all the regions of the piano might be labeled as layer 1, and all the regions of the string\n     * section might be labeled as layer 2\n     */\n    public usLayer = 0;\n\n    public readonly waveSample: WaveSample;\n    public readonly waveLink: WaveLink;\n\n    public constructor(waveLink: WaveLink, waveSample: WaveSample) {\n        super();\n        this.waveSample = waveSample;\n        this.waveLink = waveLink;\n    }\n\n    public static copyFrom(inputRegion: DownloadableSoundsRegion) {\n        const outputRegion = new DownloadableSoundsRegion(\n            WaveLink.copyFrom(inputRegion.waveLink),\n            WaveSample.copyFrom(inputRegion.waveSample)\n        );\n        outputRegion.keyGroup = inputRegion.keyGroup;\n        outputRegion.keyRange = { ...inputRegion.keyRange };\n        outputRegion.velRange = { ...inputRegion.velRange };\n        outputRegion.usLayer = inputRegion.usLayer;\n        outputRegion.fusOptions = inputRegion.fusOptions;\n        outputRegion.articulation.copyFrom(inputRegion.articulation);\n        return outputRegion;\n    }\n\n    public static read(samples: DownloadableSoundsSample[], chunk: RIFFChunk) {\n        const regionChunks = this.verifyAndReadList(chunk, \"rgn \", \"rgn2\");\n        // Wsmp: wave sample chunk\n        const waveSampleChunk = regionChunks.find((c) => c.header === \"wsmp\");\n        let waveSample = waveSampleChunk\n            ? WaveSample.read(waveSampleChunk)\n            : undefined;\n\n        // Wlnk: wave link chunk\n        const waveLinkChunk = regionChunks.find((c) => c.header === \"wlnk\");\n        if (!waveLinkChunk) {\n            // No wave link means no sample. What? Why is it even here then?\n            SpessaSynthWarn(\n                \"Invalid DLS region: missing 'wlnk' chunk! Discarding...\"\n            );\n            return;\n        }\n        const waveLink = WaveLink.read(waveLinkChunk);\n\n        // Region header\n        const regionHeader = regionChunks.find((c) => c.header === \"rgnh\");\n        if (!regionHeader) {\n            SpessaSynthWarn(\n                \"Invalid DLS region: missing 'rgnh' chunk! Discarding...\"\n            );\n            return;\n        }\n\n        const sample = samples[waveLink.tableIndex];\n        if (!sample) {\n            DownloadableSoundsRegion.parsingError(\n                `Invalid sample index: ${waveLink.tableIndex}. Samples available: ${samples.length}`\n            );\n        }\n        waveSample ??= sample.waveSample;\n\n        const region = new DownloadableSoundsRegion(waveLink, waveSample);\n\n        // Key range\n        const keyMin = readLittleEndianIndexed(regionHeader.data, 2);\n        const keyMax = readLittleEndianIndexed(regionHeader.data, 2);\n        // Vel range\n        let velMin = readLittleEndianIndexed(regionHeader.data, 2);\n        let velMax = readLittleEndianIndexed(regionHeader.data, 2);\n\n        // A fix for not cool files\n        // Cannot do the same to key zones sadly\n        if (velMin === 0 && velMax === 0) {\n            velMax = 127;\n            velMin = 0;\n        }\n        region.keyRange.max = keyMax;\n        region.keyRange.min = keyMin;\n\n        region.velRange.max = velMax;\n        region.velRange.min = velMin;\n\n        // FusOptions\n        region.fusOptions = readLittleEndianIndexed(regionHeader.data, 2);\n        // KeyGroup: essentially exclusive class\n        region.keyGroup = readLittleEndianIndexed(regionHeader.data, 2);\n\n        // UsLayer\n        if (regionHeader.data.length - regionHeader.data.currentIndex >= 2) {\n            region.usLayer = readLittleEndianIndexed(regionHeader.data, 2);\n        }\n\n        region.articulation.read(regionChunks);\n        return region;\n    }\n\n    public static fromSFZone(\n        zone: BasicInstrumentZone,\n        samples: BasicSample[]\n    ) {\n        const waveSample = WaveSample.fromSFZone(zone);\n\n        const waveLink = WaveLink.fromSFZone(samples, zone);\n\n        const region = new DownloadableSoundsRegion(waveLink, waveSample);\n\n        // Assign ranges\n        region.keyRange.min = Math.max(zone.keyRange.min, 0);\n        region.keyRange.max = zone.keyRange.max;\n        region.velRange.min = Math.max(zone.velRange.min, 0);\n        region.velRange.max = zone.velRange.max;\n\n        // KeyGroup (exclusive class)\n        region.keyGroup = zone.getGenerator(generatorTypes.exclusiveClass, 0);\n        region.articulation.fromSFZone(zone);\n        return region;\n    }\n\n    public write() {\n        // In that order!\n        const chunks = [\n            this.writeHeader(),\n            this.waveSample.write(),\n            this.waveLink.write(),\n            this.articulation.write()\n        ];\n        return writeRIFFChunkParts(\"rgn2\", chunks, true);\n    }\n\n    public toSFZone(\n        instrument: BasicInstrument,\n        samples: BasicSample[]\n    ): BasicInstrumentZone {\n        const sample = samples[this.waveLink.tableIndex];\n        if (!sample) {\n            DownloadableSoundsRegion.parsingError(\n                `Invalid sample index: ${this.waveLink.tableIndex}`\n            );\n        }\n        const zone = instrument.createZone(sample);\n        zone.keyRange = this.keyRange;\n        zone.velRange = this.velRange;\n        // If the zones are default (0-127), set to -1 as \"not set\"\n        if (this.keyRange.max === 127 && this.keyRange.min === 0) {\n            zone.keyRange.min = -1;\n        }\n        if (this.velRange.max === 127 && this.velRange.min === 0) {\n            zone.velRange.min = -1;\n        }\n\n        // KeyGroup: essentially exclusive class\n        if (this.keyGroup !== 0) {\n            zone.setGenerator(generatorTypes.exclusiveClass, this.keyGroup);\n        }\n\n        this.waveSample.toSFZone(zone, sample);\n        this.articulation.toSFZone(zone);\n        // Remove generators with default values\n        zone.generators = zone.generators.filter(\n            (g) => g.generatorValue !== generatorLimits[g.generatorType].def\n        );\n        return zone;\n    }\n\n    private writeHeader() {\n        // Region header\n        const rgnhData = new IndexedByteArray(12);\n        // KeyRange\n        writeWord(rgnhData, Math.max(this.keyRange.min, 0));\n        writeWord(rgnhData, this.keyRange.max);\n        // VelRange\n        writeWord(rgnhData, Math.max(this.velRange.min, 0));\n        writeWord(rgnhData, this.velRange.max);\n        writeWord(rgnhData, this.fusOptions);\n        // KeyGroup (exclusive class)\n        writeWord(rgnhData, this.keyGroup);\n        // UsLayer\n        writeWord(rgnhData, this.usLayer);\n        return writeRIFFChunkRaw(\"rgnh\", rgnhData);\n    }\n}\n", "import { DownloadableSoundsArticulation } from \"./articulation\";\nimport { DownloadableSoundsRegion } from \"./region\";\nimport { type MIDIPatchNamed } from \"../basic_soundbank/midi_patch\";\nimport {\n    findRIFFListType,\n    readRIFFChunk,\n    type RIFFChunk,\n    writeRIFFChunkParts,\n    writeRIFFChunkRaw\n} from \"../../utils/riff_chunk\";\nimport { getStringBytes, readBinaryStringIndexed } from \"../../utils/byte_functions/string\";\nimport { SpessaSynthGroup, SpessaSynthGroupCollapsed, SpessaSynthGroupEnd } from \"../../utils/loggin\";\nimport { readLittleEndianIndexed, writeDword } from \"../../utils/byte_functions/little_endian\";\nimport { consoleColors } from \"../../utils/other\";\nimport { DLSVerifier } from \"./dls_verifier\";\nimport type { DLSChunkFourCC } from \"../types\";\nimport type { DownloadableSoundsSample } from \"./sample\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { BasicPreset } from \"../basic_soundbank/basic_preset\";\nimport { BasicInstrument } from \"../basic_soundbank/basic_instrument\";\nimport { BasicSample, BasicSoundBank, generatorLimits, generatorTypes, Modulator } from \"../exports\";\nimport { DEFAULT_DLS_CHORUS, DEFAULT_DLS_REVERB } from \"./default_dls_modulators\";\n\n/**\n * Represents a proper DLS instrument, with regions and articulation.\n * DLS\n */\nexport class DownloadableSoundsInstrument\n    extends DLSVerifier\n    implements MIDIPatchNamed\n{\n    public readonly articulation = new DownloadableSoundsArticulation();\n    public readonly regions = new Array<DownloadableSoundsRegion>();\n    public name = \"Unnamed\";\n    public bankLSB = 0;\n    public bankMSB = 0;\n    public isGMGSDrum = false;\n    public program = 0;\n\n    public static copyFrom(inputInstrument: DownloadableSoundsInstrument) {\n        const outputInstrument = new DownloadableSoundsInstrument();\n        outputInstrument.name = inputInstrument.name;\n        outputInstrument.isGMGSDrum = inputInstrument.isGMGSDrum;\n        outputInstrument.bankMSB = inputInstrument.bankMSB;\n        outputInstrument.bankLSB = inputInstrument.bankLSB;\n        outputInstrument.program = inputInstrument.program;\n        outputInstrument.articulation.copyFrom(inputInstrument.articulation);\n        inputInstrument.regions.forEach((region) => {\n            outputInstrument.regions.push(\n                DownloadableSoundsRegion.copyFrom(region)\n            );\n        });\n        return outputInstrument;\n    }\n\n    public static read(samples: DownloadableSoundsSample[], chunk: RIFFChunk) {\n        const chunks = this.verifyAndReadList(chunk, \"ins \");\n\n        const instrumentHeader = chunks.find((c) => c.header === \"insh\");\n        if (!instrumentHeader) {\n            SpessaSynthGroupEnd();\n            throw new Error(\"No instrument header!\");\n        }\n\n        // Read the instrument name in INFO\n        let instrumentName = ``;\n        const infoChunk = findRIFFListType(chunks, \"INFO\");\n        if (infoChunk) {\n            let info = readRIFFChunk(infoChunk.data);\n            while (info.header !== \"INAM\") {\n                info = readRIFFChunk(infoChunk.data);\n            }\n            instrumentName = readBinaryStringIndexed(\n                info.data,\n                info.data.length\n            ).trim();\n        }\n        if (instrumentName.length < 1) {\n            instrumentName = `Unnamed Instrument`;\n        }\n        const instrument = new DownloadableSoundsInstrument();\n        instrument.name = instrumentName;\n        // Read instrument header\n        const regions = readLittleEndianIndexed(instrumentHeader.data, 4);\n        /**\n         *\n         * Specifies the MIDI bank location. Bits 0-6 are defined as MIDI CC32 and bits 8-14 are\n         * defined as MIDI CC0. Bits 7 and 15-30 are reserved and should be written to zero. If the\n         * F_INSTRUMENT_DRUMS flag (Bit 31) is equal to 1 then the instrument is a drum\n         * instrument; if equal to 0 then the instrument is a melodic instrument.\n         */\n        const ulBank = readLittleEndianIndexed(instrumentHeader.data, 4);\n        /**\n         * Specifies the MIDI Program Change (PC) value. Bits 0-6 are defined as PC value and bits 7-\n         * 31 are reserved and should be written to zero.\n         */\n        const ulInstrument = readLittleEndianIndexed(instrumentHeader.data, 4);\n\n        instrument.program = ulInstrument & 127;\n        instrument.bankMSB = (ulBank >>> 8) & 127;\n        instrument.bankLSB = ulBank & 127;\n        instrument.isGMGSDrum = ulBank >>> 31 > 0;\n\n        SpessaSynthGroupCollapsed(\n            `%cParsing %c\"${instrumentName}\"%c...`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n\n        // List of regions\n        const regionListChunk = findRIFFListType(chunks, \"lrgn\");\n        if (!regionListChunk) {\n            SpessaSynthGroupEnd();\n            throw new Error(\"No region list!\");\n        }\n\n        instrument.articulation.read(chunks);\n\n        // Read regions\n        for (let i = 0; i < regions; i++) {\n            const chunk = readRIFFChunk(regionListChunk.data);\n            this.verifyHeader(chunk, \"LIST\");\n            const type = readBinaryStringIndexed(\n                chunk.data,\n                4\n            ) as DLSChunkFourCC;\n            if (type !== \"rgn \" && type !== \"rgn2\") {\n                SpessaSynthGroupEnd();\n                this.parsingError(\n                    `Invalid DLS region! Expected \"rgn \" or \"rgn2\" got \"${type}\"`\n                );\n            }\n\n            const region = DownloadableSoundsRegion.read(samples, chunk);\n            if (region) {\n                instrument.regions.push(region);\n            }\n        }\n        SpessaSynthGroupEnd();\n        return instrument;\n    }\n\n    public static fromSFPreset(preset: BasicPreset, samples: BasicSample[]) {\n        const instrument = new DownloadableSoundsInstrument();\n        instrument.name = preset.name;\n        instrument.bankLSB = preset.bankLSB;\n        instrument.bankMSB = preset.bankMSB;\n        instrument.program = preset.program;\n        instrument.isGMGSDrum = preset.isGMGSDrum;\n        SpessaSynthGroup(\n            `%cConverting %c${preset.toString()}%c to DLS...`,\n            consoleColors.info,\n            consoleColors.value,\n            consoleColors.info\n        );\n\n        // Combine preset and instrument zones into a single instrument zone (region) list\n        const inst = preset.toFlattenedInstrument();\n\n        inst.zones.forEach((z) => {\n            instrument.regions.push(\n                DownloadableSoundsRegion.fromSFZone(z, samples)\n            );\n        });\n        SpessaSynthGroupEnd();\n        return instrument;\n    }\n\n    public write() {\n        SpessaSynthGroupCollapsed(\n            `%cWriting %c${this.name}%c...`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        const chunks = [this.writeHeader()];\n\n        const regionChunks = this.regions.map((r) => r.write());\n        chunks.push(writeRIFFChunkParts(\"lrgn\", regionChunks, true));\n\n        // This will mostly be false as SF2 -> DLS can't have both global and local regions,\n        // So it only has global, hence this check.\n        if (this.articulation.length > 0) {\n            chunks.push(this.articulation.write());\n        }\n\n        // Write the name\n        const inam = writeRIFFChunkRaw(\"INAM\", getStringBytes(this.name, true));\n        chunks.push(writeRIFFChunkRaw(\"INFO\", inam, false, true));\n        SpessaSynthGroupEnd();\n        return writeRIFFChunkParts(\"ins \", chunks, true);\n    }\n\n    /**\n     * Performs the full DLS to SF2 instrument conversion.\n     */\n    public toSFPreset(soundBank: BasicSoundBank) {\n        const preset = new BasicPreset(soundBank);\n        preset.name = this.name;\n        preset.bankMSB = this.bankMSB;\n        preset.bankLSB = this.bankLSB;\n        preset.isGMGSDrum = this.isGMGSDrum;\n        preset.program = this.program;\n\n        const instrument = new BasicInstrument();\n        instrument.name = this.name;\n        preset.createZone(instrument);\n\n        // Global articulation\n        this.articulation.toSFZone(instrument.globalZone);\n\n        this.regions.forEach((region) =>\n            region.toSFZone(instrument, soundBank.samples)\n        );\n\n        // Globalize!\n        instrument.globalize();\n\n        // Override reverb and chorus with 1000 instead of 200\n        // Reverb\n        if (\n            instrument.globalZone.modulators.find(\n                (m) => m.destination === generatorTypes.reverbEffectsSend\n            ) === undefined\n        ) {\n            instrument.globalZone.addModulators(\n                Modulator.copyFrom(DEFAULT_DLS_REVERB)\n            );\n        }\n        // Chorus\n        if (\n            instrument.globalZone.modulators.find(\n                (m) => m.destination === generatorTypes.chorusEffectsSend\n            ) === undefined\n        ) {\n            instrument.globalZone.addModulators(\n                Modulator.copyFrom(DEFAULT_DLS_CHORUS)\n            );\n        }\n\n        // Remove generators with default values\n        instrument.globalZone.generators =\n            instrument.globalZone.generators.filter(\n                (g) => g.generatorValue !== generatorLimits[g.generatorType].def\n            );\n\n        soundBank.addPresets(preset);\n        soundBank.addInstruments(instrument);\n    }\n\n    private writeHeader() {\n        // Insh: instrument header\n        const inshData = new IndexedByteArray(12);\n        writeDword(inshData, this.regions.length); // CRegions\n        // Bank MSB is in bits 8-14\n        let ulBank = ((this.bankMSB & 127) << 8) | (this.bankLSB & 127);\n        // Bit 32 means drums\n        if (this.isGMGSDrum) {\n            ulBank |= 1 << 31;\n        }\n        writeDword(inshData, ulBank); // UlBank\n        writeDword(inshData, this.program & 127); // UlInstrument\n\n        return writeRIFFChunkRaw(\"insh\", inshData);\n    }\n}\n", "import { DLSVerifier } from \"./dls_verifier\";\nimport { DownloadableSoundsSample } from \"./sample\";\nimport { DownloadableSoundsInstrument } from \"./instrument\";\nimport type {\n    DLSInfoFourCC,\n    DLSWriteOptions,\n    SF2VersionTag,\n    SoundBankInfoData,\n    SoundBankInfoFourCC\n} from \"../types\";\nimport { IndexedByteArray } from \"../../utils/indexed_array\";\nimport { consoleColors } from \"../../utils/other\";\nimport {\n    findRIFFListType,\n    readRIFFChunk,\n    RIFFChunk,\n    writeRIFFChunkParts,\n    writeRIFFChunkRaw\n} from \"../../utils/riff_chunk\";\nimport {\n    getStringBytes,\n    readBinaryStringIndexed\n} from \"../../utils/byte_functions/string\";\nimport { parseDateString } from \"../../utils/load_date\";\nimport {\n    readLittleEndianIndexed,\n    writeDword\n} from \"../../utils/byte_functions/little_endian\";\nimport {\n    SpessaSynthGroup,\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo,\n    SpessaSynthWarn\n} from \"../../utils/loggin\";\nimport { BasicSoundBank } from \"../basic_soundbank/basic_soundbank\";\nimport { BankSelectHacks } from \"../../utils/midi_hacks\";\nimport { DownloadableSoundsRegion } from \"./region\";\n\nexport const DEFAULT_DLS_OPTIONS: DLSWriteOptions = {\n    progressFunction: undefined\n};\n\nexport class DownloadableSounds extends DLSVerifier {\n    public readonly samples = new Array<DownloadableSoundsSample>();\n    public readonly instruments = new Array<DownloadableSoundsInstrument>();\n    public soundBankInfo: SoundBankInfoData = {\n        name: \"Unnamed\",\n        creationDate: new Date(),\n        software: \"SpessaSynth\",\n        soundEngine: \"DLS Level 2.2\",\n        version: {\n            major: 2,\n            minor: 4\n        }\n    };\n\n    public static read(buffer: ArrayBuffer): DownloadableSounds {\n        if (!buffer) {\n            throw new Error(\"No data provided!\");\n        }\n        const dataArray = new IndexedByteArray(buffer);\n        SpessaSynthGroup(\"%cParsing DLS file...\", consoleColors.info);\n\n        // Read the main chunk\n        const firstChunk = readRIFFChunk(dataArray, false);\n        this.verifyHeader(firstChunk, \"RIFF\");\n        this.verifyText(\n            readBinaryStringIndexed(dataArray, 4).toLowerCase(),\n            \"dls \"\n        );\n\n        /**\n         * Read the list\n         */\n        const chunks: RIFFChunk[] = [];\n        while (dataArray.currentIndex < dataArray.length) {\n            chunks.push(readRIFFChunk(dataArray));\n        }\n\n        const dls = new DownloadableSounds();\n\n        // Set some defaults\n        dls.soundBankInfo.name = \"Unnamed DLS\";\n        dls.soundBankInfo.product = \"SpessaSynth DLS\";\n        dls.soundBankInfo.comment = \"(no description)\";\n\n        // Read info\n        const infoChunk = findRIFFListType(chunks, \"INFO\");\n        if (infoChunk) {\n            while (infoChunk.data.currentIndex < infoChunk.data.length) {\n                const infoPart = readRIFFChunk(infoChunk.data);\n                const headerTyped = infoPart.header as DLSInfoFourCC;\n                const text = readBinaryStringIndexed(\n                    infoPart.data,\n                    infoPart.size\n                );\n                switch (headerTyped) {\n                    case \"INAM\":\n                        dls.soundBankInfo.name = text;\n                        break;\n\n                    case \"ICRD\":\n                        dls.soundBankInfo.creationDate = parseDateString(text);\n                        break;\n\n                    case \"ICMT\":\n                        dls.soundBankInfo.comment = text;\n                        break;\n\n                    case \"ISBJ\":\n                        dls.soundBankInfo.subject = text;\n                        break;\n\n                    case \"ICOP\":\n                        dls.soundBankInfo.copyright = text;\n                        break;\n\n                    case \"IENG\":\n                        dls.soundBankInfo.engineer = text;\n                        break;\n\n                    case \"IPRD\":\n                        dls.soundBankInfo.product = text;\n                        break;\n\n                    case \"ISFT\":\n                        dls.soundBankInfo.software = text;\n                }\n            }\n        }\n\n        this.printInfo(dls);\n\n        // Read \"colh\"\n        const colhChunk = chunks.find((c) => c.header === \"colh\");\n        if (!colhChunk) {\n            this.parsingError(\"No colh chunk!\");\n            return 5 as never;\n        }\n        const instrumentAmount = readLittleEndianIndexed(colhChunk.data, 4);\n        SpessaSynthInfo(\n            `%cInstruments amount: %c${instrumentAmount}`,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n\n        // Read the wave list\n        const waveListChunk = findRIFFListType(chunks, \"wvpl\");\n        if (!waveListChunk) {\n            this.parsingError(\"No wvpl chunk!\");\n            return 5 as never;\n        }\n        const waveList = this.verifyAndReadList(waveListChunk, \"wvpl\");\n        waveList.forEach((wave) => {\n            dls.samples.push(DownloadableSoundsSample.read(wave));\n        });\n\n        // Read the instrument list\n        const instrumentListChunk = findRIFFListType(chunks, \"lins\");\n        if (!instrumentListChunk) {\n            this.parsingError(\"No lins chunk!\");\n            return 5 as never;\n        }\n        const instruments = this.verifyAndReadList(instrumentListChunk, \"lins\");\n        SpessaSynthGroupCollapsed(\n            \"%cLoading instruments...\",\n            consoleColors.info\n        );\n        if (instruments.length !== instrumentAmount) {\n            SpessaSynthWarn(\n                `Colh reported invalid amount of instruments. Detected ${instruments.length}, expected ${instrumentAmount}`\n            );\n        }\n        instruments.forEach((ins) => {\n            dls.instruments.push(\n                DownloadableSoundsInstrument.read(dls.samples, ins)\n            );\n        });\n        SpessaSynthGroupEnd();\n\n        /*\n         MobileBAE Instrument aliasing\n         https://github.com/spessasus/spessasynth_core/issues/14\n         https://lpcwiki.miraheze.org/wiki/MobileBAE#Proprietary_instrument_aliasing_chunk\n         http://onj3.andrelouis.com/phonetones/Software%20and%20Soundbanks/Soundbanks/Beatnik%20mobileBAE/\n        */\n        const aliasingChunk = chunks.find((c) => c.header === \"pgal\");\n        if (aliasingChunk) {\n            SpessaSynthInfo(\n                \"%cFound the instrument aliasing chunk!\",\n                consoleColors.recognized\n            );\n            const pgalData = aliasingChunk.data;\n            // Check for the unused 4 bytes at the start\n            // If the bank doesn't start with 00 01 02 03, skip them\n            if (\n                pgalData[0] !== 0 ||\n                pgalData[1] !== 1 ||\n                pgalData[2] !== 2 ||\n                pgalData[3] !== 3\n            ) {\n                pgalData.currentIndex += 4;\n            }\n            // Read the drum alias\n            const drumInstrument = dls.instruments.find(\n                (i) => BankSelectHacks.isXGDrums(i.bankMSB) || i.isGMGSDrum\n            );\n            if (!drumInstrument) {\n                SpessaSynthWarn(\n                    \"MobileBAE aliasing chunk without a drum preset. Aborting!\"\n                );\n                return dls;\n            }\n            const drumAliases = pgalData.slice(\n                pgalData.currentIndex,\n                pgalData.currentIndex + 128\n            );\n            pgalData.currentIndex += 128;\n            for (let keyNum = 0; keyNum < 128; keyNum++) {\n                const alias = drumAliases[keyNum];\n                if (alias === keyNum) {\n                    // Skip the same aliases\n                    continue;\n                }\n                const region = drumInstrument.regions.find(\n                    (r) => r.keyRange.max === alias && r.keyRange.min === alias\n                );\n                if (!region) {\n                    SpessaSynthWarn(\n                        `Invalid drum alias ${keyNum} to ${alias}: region does not exist.`\n                    );\n                    continue;\n                }\n                const copied = DownloadableSoundsRegion.copyFrom(region);\n                copied.keyRange.max = keyNum;\n                copied.keyRange.min = keyNum;\n                drumInstrument.regions.push(copied);\n            }\n            // 4 bytes: Unknown purpose, 'footer'.\n            pgalData.currentIndex += 4;\n            while (pgalData.currentIndex < pgalData.length) {\n                const aliasBankNum = readLittleEndianIndexed(pgalData, 2);\n                // Little-endian 16-bit value (only 14 bits used): Upper 7 bits: Bank MSB, lower 7 bits: Bank LSB\n                const aliasBankLSB = aliasBankNum & 0x7f;\n                const aliasBankMSB = (aliasBankNum >> 7) & 0x7f;\n                const aliasProgram = pgalData[pgalData.currentIndex++];\n                let nullByte = pgalData[pgalData.currentIndex++];\n                if (nullByte !== 0) {\n                    SpessaSynthWarn(\n                        `Invalid alias byte. Expected 0, got ${nullByte}`\n                    );\n                }\n                const inputBankNum = readLittleEndianIndexed(pgalData, 2);\n                const inputBankLSB = inputBankNum & 0x7f;\n                const inputBankMSB = (inputBankNum >> 7) & 0x7f;\n                const inputProgram = pgalData[pgalData.currentIndex++];\n                nullByte = pgalData[pgalData.currentIndex++];\n                if (nullByte !== 0) {\n                    SpessaSynthWarn(\n                        `Invalid alias header. Expected 0, got ${nullByte}`\n                    );\n                }\n\n                const inputInstrument = dls.instruments.find(\n                    (inst) =>\n                        inst.bankLSB === inputBankLSB &&\n                        inst.bankMSB === inputBankMSB &&\n                        inst.program === inputProgram &&\n                        !inst.isGMGSDrum\n                );\n                if (!inputInstrument) {\n                    SpessaSynthWarn(\n                        `Invalid alias. Missing instrument: ${inputBankLSB}:${inputBankMSB}:${inputProgram}`\n                    );\n                    continue;\n                }\n\n                const alias =\n                    DownloadableSoundsInstrument.copyFrom(inputInstrument);\n                alias.bankMSB = aliasBankMSB;\n                alias.bankLSB = aliasBankLSB;\n                alias.program = aliasProgram;\n                dls.instruments.push(alias);\n            }\n        }\n\n        SpessaSynthInfo(\n            `%cParsing finished! %c\"${dls.soundBankInfo.name || \"UNNAMED\"}\"%c has %c${dls.instruments.length}%c instruments and %c${dls.samples.length}%c samples.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        SpessaSynthGroupEnd();\n        return dls;\n    }\n\n    /**\n     * Performs a full conversion from BasicSoundBank to DownloadableSounds.\n     */\n    public static fromSF(bank: BasicSoundBank) {\n        SpessaSynthGroupCollapsed(\n            \"%cSaving SF2 to DLS level 2...\",\n            consoleColors.info\n        );\n        const dls = new DownloadableSounds();\n        dls.soundBankInfo = { ...bank.soundBankInfo };\n        dls.soundBankInfo.comment =\n            (dls.soundBankInfo.comment ?? \"(No description)\") +\n            \"\\nConverted from SF2 to DLS with SpessaSynth\";\n\n        bank.samples.forEach((s) => {\n            dls.samples.push(DownloadableSoundsSample.fromSFSample(s));\n        });\n        bank.presets.forEach((p) => {\n            dls.instruments.push(\n                DownloadableSoundsInstrument.fromSFPreset(p, bank.samples)\n            );\n        });\n\n        SpessaSynthInfo(\"%cConversion complete!\", consoleColors.recognized);\n        SpessaSynthGroupEnd();\n        return dls;\n    }\n\n    private static printInfo(dls: DownloadableSounds) {\n        for (const [info, value] of Object.entries(dls.soundBankInfo)) {\n            if (typeof value === \"object\" && \"major\" in value) {\n                const v = value as SF2VersionTag;\n                SpessaSynthInfo(\n                    `%c${info}: %c\"${v.major}.${v.minor}\"`,\n                    consoleColors.info,\n                    consoleColors.recognized\n                );\n            }\n            SpessaSynthInfo(\n                `%c${info}: %c${(value as string | Date).toLocaleString()}`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n    }\n\n    /**\n     * Writes an SF2 file\n     * @param options\n     */\n    public async write(options: DLSWriteOptions = DEFAULT_DLS_OPTIONS) {\n        SpessaSynthGroupCollapsed(\"%cSaving DLS...\", consoleColors.info);\n        // Write colh\n        const colhNum = new IndexedByteArray(4);\n        writeDword(colhNum, this.instruments.length);\n        const colh = writeRIFFChunkRaw(\"colh\", colhNum);\n        SpessaSynthGroupCollapsed(\n            \"%cWriting instruments...\",\n            consoleColors.info\n        );\n\n        const lins = writeRIFFChunkParts(\n            \"lins\",\n            this.instruments.map((i) => i.write()),\n            true\n        );\n        SpessaSynthInfo(\"%cSuccess!\", consoleColors.recognized);\n        SpessaSynthGroupEnd();\n\n        SpessaSynthGroupCollapsed(\n            \"%cWriting WAVE samples...\",\n            consoleColors.info\n        );\n\n        let currentIndex = 0;\n        const ptblOffsets = [];\n        const samples: IndexedByteArray[] = [];\n        let written = 0;\n        for (const s of this.samples) {\n            const out = s.write();\n            await options?.progressFunction?.(\n                s.name,\n                written,\n                this.samples.length\n            );\n            ptblOffsets.push(currentIndex);\n            currentIndex += out.length;\n            samples.push(out);\n            written++;\n        }\n        const wvpl = writeRIFFChunkParts(\"wvpl\", samples, true);\n        SpessaSynthInfo(\"%cSucceeded!\", consoleColors.recognized);\n\n        // Write ptbl\n        const ptblData = new IndexedByteArray(8 + 4 * ptblOffsets.length);\n        writeDword(ptblData, 8);\n        writeDword(ptblData, ptblOffsets.length);\n        for (const offset of ptblOffsets) {\n            writeDword(ptblData, offset);\n        }\n        const ptbl = writeRIFFChunkRaw(\"ptbl\", ptblData);\n        this.soundBankInfo.software = \"SpessaSynth\"; // ( ͡° ͜ʖ ͡°)\n\n        // Write INFO\n        const infos: Uint8Array[] = [];\n\n        const writeDLSInfo = (type: DLSInfoFourCC, data: string) => {\n            infos.push(writeRIFFChunkRaw(type, getStringBytes(data, true)));\n        };\n\n        for (const [t, d] of Object.entries(this.soundBankInfo)) {\n            const type = t as SoundBankInfoFourCC;\n            const data = d as SoundBankInfoData[SoundBankInfoFourCC];\n            if (!data) {\n                continue;\n            }\n            switch (type) {\n                case \"name\":\n                    writeDLSInfo(\"INAM\", data as string);\n                    break;\n\n                case \"comment\":\n                    writeDLSInfo(\"ICMT\", data as string);\n                    break;\n\n                case \"copyright\":\n                    writeDLSInfo(\"ICOP\", data as string);\n                    break;\n\n                case \"creationDate\":\n                    writeDLSInfo(\"ICRD\", (data as Date).toISOString());\n                    break;\n\n                case \"engineer\":\n                    writeDLSInfo(\"IENG\", data as string);\n                    break;\n\n                case \"product\":\n                    writeDLSInfo(\"IPRD\", data as string);\n                    break;\n\n                case \"romVersion\":\n                case \"version\":\n                case \"soundEngine\":\n                case \"romInfo\":\n                    // Not writable\n                    break;\n\n                case \"software\":\n                    writeDLSInfo(\"ISFT\", data as string);\n                    break;\n\n                case \"subject\":\n                    writeDLSInfo(\"ISBJ\", data as string);\n            }\n        }\n        const info = writeRIFFChunkParts(\"INFO\", infos, true);\n\n        SpessaSynthInfo(\"%cCombining everything...\");\n        const out = writeRIFFChunkParts(\"RIFF\", [\n            getStringBytes(\"DLS \"),\n            colh,\n            lins,\n            ptbl,\n            wvpl,\n            info\n        ]);\n\n        SpessaSynthInfo(\"%cSaved successfully!\", consoleColors.recognized);\n        SpessaSynthGroupEnd();\n        return out.buffer;\n    }\n\n    /**\n     * Performs a full conversion from DownloadableSounds to BasicSoundBank.\n     */\n    public toSF(): BasicSoundBank {\n        SpessaSynthGroup(\"%cConverting DLS to SF2...\", consoleColors.info);\n        const soundBank = new BasicSoundBank();\n\n        soundBank.soundBankInfo.version.minor = 4;\n        soundBank.soundBankInfo.version.major = 2;\n        soundBank.soundBankInfo = { ...this.soundBankInfo };\n        soundBank.soundBankInfo.comment =\n            (soundBank.soundBankInfo.comment ?? \"(No description)\") +\n            \"\\nConverted from DLS to SF2 with SpessaSynth\";\n\n        this.samples.forEach((sample) => {\n            sample.toSFSample(soundBank);\n        });\n\n        this.instruments.forEach((instrument) => {\n            instrument.toSFPreset(soundBank);\n        });\n        soundBank.flush();\n\n        SpessaSynthInfo(\"%cConversion complete!\", consoleColors.recognized);\n        SpessaSynthGroupEnd();\n        return soundBank;\n    }\n}\n", "import { SpessaSynthGroup, SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin\";\nimport { consoleColors } from \"../../utils/other\";\nimport { DEFAULT_SF2_WRITE_OPTIONS, writeSF2Internal } from \"../soundfont/write/write\";\nimport { Modulator, SPESSASYNTH_DEFAULT_MODULATORS } from \"./modulator\";\nimport { BasicSample, EmptySample } from \"./basic_sample\";\nimport { Generator } from \"./generator\";\nimport { BasicInstrument } from \"./basic_instrument\";\nimport { BasicPreset } from \"./basic_preset\";\nimport { BankSelectHacks } from \"../../utils/midi_hacks\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_wrapper\";\nimport type { BasicMIDI } from \"../../midi/basic_midi\";\n\nimport type { DLSWriteOptions, SF2VersionTag, SoundBankInfoData, SoundFont2WriteOptions } from \"../types\";\nimport { generatorTypes } from \"./generator_types\";\nimport type { SynthSystem } from \"../../synthesizer/types\";\nimport { selectPreset } from \"./preset_selector\";\nimport { type MIDIPatch, MIDIPatchTools } from \"./midi_patch\";\nimport { DEFAULT_DLS_OPTIONS, DownloadableSounds } from \"../downloadable_sounds/downloadable_sounds\";\n\n/**\n * Represents a single sound bank, be it DLS or SF2.\n */\nexport class BasicSoundBank {\n    /**\n     * Indicates if the SF3/SF2Pack decoder is ready.\n     */\n    public static isSF3DecoderReady: Promise<boolean> = stbvorbis.isInitialized;\n\n    /**\n     * Sound bank's info.\n     */\n    public soundBankInfo: SoundBankInfoData = {\n        name: \"Unnamed\",\n        creationDate: new Date(),\n        software: \"SpessaSynth\",\n        soundEngine: \"E-mu 10K2\",\n        version: {\n            major: 2,\n            minor: 4\n        }\n    };\n\n    /**\n     * The sound bank's presets.\n     */\n    public presets: BasicPreset[] = [];\n\n    /**\n     * The sound bank's samples.\n     */\n    public samples: BasicSample[] = [];\n\n    /**\n     * The sound bank's instruments.\n     */\n    public instruments: BasicInstrument[] = [];\n\n    /**\n     * Sound bank's default modulators.\n     */\n    public defaultModulators: Modulator[] = SPESSASYNTH_DEFAULT_MODULATORS.map(\n        Modulator.copyFrom.bind(Modulator)\n    );\n\n    /**\n     * If the sound bank has custom default modulators (DMOD).\n     */\n    public customDefaultModulators = false;\n\n    private _isXGBank = false;\n\n    /**\n     * Checks for XG drum sets and considers if this sound bank is XG.\n     */\n    public get isXGBank() {\n        return this._isXGBank;\n    }\n\n    /**\n     * Merges sound banks with the given order. Keep in mind that the info read is copied from the first one\n     * @param soundBanks the sound banks to merge, the first overwrites the last\n     */\n    public static mergeSoundBanks(\n        ...soundBanks: BasicSoundBank[]\n    ): BasicSoundBank {\n        const mainSf = soundBanks.shift();\n        if (!mainSf) {\n            throw new Error(\"No sound banks provided!\");\n        }\n        const presets = mainSf.presets;\n        while (soundBanks.length) {\n            const newPresets = soundBanks?.shift()?.presets;\n            if (newPresets) {\n                newPresets.forEach((newPreset) => {\n                    if (\n                        presets.find((existingPreset) =>\n                            newPreset.matches(existingPreset)\n                        ) === undefined\n                    ) {\n                        presets.push(newPreset);\n                    }\n                });\n            }\n        }\n\n        const b = new BasicSoundBank();\n        b.addCompletePresets(presets);\n        b.soundBankInfo = { ...mainSf.soundBankInfo };\n        return b;\n    }\n\n    /**\n     * Creates a simple sound bank with one saw wave preset.\n     */\n    public static async getSampleSoundBankFile(): Promise<ArrayBuffer> {\n        const font = new BasicSoundBank();\n        const sampleData = new Float32Array(128);\n        for (let i = 0; i < 128; i++) {\n            sampleData[i] = (i / 128) * 2 - 1;\n        }\n        const sample = new EmptySample();\n        sample.name = \"Saw\";\n        sample.originalKey = 65;\n        sample.pitchCorrection = 20;\n        sample.loopEnd = 127;\n        sample.setAudioData(sampleData, 44100);\n        font.addSamples(sample);\n\n        const inst = new BasicInstrument();\n        inst.name = \"Saw Wave\";\n        inst.globalZone.addGenerators(\n            new Generator(generatorTypes.initialAttenuation, 375),\n            new Generator(generatorTypes.releaseVolEnv, -1000),\n            new Generator(generatorTypes.sampleModes, 1)\n        );\n\n        inst.createZone(sample);\n        const zone2 = inst.createZone(sample);\n        zone2.addGenerators(new Generator(generatorTypes.fineTune, -9));\n\n        font.addInstruments(inst);\n\n        const preset = new BasicPreset(font);\n        preset.name = \"Saw Wave\";\n        preset.createZone(inst);\n\n        font.addPresets(preset);\n\n        font.soundBankInfo.name = \"Dummy\";\n        font.flush();\n        return await font.writeSF2();\n    }\n\n    /**\n     * Copies a given sound bank.\n     * @param bank The sound bank to copy.\n     */\n    public static copyFrom(bank: BasicSoundBank) {\n        const copied = new BasicSoundBank();\n        bank.presets.forEach((p) => copied.clonePreset(p));\n        copied.soundBankInfo = { ...bank.soundBankInfo };\n        return copied;\n    }\n\n    /**\n     * Adds complete presets along with their instruments and samples.\n     * @param presets The presets to add.\n     */\n    public addCompletePresets(presets: BasicPreset[]) {\n        this.addPresets(...presets);\n        const instrumentList: BasicInstrument[] = [];\n        for (const preset of presets) {\n            for (const zone of preset.zones) {\n                if (\n                    zone.instrument &&\n                    !instrumentList.includes(zone.instrument)\n                ) {\n                    instrumentList.push(zone.instrument);\n                }\n            }\n        }\n        this.addInstruments(...instrumentList);\n\n        const sampleList: BasicSample[] = [];\n\n        for (const instrument of instrumentList) {\n            for (const zone of instrument.zones) {\n                if (zone.sample && !sampleList.includes(zone.sample)) {\n                    sampleList.push(zone.sample);\n                }\n            }\n        }\n        this.addSamples(...sampleList);\n    }\n\n    /**\n     * Write the sound bank as a .dls file. This may not be 100% accurate.\n     * @param options - options for writing the file.\n     * @returns the binary file.\n     */\n    public async writeDLS(\n        options: Partial<DLSWriteOptions> = DEFAULT_DLS_OPTIONS\n    ): Promise<ArrayBuffer> {\n        const dls = DownloadableSounds.fromSF(this);\n        return dls.write(options);\n    }\n\n    /**\n     * Writes the sound bank as an SF2 file.\n     * @param writeOptions the options for writing.\n     * @returns the binary file data.\n     */\n    public async writeSF2(\n        writeOptions: Partial<SoundFont2WriteOptions> = DEFAULT_SF2_WRITE_OPTIONS\n    ): Promise<ArrayBuffer> {\n        return writeSF2Internal(this, writeOptions);\n    }\n\n    public addPresets(...presets: BasicPreset[]) {\n        this.presets.push(...presets);\n    }\n\n    public addInstruments(...instruments: BasicInstrument[]) {\n        this.instruments.push(...instruments);\n    }\n\n    public addSamples(...samples: BasicSample[]) {\n        this.samples.push(...samples);\n    }\n\n    /**\n     * Clones a sample into this bank.\n     * @param sample The sample to copy.\n     * @returns the copied sample, if a sample exists with that name, it is returned instead\n     */\n    public cloneSample(sample: BasicSample): BasicSample {\n        const duplicate = this.samples.find((s) => s.name === sample.name);\n        if (duplicate) {\n            return duplicate;\n        }\n        const newSample = new BasicSample(\n            sample.name,\n            sample.sampleRate,\n            sample.originalKey,\n            sample.pitchCorrection,\n            sample.sampleType,\n            sample.loopStart,\n            sample.loopEnd\n        );\n        if (sample.isCompressed) {\n            newSample.setCompressedData(sample.getRawData(true));\n        } else {\n            newSample.setAudioData(sample.getAudioData(), sample.sampleRate);\n        }\n        this.addSamples(newSample);\n        if (sample.linkedSample) {\n            const clonedLinked = this.cloneSample(sample.linkedSample);\n            // Sanity check\n            if (!clonedLinked.linkedSample) {\n                newSample.setLinkedSample(clonedLinked, newSample.sampleType);\n            }\n        }\n        return newSample;\n    }\n\n    /**\n     * Recursively clones an instrument into this sound bank, as well as its samples.\n     * @returns the copied instrument, if an instrument exists with that name, it is returned instead.\n     */\n    public cloneInstrument(instrument: BasicInstrument): BasicInstrument {\n        const duplicate = this.instruments.find(\n            (i) => i.name === instrument.name\n        );\n        if (duplicate) {\n            return duplicate;\n        }\n        const newInstrument = new BasicInstrument();\n        newInstrument.name = instrument.name;\n        newInstrument.globalZone.copyFrom(instrument.globalZone);\n        for (const zone of instrument.zones) {\n            const copiedZone = newInstrument.createZone(\n                this.cloneSample(zone.sample)\n            );\n            copiedZone.copyFrom(zone);\n        }\n        this.addInstruments(newInstrument);\n        return newInstrument;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Recursively clones a preset into this sound bank, as well as its instruments and samples.\n     * @returns the copied preset, if a preset exists with that name, it is returned instead.\n     */\n    public clonePreset(preset: BasicPreset): BasicPreset {\n        const duplicate = this.presets.find((p) => p.name === preset.name);\n        if (duplicate) {\n            return duplicate;\n        }\n        const newPreset = new BasicPreset(this);\n        newPreset.name = preset.name;\n        newPreset.bankMSB = preset.bankMSB;\n        newPreset.bankLSB = preset.bankLSB;\n        newPreset.isGMGSDrum = preset.isGMGSDrum;\n        newPreset.program = preset.program;\n        newPreset.library = preset.library;\n        newPreset.genre = preset.genre;\n        newPreset.morphology = preset.morphology;\n        newPreset.globalZone.copyFrom(preset.globalZone);\n        for (const zone of preset.zones) {\n            const copiedZone = newPreset.createZone(\n                this.cloneInstrument(zone.instrument)\n            );\n            copiedZone.copyFrom(zone);\n        }\n\n        this.addPresets(newPreset);\n        return newPreset;\n    }\n\n    /**\n     * Updates internal values.\n     */\n    public flush() {\n        this.presets.sort(MIDIPatchTools.sorter.bind(MIDIPatchTools));\n        this.parseInternal();\n    }\n\n    /**\n     * Trims a sound bank to only contain samples in a given MIDI file.\n     * @param mid - the MIDI file\n     */\n    public trimSoundBank(mid: BasicMIDI) {\n        const trimInstrumentZones = (\n            instrument: BasicInstrument,\n            combos: { key: number; velocity: number }[]\n        ): number => {\n            let trimmedIZones = 0;\n            for (\n                let iZoneIndex = 0;\n                iZoneIndex < instrument.zones.length;\n                iZoneIndex++\n            ) {\n                const iZone = instrument.zones[iZoneIndex];\n                const iKeyRange = iZone.keyRange;\n                const iVelRange = iZone.velRange;\n                let isIZoneUsed = false;\n                for (const iCombo of combos) {\n                    if (\n                        iCombo.key >= iKeyRange.min &&\n                        iCombo.key <= iKeyRange.max &&\n                        iCombo.velocity >= iVelRange.min &&\n                        iCombo.velocity <= iVelRange.max\n                    ) {\n                        isIZoneUsed = true;\n                        break;\n                    }\n                }\n                if (!isIZoneUsed && iZone.sample) {\n                    SpessaSynthInfo(\n                        `%c${iZone.sample.name}%c removed from %c${instrument.name}%c.`,\n                        consoleColors.recognized,\n                        consoleColors.info,\n                        consoleColors.recognized,\n                        consoleColors.info\n                    );\n                    if (instrument.deleteZone(iZoneIndex)) {\n                        trimmedIZones++;\n                        iZoneIndex--;\n                        SpessaSynthInfo(\n                            `%c${iZone.sample.name}%c deleted`,\n                            consoleColors.recognized,\n                            consoleColors.info\n                        );\n                    }\n                    if (iZone.sample.useCount < 1) {\n                        this.deleteSample(iZone.sample);\n                    }\n                }\n            }\n            return trimmedIZones;\n        };\n\n        SpessaSynthGroup(\"%cTrimming sound bank...\", consoleColors.info);\n        const usedProgramsAndKeys = mid.getUsedProgramsAndKeys(this);\n\n        SpessaSynthGroupCollapsed(\n            \"%cModifying sound bank...\",\n            consoleColors.info\n        );\n        SpessaSynthInfo(\"Detected keys for midi:\", usedProgramsAndKeys);\n        // Modify the sound bank to only include programs and samples that are used\n        for (\n            let presetIndex = 0;\n            presetIndex < this.presets.length;\n            presetIndex++\n        ) {\n            const p = this.presets[presetIndex];\n            const used = usedProgramsAndKeys.get(p);\n            if (used === undefined) {\n                SpessaSynthInfo(\n                    `%cDeleting preset %c${p.name}%c and its zones`,\n                    consoleColors.info,\n                    consoleColors.recognized,\n                    consoleColors.info\n                );\n                this.deletePreset(p);\n                presetIndex--;\n            } else {\n                const combos = [...used].map((s) => {\n                    const split = s.split(\"-\");\n                    return {\n                        key: parseInt(split[0]),\n                        velocity: parseInt(split[1])\n                    };\n                });\n                SpessaSynthGroupCollapsed(\n                    `%cTrimming %c${p.name}`,\n                    consoleColors.info,\n                    consoleColors.recognized\n                );\n                SpessaSynthInfo(`Keys for ${p.name}:`, combos);\n                let trimmedZones = 0;\n                // Clean the preset to only use zones that are used\n                for (\n                    let zoneIndex = 0;\n                    zoneIndex < p.zones.length;\n                    zoneIndex++\n                ) {\n                    const zone = p.zones[zoneIndex];\n                    const keyRange = zone.keyRange;\n                    const velRange = zone.velRange;\n                    // Check if any of the combos matches the zone\n                    let isZoneUsed = false;\n                    for (const combo of combos) {\n                        if (\n                            combo.key >= keyRange.min &&\n                            combo.key <= keyRange.max &&\n                            combo.velocity >= velRange.min &&\n                            combo.velocity <= velRange.max &&\n                            zone.instrument\n                        ) {\n                            // Zone is used, trim the instrument zones\n                            isZoneUsed = true;\n                            const trimmedIZones = trimInstrumentZones(\n                                zone.instrument,\n                                combos\n                            );\n                            SpessaSynthInfo(\n                                `%cTrimmed off %c${trimmedIZones}%c zones from %c${zone.instrument.name}`,\n                                consoleColors.info,\n                                consoleColors.recognized,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        }\n                    }\n                    if (!isZoneUsed && zone.instrument) {\n                        trimmedZones++;\n                        p.deleteZone(zoneIndex);\n                        if (zone.instrument.useCount < 1) {\n                            this.deleteInstrument(zone.instrument);\n                        }\n                        zoneIndex--;\n                    }\n                }\n                SpessaSynthInfo(\n                    `%cTrimmed off %c${trimmedZones}%c zones from %c${p.name}`,\n                    consoleColors.info,\n                    consoleColors.recognized,\n                    consoleColors.info,\n                    consoleColors.recognized\n                );\n                SpessaSynthGroupEnd();\n            }\n        }\n        this.removeUnusedElements();\n\n        SpessaSynthInfo(\"%cSound bank modified!\", consoleColors.recognized);\n        SpessaSynthGroupEnd();\n        SpessaSynthGroupEnd();\n    }\n\n    public removeUnusedElements() {\n        this.instruments = this.instruments.filter((i) => {\n            i.deleteUnusedZones();\n            const deletable = i.useCount < 1;\n            if (deletable) {\n                i.delete();\n            }\n            return !deletable;\n        });\n        this.samples = this.samples.filter((s) => {\n            const deletable = s.useCount < 1;\n            if (deletable) {\n                s.unlinkSample();\n            }\n            return !deletable;\n        });\n    }\n\n    public deleteInstrument(instrument: BasicInstrument) {\n        instrument.delete();\n        this.instruments.splice(this.instruments.indexOf(instrument), 1);\n    }\n\n    public deletePreset(preset: BasicPreset) {\n        preset.delete();\n        this.presets.splice(this.presets.indexOf(preset), 1);\n    }\n\n    public deleteSample(sample: BasicSample) {\n        sample.unlinkSample();\n        this.samples.splice(this.samples.indexOf(sample), 1);\n    }\n\n    /**\n     * Get the appropriate preset.\n     */\n    public getPreset(patch: MIDIPatch, system: SynthSystem): BasicPreset {\n        return selectPreset(this.presets, patch, system);\n    }\n\n    public destroySoundBank() {\n        this.presets.length = 0;\n        this.instruments.length = 0;\n        this.samples.length = 0;\n    }\n\n    protected parsingError(error: string) {\n        throw new Error(\n            `SF parsing error: ${error} The file may be corrupted.`\n        );\n    }\n\n    /**\n     * Parses the bank after loading is done\n     * @protected\n     */\n    protected parseInternal() {\n        this._isXGBank = false;\n        // Definitions for XG:\n        // At least one preset with bank 127, 126 or 120\n        // MUST be a valid XG bank.\n        // Allowed banks: (see XG specification)\n        // Note: XG spec numbers the programs from 1...\n        const allowedPrograms = new Set([\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 24, 25, 26, 27, 28, 29, 30,\n            31, 32, 33, 40, 41, 48, 56, 57, 58, 64, 65, 66, 126, 127\n        ]);\n        for (const preset of this.presets) {\n            if (BankSelectHacks.isXGDrums(preset.bankMSB)) {\n                this._isXGBank = true;\n                if (!allowedPrograms.has(preset.program)) {\n                    // Not valid!\n                    this._isXGBank = false;\n                    SpessaSynthInfo(\n                        `%cThis bank is not valid XG. Preset %c${preset.toString()}%c is not a valid XG drum. XG mode will use presets on bank 128.`,\n                        consoleColors.info,\n                        consoleColors.value,\n                        consoleColors.info\n                    );\n                    break;\n                }\n            }\n        }\n    }\n\n    protected printInfo() {\n        for (const [info, value] of Object.entries(this.soundBankInfo)) {\n            if (typeof value === \"object\" && \"major\" in value) {\n                const v = value as SF2VersionTag;\n                SpessaSynthInfo(\n                    `%c${info}: %c\"${v.major}.${v.minor}\"`,\n                    consoleColors.info,\n                    consoleColors.recognized\n                );\n            }\n            SpessaSynthInfo(\n                `%c${info}: %c${(value as string | Date).toLocaleString()}`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n    }\n}\n", "import { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport { RIFFChunk } from \"../../../utils/riff_chunk\";\nimport { signedInt16 } from \"../../../utils/byte_functions/little_endian\";\nimport { Generator } from \"../../basic_soundbank/generator\";\nimport type { GeneratorType } from \"../../basic_soundbank/generator_types\";\n\nexport class ReadGenerator extends Generator {\n    /**\n     * Creates a generator\n     */\n    public constructor(dataArray: IndexedByteArray) {\n        // Note: We skip validation here as some sf2 files use invalid values that end up being correct after applying limits at the modulator level.\n        // Test case: LiveHQ Natural soundfont GM, \"Brass\" preset (negative attenuation with quiet samples)\n        // 4 bytes:\n        // Type, type, type, value\n        const i = dataArray.currentIndex;\n        const generatorType = ((dataArray[i + 1] << 8) |\n            dataArray[i]) as GeneratorType;\n        const generatorValue = signedInt16(dataArray[i + 2], dataArray[i + 3]);\n        dataArray.currentIndex += 4;\n        super(generatorType, generatorValue, false);\n    }\n}\n\n/**\n * Reads the generators\n */\nexport function readGenerators(generatorChunk: RIFFChunk): Generator[] {\n    const gens = [];\n    while (generatorChunk.data.length > generatorChunk.data.currentIndex) {\n        gens.push(new ReadGenerator(generatorChunk.data));\n    }\n    // Remove terminal\n    gens.pop();\n    return gens;\n}\n", "import { BasicPresetZone } from \"../../basic_soundbank/basic_preset_zone\";\nimport { Generator } from \"../../basic_soundbank/generator\";\nimport { Modulator } from \"../../basic_soundbank/modulator\";\nimport type { BasicPreset } from \"../../basic_soundbank/basic_preset\";\nimport type { BasicInstrument } from \"../../basic_soundbank/basic_instrument\";\nimport type { SoundFontPreset } from \"./presets\";\nimport { generatorTypes } from \"../../basic_soundbank/generator_types\";\n\n/**\n * Preset_zones.ts\n * purpose: reads preset zones from soundfont and gets their respective samples and generators and modulators\n */\n\nexport class SoundFontPresetZone extends BasicPresetZone {\n    /**\n     * Creates a zone (preset)\n     */\n    public constructor(\n        preset: BasicPreset,\n        modulators: Modulator[],\n        generators: Generator[],\n        instruments: BasicInstrument[]\n    ) {\n        const instrumentID = generators.find(\n            (g) => g.generatorType === generatorTypes.instrument\n        );\n        let instrument = undefined;\n        if (instrumentID) {\n            instrument = instruments[instrumentID.generatorValue];\n        } else {\n            throw new Error(\"No instrument ID found in preset zone.\");\n        }\n        if (!instrument) {\n            throw new Error(\n                `Invalid instrument ID: ${instrumentID.generatorValue}, available instruments: ${instruments.length}`\n            );\n        }\n        super(preset, instrument);\n        this.addGenerators(...generators);\n        this.addModulators(...modulators);\n    }\n}\n\n/**\n * Reads the given preset zone\n */\nexport function applyPresetZones(\n    indexes: { mod: number[]; gen: number[] },\n    presetGens: Generator[],\n    presetMods: Modulator[],\n    instruments: BasicInstrument[],\n    presets: SoundFontPreset[]\n) {\n    const genStartIndexes = indexes.gen;\n    const modStartIndexes = indexes.mod;\n\n    let modIndex = 0;\n    let genIndex = 0;\n    for (const preset of presets) {\n        for (let i = 0; i < preset.zonesCount; i++) {\n            const gensStart = genStartIndexes[genIndex++];\n            const gensEnd = genStartIndexes[genIndex];\n            const gens = presetGens.slice(gensStart, gensEnd);\n            const modsStart = modStartIndexes[modIndex++];\n            const modsEnd = modStartIndexes[modIndex];\n            const mods = presetMods.slice(modsStart, modsEnd);\n            // Check for global zone\n            if (\n                gens.find(\n                    (g) => g.generatorType === generatorTypes.instrument\n                ) !== undefined\n            ) {\n                // Regular zone\n                preset.createSoundFontZone(mods, gens, instruments);\n            } else {\n                // global zone\n                preset.globalZone.addGenerators(...gens);\n                preset.globalZone.addModulators(...mods);\n            }\n        }\n    }\n}\n", "import { RIFFChunk } from \"../../../utils/riff_chunk\";\nimport { readLittleEndianIndexed } from \"../../../utils/byte_functions/little_endian\";\nimport { readBinaryStringIndexed } from \"../../../utils/byte_functions/string\";\nimport { BasicPreset } from \"../../basic_soundbank/basic_preset\";\nimport { SoundFontPresetZone } from \"./preset_zones\";\nimport type { BasicSoundBank } from \"../../basic_soundbank/basic_soundbank\";\nimport type { BasicInstrument } from \"../../basic_soundbank/basic_instrument\";\nimport type { Modulator } from \"../../basic_soundbank/modulator\";\nimport type { Generator } from \"../../basic_soundbank/generator\";\n\n/**\n * Parses soundfont presets, also includes function for getting the generators and samples from midi note and velocity\n */\n\nexport class SoundFontPreset extends BasicPreset {\n    public zoneStartIndex: number;\n    public zonesCount = 0;\n\n    /**\n     * Creates a preset\n     */\n    public constructor(presetChunk: RIFFChunk, sf2: BasicSoundBank) {\n        super(sf2);\n        this.name = readBinaryStringIndexed(presetChunk.data, 20).replace(\n            /\\d{3}:\\d{3}/,\n            \"\"\n        ); // Remove those pesky \"000:001\"\n\n        this.program = readLittleEndianIndexed(presetChunk.data, 2);\n        const wBank = readLittleEndianIndexed(presetChunk.data, 2);\n        this.bankMSB = wBank & 0x7f;\n        this.isGMGSDrum = (wBank & 0x80) > 0;\n        this.bankLSB = wBank >> 8;\n\n        this.zoneStartIndex = readLittleEndianIndexed(presetChunk.data, 2);\n\n        // Read the dword\n        this.library = readLittleEndianIndexed(presetChunk.data, 4);\n        this.genre = readLittleEndianIndexed(presetChunk.data, 4);\n        this.morphology = readLittleEndianIndexed(presetChunk.data, 4);\n    }\n\n    public createSoundFontZone(\n        modulators: Modulator[],\n        generators: Generator[],\n        instruments: BasicInstrument[]\n    ): SoundFontPresetZone {\n        const z = new SoundFontPresetZone(\n            this,\n            modulators,\n            generators,\n            instruments\n        );\n        this.zones.push(z);\n        return z;\n    }\n}\n\n/**\n * Reads the presets\n */\nexport function readPresets(\n    presetChunk: RIFFChunk,\n    parent: BasicSoundBank\n): SoundFontPreset[] {\n    const presets: SoundFontPreset[] = [];\n    while (presetChunk.data.length > presetChunk.data.currentIndex) {\n        const preset = new SoundFontPreset(presetChunk, parent);\n        if (presets.length > 0) {\n            const previous = presets[presets.length - 1];\n            previous.zonesCount =\n                preset.zoneStartIndex - previous.zoneStartIndex;\n        }\n        presets.push(preset);\n    }\n    // Remove EOP\n    presets.pop();\n    return presets;\n}\n", "/**\n * Instrument_zones.ts\n * purpose: reads instrument zones from soundfont and gets their respective samples and generators and modulators\n */\nimport { BasicInstrumentZone } from \"../../basic_soundbank/basic_instrument_zone\";\nimport type { SoundFontInstrument } from \"./instruments\";\nimport type { BasicSample } from \"../../basic_soundbank/basic_sample\";\nimport type { Modulator } from \"../../basic_soundbank/modulator\";\nimport type { Generator } from \"../../basic_soundbank/generator\";\nimport type { BasicInstrument } from \"../../basic_soundbank/basic_instrument\";\nimport { generatorTypes } from \"../../basic_soundbank/generator_types\";\n\nexport class SoundFontInstrumentZone extends BasicInstrumentZone {\n    /**\n     * Creates a zone (instrument)\n     */\n    public constructor(\n        inst: BasicInstrument,\n        modulators: Modulator[],\n        generators: Generator[],\n        samples: BasicSample[]\n    ) {\n        const sampleID = generators.find(\n            (g) => g.generatorType === generatorTypes.sampleID\n        );\n        let sample = undefined;\n        if (sampleID) {\n            sample = samples[sampleID.generatorValue];\n        } else {\n            throw new Error(\"No sample ID found in instrument zone.\");\n        }\n        if (!sample) {\n            throw new Error(\n                `Invalid sample ID: ${sampleID.generatorValue}, available samples: ${samples.length}`\n            );\n        }\n        super(inst, sample);\n        this.addGenerators(...generators);\n        this.addModulators(...modulators);\n    }\n}\n\n/**\n * Reads the given instrument zone\n */\nexport function applyInstrumentZones(\n    indexes: { mod: number[]; gen: number[] },\n    instrumentGenerators: Generator[],\n    instrumentModulators: Modulator[],\n    samples: BasicSample[],\n    instruments: SoundFontInstrument[]\n) {\n    const genStartIndexes = indexes.gen;\n    const modStartIndexes = indexes.mod;\n\n    let modIndex = 0;\n    let genIndex = 0;\n    for (const instrument of instruments) {\n        for (let i = 0; i < instrument.zonesCount; i++) {\n            const gensStart = genStartIndexes[genIndex++];\n            const gensEnd = genStartIndexes[genIndex];\n            const gens = instrumentGenerators.slice(gensStart, gensEnd);\n            const modsStart = modStartIndexes[modIndex++];\n            const modsEnd = modStartIndexes[modIndex];\n            const mods = instrumentModulators.slice(modsStart, modsEnd);\n            // Check for global zone\n            if (gens.find((g) => g.generatorType === generatorTypes.sampleID)) {\n                // Regular zone\n                instrument.createSoundFontZone(mods, gens, samples);\n            } else {\n                // global zone\n                instrument.globalZone.addGenerators(...gens);\n                instrument.globalZone.addModulators(...mods);\n            }\n        }\n    }\n}\n", "import { RIFFChunk } from \"../../../utils/riff_chunk\";\nimport { readLittleEndianIndexed } from \"../../../utils/byte_functions/little_endian\";\nimport { readBinaryStringIndexed } from \"../../../utils/byte_functions/string\";\nimport { BasicInstrument } from \"../../basic_soundbank/basic_instrument\";\n\nimport { SoundFontInstrumentZone } from \"./instrument_zones\";\nimport type { BasicSample } from \"../../basic_soundbank/basic_sample\";\nimport type { Modulator } from \"../../basic_soundbank/modulator\";\nimport type { Generator } from \"../../basic_soundbank/generator\";\n\n/**\n * Instrument.ts\n * purpose: parses soundfont instrument and stores them as a class\n */\n\nexport class SoundFontInstrument extends BasicInstrument {\n    public zoneStartIndex: number;\n\n    public zonesCount = 0;\n\n    /**\n     * Creates an instrument\n     */\n    public constructor(instrumentChunk: RIFFChunk) {\n        super();\n        this.name = readBinaryStringIndexed(instrumentChunk.data, 20);\n        this.zoneStartIndex = readLittleEndianIndexed(instrumentChunk.data, 2);\n    }\n\n    public createSoundFontZone(\n        modulators: Modulator[],\n        generators: Generator[],\n        samples: BasicSample[]\n    ): SoundFontInstrumentZone {\n        const z = new SoundFontInstrumentZone(\n            this,\n            modulators,\n            generators,\n            samples\n        );\n        this.zones.push(z);\n        return z;\n    }\n}\n\n/**\n * Reads the instruments\n */\nexport function readInstruments(\n    instrumentChunk: RIFFChunk\n): SoundFontInstrument[] {\n    const instruments: SoundFontInstrument[] = [];\n    while (instrumentChunk.data.length > instrumentChunk.data.currentIndex) {\n        const instrument = new SoundFontInstrument(instrumentChunk);\n\n        if (instruments.length > 0) {\n            const previous = instruments[instruments.length - 1];\n            previous.zonesCount =\n                instrument.zoneStartIndex - previous.zoneStartIndex;\n        }\n        instruments.push(instrument);\n    }\n    // Remove EOI\n    instruments.pop();\n    return instruments;\n}\n", "import {\n    readLittleEndianIndexed,\n    signedInt16\n} from \"../../../utils/byte_functions/little_endian\";\nimport { DecodedModulator, Modulator } from \"../../basic_soundbank/modulator\";\nimport type { RIFFChunk } from \"../../../utils/riff_chunk\";\nimport type { GeneratorType } from \"../../basic_soundbank/generator_types\";\n\n/**\n * Reads the modulator read\n */\nexport function readModulators(modulatorChunk: RIFFChunk): Modulator[] {\n    const mods = [];\n    while (modulatorChunk.data.length > modulatorChunk.data.currentIndex) {\n        const dataArray = modulatorChunk.data;\n        const sourceEnum = readLittleEndianIndexed(dataArray, 2);\n        const destination = readLittleEndianIndexed(dataArray, 2);\n        const amount = signedInt16(\n            dataArray[dataArray.currentIndex++],\n            dataArray[dataArray.currentIndex++]\n        );\n        const secondarySourceEnum = readLittleEndianIndexed(dataArray, 2);\n        const transformType = readLittleEndianIndexed(dataArray, 2);\n        mods.push(\n            new DecodedModulator(\n                sourceEnum,\n                secondarySourceEnum,\n                destination as GeneratorType,\n                amount,\n                transformType\n            )\n        );\n    }\n    // Remove terminal\n    mods.pop();\n    return mods;\n}\n", "import { readLittleEndianIndexed } from \"../../../utils/byte_functions/little_endian\";\nimport type { RIFFChunk } from \"../../../utils/riff_chunk\";\n\n/**\n * @param zonesChunk both pbag and ibag work\n */\nexport function readZoneIndexes(zonesChunk: RIFFChunk): {\n    mod: number[];\n    gen: number[];\n} {\n    const modStartIndexes: number[] = [];\n    const genStartIndexes: number[] = [];\n\n    while (zonesChunk.data.length > zonesChunk.data.currentIndex) {\n        genStartIndexes.push(readLittleEndianIndexed(zonesChunk.data, 2));\n        modStartIndexes.push(readLittleEndianIndexed(zonesChunk.data, 2));\n    }\n    return {\n        mod: modStartIndexes,\n        gen: genStartIndexes\n    };\n}\n", "import { IndexedByteArray } from \"../../../utils/indexed_array\";\nimport { readSamples } from \"./samples\";\nimport { readLittleEndianIndexed } from \"../../../utils/byte_functions/little_endian\";\nimport { readGenerators } from \"./generators\";\nimport { applyPresetZones } from \"./preset_zones\";\nimport { readPresets } from \"./presets\";\nimport { readInstruments } from \"./instruments\";\nimport { readModulators } from \"./modulators\";\nimport { readRIFFChunk, RIFFChunk } from \"../../../utils/riff_chunk\";\nimport { consoleColors } from \"../../../utils/other\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../../utils/loggin\";\nimport { readBinaryString, readBinaryStringIndexed } from \"../../../utils/byte_functions/string\";\nimport { stbvorbis } from \"../../../externals/stbvorbis_sync/stbvorbis_wrapper\";\nimport { BasicSoundBank } from \"../../basic_soundbank/basic_soundbank\";\nimport { applyInstrumentZones } from \"./instrument_zones\";\nimport { readZoneIndexes } from \"./zones\";\nimport type { SF2InfoFourCC } from \"../../types\";\nimport type { Generator } from \"../../basic_soundbank/generator\";\nimport type { Modulator } from \"../../basic_soundbank/modulator\";\nimport { parseDateString } from \"../../../utils/load_date\";\n\n/**\n * Soundfont.ts\n * purpose: parses a soundfont2 file\n */\n\nexport class SoundFont2 extends BasicSoundBank {\n    protected sampleDataStartIndex = 0;\n\n    /**\n     * Initializes a new SoundFont2 Parser and parses the given data array\n     */\n    public constructor(arrayBuffer: ArrayBuffer, warnDeprecated = true) {\n        super();\n        if (warnDeprecated) {\n            throw new Error(\n                \"Using the constructor directly is deprecated. Use SoundBankLoader.fromArrayBuffer() instead.\"\n            );\n        }\n        const mainFileArray = new IndexedByteArray(arrayBuffer);\n        SpessaSynthGroup(\"%cParsing a SoundFont2 file...\", consoleColors.info);\n        if (!mainFileArray) {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No data provided!\");\n        }\n\n        // Read the main chunk\n        const firstChunk = readRIFFChunk(mainFileArray, false);\n        this.verifyHeader(firstChunk, \"riff\");\n\n        const type = readBinaryStringIndexed(mainFileArray, 4).toLowerCase();\n        if (type !== \"sfbk\" && type !== \"sfpk\") {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(\n                `Invalid soundFont! Expected \"sfbk\" or \"sfpk\" got \"${type}\"`\n            );\n        }\n        /*\n        Some SF2Pack description:\n        this is essentially sf2, but the entire smpl chunk is compressed (we only support Ogg Vorbis here)\n        and the only other difference is that the main chunk isn't \"sfbk\" but rather \"sfpk\"\n         */\n        const isSF2Pack = type === \"sfpk\";\n\n        // INFO\n        const infoChunk = readRIFFChunk(mainFileArray);\n        this.verifyHeader(infoChunk, \"list\");\n        const infoString = readBinaryStringIndexed(infoChunk.data, 4);\n        if (infoString !== \"INFO\") {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(\n                `Invalid soundFont! Expected \"INFO\" or \"${infoString}\"`\n            );\n        }\n\n        let xdtaChunk: RIFFChunk | undefined = undefined;\n\n        while (infoChunk.data.length > infoChunk.data.currentIndex) {\n            const chunk = readRIFFChunk(infoChunk.data);\n            const text = readBinaryString(chunk.data, chunk.data.length);\n            // Special cases\n            const headerTyped = chunk.header as SF2InfoFourCC;\n            switch (headerTyped) {\n                case \"ifil\":\n                case \"iver\":\n                    const major = readLittleEndianIndexed(chunk.data, 2);\n                    const minor = readLittleEndianIndexed(chunk.data, 2);\n                    if (headerTyped === \"ifil\") {\n                        this.soundBankInfo.version = {\n                            major,\n                            minor\n                        };\n                    } else {\n                        this.soundBankInfo.romVersion = {\n                            major,\n                            minor\n                        };\n                    }\n                    break;\n\n                // Dmod: default modulators\n                case \"DMOD\": {\n                    // Override default modulators\n                    this.defaultModulators = readModulators(chunk);\n                    this.customDefaultModulators = true;\n                    break;\n                }\n\n                case \"LIST\": {\n                    // Possible xdta\n                    const listType = readBinaryStringIndexed(chunk.data, 4);\n                    if (listType === \"xdta\") {\n                        SpessaSynthInfo(\n                            \"%cExtended SF2 found!\",\n                            consoleColors.recognized\n                        );\n                        xdtaChunk = chunk;\n                    }\n                    break;\n                }\n\n                case \"ICRD\":\n                    this.soundBankInfo.creationDate = parseDateString(\n                        readBinaryStringIndexed(chunk.data, chunk.data.length)\n                    );\n                    break;\n\n                case \"ISFT\":\n                    this.soundBankInfo.software = text;\n                    break;\n\n                case \"IPRD\":\n                    this.soundBankInfo.product = text;\n                    break;\n\n                case \"IENG\":\n                    this.soundBankInfo.engineer = text;\n                    break;\n\n                case \"ICOP\":\n                    this.soundBankInfo.copyright = text;\n                    break;\n\n                case \"INAM\":\n                    this.soundBankInfo.name = text;\n                    break;\n\n                case \"ICMT\":\n                    this.soundBankInfo.comment = text;\n                    break;\n\n                case \"irom\":\n                    this.soundBankInfo.romInfo = text;\n                    break;\n\n                case \"isng\":\n                    this.soundBankInfo.soundEngine = text;\n            }\n        }\n        this.printInfo();\n        // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n        const xChunks: Partial<{\n            phdr: RIFFChunk;\n            pbag: RIFFChunk;\n            pmod: RIFFChunk;\n            pgen: RIFFChunk;\n            inst: RIFFChunk;\n            ibag: RIFFChunk;\n            imod: RIFFChunk;\n            igen: RIFFChunk;\n            shdr: RIFFChunk;\n        }> = {};\n        if (xdtaChunk !== undefined) {\n            // Read the hydra chunks\n            xChunks.phdr = readRIFFChunk(xdtaChunk.data);\n            xChunks.pbag = readRIFFChunk(xdtaChunk.data);\n            xChunks.pmod = readRIFFChunk(xdtaChunk.data);\n            xChunks.pgen = readRIFFChunk(xdtaChunk.data);\n            xChunks.inst = readRIFFChunk(xdtaChunk.data);\n            xChunks.ibag = readRIFFChunk(xdtaChunk.data);\n            xChunks.imod = readRIFFChunk(xdtaChunk.data);\n            xChunks.igen = readRIFFChunk(xdtaChunk.data);\n            xChunks.shdr = readRIFFChunk(xdtaChunk.data);\n        }\n\n        // SDTA\n        const sdtaChunk = readRIFFChunk(mainFileArray, false);\n        this.verifyHeader(sdtaChunk, \"list\");\n        this.verifyText(readBinaryStringIndexed(mainFileArray, 4), \"sdta\");\n\n        // Smpl\n        SpessaSynthInfo(\"%cVerifying smpl chunk...\", consoleColors.warn);\n        const sampleDataChunk = readRIFFChunk(mainFileArray, false);\n        this.verifyHeader(sampleDataChunk, \"smpl\");\n        let sampleData: IndexedByteArray | Float32Array;\n        // SF2Pack: the entire data is compressed\n        if (isSF2Pack) {\n            SpessaSynthInfo(\n                \"%cSF2Pack detected, attempting to decode the smpl chunk...\",\n                consoleColors.info\n            );\n            try {\n                sampleData = stbvorbis.decode(\n                    mainFileArray.buffer.slice(\n                        mainFileArray.currentIndex,\n                        mainFileArray.currentIndex + sdtaChunk.size - 12\n                    )\n                ).data[0];\n            } catch (e) {\n                SpessaSynthGroupEnd();\n                throw new Error(\n                    `SF2Pack Ogg Vorbis decode error: ${e as Error}`\n                );\n            }\n            SpessaSynthInfo(\n                `%cDecoded the smpl chunk! Length: %c${sampleData.length}`,\n                consoleColors.info,\n                consoleColors.value\n            );\n        } else {\n            sampleData = mainFileArray;\n            this.sampleDataStartIndex = mainFileArray.currentIndex;\n        }\n\n        SpessaSynthInfo(\n            `%cSkipping sample chunk, length: %c${sdtaChunk.size - 12}`,\n            consoleColors.info,\n            consoleColors.value\n        );\n        mainFileArray.currentIndex += sdtaChunk.size - 12;\n\n        // PDTA\n        SpessaSynthInfo(\"%cLoading preset data chunk...\", consoleColors.warn);\n        const presetChunk = readRIFFChunk(mainFileArray);\n        this.verifyHeader(presetChunk, \"list\");\n        readBinaryStringIndexed(presetChunk.data, 4);\n\n        // Read the hydra chunks\n        const phdrChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(phdrChunk, \"phdr\");\n\n        const pbagChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(pbagChunk, \"pbag\");\n\n        const pmodChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(pmodChunk, \"pmod\");\n\n        const pgenChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(pgenChunk, \"pgen\");\n\n        const instChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(instChunk, \"inst\");\n\n        const ibagChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(ibagChunk, \"ibag\");\n\n        const imodChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(imodChunk, \"imod\");\n\n        const igenChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(igenChunk, \"igen\");\n\n        const shdrChunk = readRIFFChunk(presetChunk.data);\n        this.verifyHeader(shdrChunk, \"shdr\");\n\n        SpessaSynthInfo(\"%cParsing samples...\", consoleColors.info);\n\n        /**\n         * Read all the samples\n         * (the current index points to start of the smpl read)\n         */\n        mainFileArray.currentIndex = this.sampleDataStartIndex;\n        const samples = readSamples(\n            shdrChunk,\n            sampleData,\n            xdtaChunk === undefined\n        );\n\n        if (xdtaChunk && xChunks.shdr) {\n            // Apply extensions to samples\n            const xSamples = readSamples(\n                xChunks.shdr,\n                new Float32Array(1),\n                false\n            );\n            if (xSamples.length === samples.length) {\n                samples.forEach((s, i) => {\n                    s.name += xSamples[i].name;\n                    s.linkedSampleIndex |= xSamples[i].linkedSampleIndex << 16;\n                });\n            }\n        }\n        // Trim names\n        samples.forEach((s) => (s.name = s.name.trim()));\n        this.samples.push(...samples);\n\n        /**\n         * Read all the instrument generators\n         */\n        const instrumentGenerators: Generator[] = readGenerators(igenChunk);\n\n        /**\n         * Read all the instrument modulators\n         */\n        const instrumentModulators: Modulator[] = readModulators(imodChunk);\n\n        const instruments = readInstruments(instChunk);\n\n        if (xdtaChunk && xChunks.inst) {\n            // Apply extensions to instruments\n            const xInst = readInstruments(xChunks.inst);\n            if (xInst.length === instruments.length) {\n                instruments.forEach((inst, i) => {\n                    inst.name += xInst[i].name;\n                    inst.zoneStartIndex |= xInst[i].zoneStartIndex;\n                });\n                // Adjust zone counts\n                instruments.forEach((inst, i) => {\n                    if (i < instruments.length - 1) {\n                        inst.zonesCount =\n                            instruments[i + 1].zoneStartIndex -\n                            inst.zoneStartIndex;\n                    }\n                });\n            }\n        }\n        // Trim names\n        instruments.forEach((i) => (i.name = i.name.trim()));\n        this.instruments.push(...instruments);\n\n        const ibagIndexes = readZoneIndexes(ibagChunk);\n\n        if (xdtaChunk && xChunks.ibag) {\n            const extraIndexes = readZoneIndexes(xChunks.ibag);\n            for (let i = 0; i < ibagIndexes.mod.length; i++) {\n                ibagIndexes.mod[i] |= extraIndexes.mod[i] << 16;\n            }\n            for (let i = 0; i < ibagIndexes.gen.length; i++) {\n                ibagIndexes.gen[i] |= extraIndexes.gen[i] << 16;\n            }\n        }\n\n        /**\n         * Read all the instrument zones (and apply them)\n         */\n        applyInstrumentZones(\n            ibagIndexes,\n            instrumentGenerators,\n            instrumentModulators,\n            this.samples,\n            instruments\n        );\n\n        /**\n         * Read all the preset generators\n         */\n        const presetGenerators: Generator[] = readGenerators(pgenChunk);\n\n        /**\n         * Read all the preset modulators\n         */\n        const presetModulators: Modulator[] = readModulators(pmodChunk);\n\n        const presets = readPresets(phdrChunk, this);\n\n        if (xdtaChunk && xChunks.phdr) {\n            // Apply extensions to presets\n            const xPreset = readPresets(xChunks.phdr, this);\n            if (xPreset.length === presets.length) {\n                presets.forEach((pres, i) => {\n                    pres.name += xPreset[i].name;\n                    pres.zoneStartIndex |= xPreset[i].zoneStartIndex;\n                });\n                // Adjust zone counts\n                presets.forEach((preset, i) => {\n                    if (i < presets.length - 1) {\n                        preset.zonesCount =\n                            presets[i + 1].zoneStartIndex -\n                            preset.zoneStartIndex;\n                    }\n                });\n            }\n        }\n\n        // Trim names\n        presets.forEach((p) => p.name === p.name.trim());\n        this.addPresets(...presets);\n\n        const pbagIndexes = readZoneIndexes(pbagChunk);\n\n        if (xdtaChunk && xChunks.pbag) {\n            const extraIndexes = readZoneIndexes(xChunks.pbag);\n            for (let i = 0; i < pbagIndexes.mod.length; i++) {\n                pbagIndexes.mod[i] |= extraIndexes.mod[i] << 16;\n            }\n            for (let i = 0; i < pbagIndexes.gen.length; i++) {\n                pbagIndexes.gen[i] |= extraIndexes.gen[i] << 16;\n            }\n        }\n\n        applyPresetZones(\n            pbagIndexes,\n            presetGenerators,\n            presetModulators,\n            this.instruments,\n            presets\n        );\n\n        this.flush();\n        SpessaSynthInfo(\n            `%cParsing finished! %c\"${this.soundBankInfo.name}\"%c has %c${this.presets.length}%c presets,\n        %c${this.instruments.length}%c instruments and %c${this.samples.length}%c samples.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        SpessaSynthGroupEnd();\n    }\n\n    protected verifyHeader(chunk: RIFFChunk, expected: string) {\n        if (chunk.header.toLowerCase() !== expected.toLowerCase()) {\n            SpessaSynthGroupEnd();\n            this.parsingError(\n                `Invalid chunk header! Expected \"${expected.toLowerCase()}\" got \"${chunk.header.toLowerCase()}\"`\n            );\n        }\n    }\n\n    protected verifyText(text: string, expected: string) {\n        if (text.toLowerCase() !== expected.toLowerCase()) {\n            SpessaSynthGroupEnd();\n            this.parsingError(\n                `Invalid FourCC: Expected \"${expected.toLowerCase()}\" got \"${text.toLowerCase()}\"\\``\n            );\n        }\n    }\n}\n", "import { BasicSoundBank } from \"./basic_soundbank/basic_soundbank\";\nimport { IndexedByteArray } from \"../utils/indexed_array\";\nimport { readBinaryStringIndexed } from \"../utils/byte_functions/string\";\nimport { SoundFont2 } from \"./soundfont/read/soundfont\";\nimport { DownloadableSounds } from \"./downloadable_sounds/downloadable_sounds\";\n\nexport class SoundBankLoader {\n    /**\n     * Loads a sound bank from a file buffer.\n     * @param buffer The binary file buffer to load.\n     * @returns The loaded sound bank, a BasicSoundBank instance.\n     */\n    public static fromArrayBuffer(buffer: ArrayBuffer): BasicSoundBank {\n        const check = buffer.slice(8, 12);\n        const a = new IndexedByteArray(check);\n        const id = readBinaryStringIndexed(a, 4).toLowerCase();\n        if (id === \"dls \") {\n            return this.loadDLS(buffer);\n        }\n        return new SoundFont2(buffer, false);\n    }\n\n    private static loadDLS(buffer: ArrayBuffer) {\n        const dls = DownloadableSounds.read(buffer);\n        return dls.toSF();\n    }\n}\n", "import { SpessaSynthInfo } from \"../utils/loggin\";\nimport { consoleColors } from \"../utils/other\";\nimport {\n    DEFAULT_SYNTH_METHOD_OPTIONS,\n    EMBEDDED_SOUND_BANK_ID,\n    MIDI_CHANNEL_COUNT\n} from \"./audio_engine/engine_components/synth_constants\";\nimport { stbvorbis } from \"../externals/stbvorbis_sync/stbvorbis_wrapper\";\nimport { VOLUME_ENVELOPE_SMOOTHING_FACTOR } from \"./audio_engine/engine_components/dsp_chain/volume_envelope\";\nimport {\n    getAllMasterParametersInternal,\n    getMasterParameterInternal,\n    setMasterParameterInternal\n} from \"./audio_engine/engine_methods/controller_control/master_parameters\";\nimport { SoundBankManager } from \"./audio_engine/engine_components/sound_bank_manager\";\nimport { PAN_SMOOTHING_FACTOR } from \"./audio_engine/engine_components/dsp_chain/stereo_panner\";\nimport { FILTER_SMOOTHING_FACTOR } from \"./audio_engine/engine_components/dsp_chain/lowpass_filter\";\nimport { getEvent } from \"../midi/midi_message\";\nimport { IndexedByteArray } from \"../utils/indexed_array\";\nimport { DEFAULT_SYNTH_OPTIONS } from \"./audio_engine/engine_components/synth_processor_options\";\nimport { fillWithDefaults } from \"../utils/fill_with_defaults\";\nimport { killVoicesIntenral } from \"./audio_engine/engine_methods/stopping_notes/voice_killing\";\nimport { getVoicesForPresetInternal, getVoicesInternal } from \"./audio_engine/engine_components/voice\";\nimport { systemExclusiveInternal } from \"./audio_engine/engine_methods/system_exclusive\";\nimport { resetAllControllersInternal } from \"./audio_engine/engine_methods/controller_control/reset_controllers\";\nimport { SynthesizerSnapshot } from \"./audio_engine/snapshot/synthesizer_snapshot\";\nimport type {\n    SynthMethodOptions,\n    SynthProcessorEvent,\n    SynthProcessorEventData,\n    SynthProcessorOptions,\n    VoiceList\n} from \"./types\";\nimport { type MIDIController, type MIDIMessageType, midiMessageTypes } from \"../midi/enums\";\nimport { ProtectedSynthValues } from \"./audio_engine/engine_components/internal_synth_values\";\nimport { KeyModifierManager } from \"./audio_engine/engine_components/key_modifier_manager\";\nimport { MIDIChannel } from \"./audio_engine/engine_components/midi_channel\";\nimport { SoundBankLoader } from \"../soundbank/sound_bank_loader\";\nimport { customControllers } from \"./enums\";\nimport type { MIDIPatch } from \"../soundbank/basic_soundbank/midi_patch\";\n\n/**\n * Processor.ts\n * purpose: the core synthesis engine\n */\n\n// The core synthesis engine of spessasynth.\nexport class SpessaSynthProcessor {\n    // The sound bank manager, which manages all sound banks and presets.\n    public soundBankManager: SoundBankManager = new SoundBankManager(\n        this.updatePresetList.bind(this)\n    );\n\n    /**\n     * All MIDI channels of the synthesizer.\n     */\n    public midiChannels: MIDIChannel[] = [];\n\n    /**\n     * Handles the custom key overrides: velocity and preset\n     */\n    public keyModifierManager: KeyModifierManager = new KeyModifierManager();\n\n    /**\n     * Current total amount of voices that are currently playing.\n     */\n    public totalVoicesAmount = 0;\n    /**\n     * Controls if the processor is fully initialized.\n     */\n    public readonly processorInitialized: Promise<boolean> =\n        stbvorbis.isInitialized;\n    /**\n     * The current time of the synthesizer, in seconds. You probably should not modify this directly.\n     */\n    public currentSynthTime = 0;\n    /**\n     * Sample rate in Hertz.\n     */\n    public readonly sampleRate: number;\n    /**\n     * Are the chorus and reverb effects enabled?\n     */\n    public enableEffects = true;\n\n    /**\n     * Is the event system enabled?\n     */\n    public enableEventSystem: boolean;\n\n    /**\n     * Calls when an event occurs.\n     * @param event The event that occurred.\n     */\n    public onEventCall?: (event: SynthProcessorEvent) => unknown;\n\n    /**\n     * Executes a system exclusive message for the synthesizer.\n     * @param syx The system exclusive message as an array of bytes.\n     * @param channelOffset The channel offset to apply (default is 0).\n     */\n    public readonly systemExclusive: typeof systemExclusiveInternal =\n        systemExclusiveInternal.bind(this) as typeof systemExclusiveInternal;\n    /**\n     * Executes a full system reset of all controllers.\n     * This will reset all controllers to their default values,\n     * except for the locked controllers.\n     */\n    public readonly resetAllControllers: typeof resetAllControllersInternal =\n        resetAllControllersInternal.bind(\n            this\n        ) as typeof resetAllControllersInternal;\n    /**\n     * Sets a master parameter of the synthesizer.\n     * @param type The type of the master parameter to set.\n     * @param value The value to set for the master parameter.\n     */\n    public readonly setMasterParameter: typeof setMasterParameterInternal =\n        setMasterParameterInternal.bind(\n            this\n        ) as typeof setMasterParameterInternal;\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets a master parameter of the synthesizer.\n     * @param type The type of the master parameter to get.\n     * @returns The value of the master parameter.\n     */\n    public readonly getMasterParameter: typeof getMasterParameterInternal =\n        getMasterParameterInternal.bind(\n            this\n        ) as typeof getMasterParameterInternal;\n    /**\n     * Gets all master parameters of the synthesizer.\n     * @returns All the master parameters.\n     */\n    public readonly getAllMasterParameters: typeof getAllMasterParametersInternal =\n        getAllMasterParametersInternal.bind(\n            this\n        ) as typeof getAllMasterParametersInternal;\n    /**\n     * Gets voices for a preset.\n     * @param preset The preset to get voices for.\n     * @param bankMSB The bank to cache the voices in.\n     * @param program Program to cache the voices in.\n     * @param midiNote The MIDI note to use.\n     * @param velocity The velocity to use.\n     * @param realKey The real MIDI note if the \"midiNote\" was changed by MIDI Tuning Standard.\n     * @returns Output is an array of voices.\n     * @remarks\n     * This is a public method, but it is only intended to be used by the sequencer.\n     */\n    public readonly getVoicesForPreset: typeof getVoicesForPresetInternal =\n        getVoicesForPresetInternal.bind(\n            this\n        ) as typeof getVoicesForPresetInternal;\n    /**\n     * Kills the specified number of voices based on their priority.\n     * @param amount The number of voices to remove.\n     */\n    public readonly killVoices: typeof killVoicesIntenral =\n        killVoicesIntenral.bind(this) as typeof killVoicesIntenral;\n    // Protected methods\n    protected readonly getVoices = getVoicesInternal.bind(this);\n    // This contains the properties that have to be accessed from the MIDI channels.\n    protected privateProps: ProtectedSynthValues;\n    /**\n     * Tor applying the snapshot after an override sound bank too.\n     */\n    protected savedSnapshot?: SynthesizerSnapshot;\n    /**\n     * Synth's event queue from the main thread\n     */\n    protected eventQueue: { callback: () => unknown; time: number }[] = [];\n\n    // The time of a single sample, in seconds.\n    private readonly sampleTime: number;\n\n    /**\n     * Creates a new synthesizer engine.\n     * @param sampleRate sample rate, in Hertz.\n     * @param opts the processor's options.\n     */\n    public constructor(\n        sampleRate: number,\n        opts: Partial<SynthProcessorOptions> = DEFAULT_SYNTH_OPTIONS\n    ) {\n        const options: SynthProcessorOptions = fillWithDefaults(\n            opts,\n            DEFAULT_SYNTH_OPTIONS\n        );\n        this.enableEffects = options.enableEffects;\n        this.enableEventSystem = options.enableEventSystem;\n        this.currentSynthTime = options.initialTime;\n        this.sampleRate = sampleRate;\n        this.sampleTime = 1 / sampleRate;\n        if (isNaN(options.initialTime) || isNaN(sampleRate)) {\n            throw new Error(\"Initial time or sample rate is NaN!\");\n        }\n\n        // Initialize the protected synth values\n        this.privateProps = new ProtectedSynthValues(\n            this.callEvent.bind(this),\n            this.getVoices.bind(this),\n            this.killVoices.bind(this),\n            // These smoothing factors were tested on 44,100 Hz, adjust them to target sample rate here\n            // Volume envelope smoothing factor\n            VOLUME_ENVELOPE_SMOOTHING_FACTOR * (44100 / sampleRate),\n            // Pan smoothing factor\n            PAN_SMOOTHING_FACTOR * (44100 / sampleRate),\n            // Filter smoothing factor\n            FILTER_SMOOTHING_FACTOR * (44100 / sampleRate)\n        );\n\n        for (let i = 0; i < MIDI_CHANNEL_COUNT; i++) {\n            // Don't send events as we're creating the initial channels\n            this.createMIDIChannelInternal(false);\n        }\n        void this.processorInitialized.then(() => {\n            SpessaSynthInfo(\n                \"%cSpessaSynth is ready!\",\n                consoleColors.recognized\n            );\n        });\n    }\n\n    /**\n     * Applies the snapshot to the synth\n     */\n    public applySynthesizerSnapshot(snapshot: SynthesizerSnapshot) {\n        this.savedSnapshot = snapshot;\n        snapshot.apply(this);\n        SpessaSynthInfo(\"%cFinished applying snapshot!\", consoleColors.info);\n        this.resetAllControllers();\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets a synthesizer snapshot from this processor instance.\n     */\n    public getSnapshot(): SynthesizerSnapshot {\n        return SynthesizerSnapshot.create(this);\n    }\n\n    /**\n     * Sets the embedded sound bank.\n     * @param bank The sound bank file to set.\n     * @param offset The bank offset of the embedded sound bank.\n     */\n    public setEmbeddedSoundBank(bank: ArrayBuffer, offset: number) {\n        // The embedded bank is set as the first bank in the manager,\n        // With a special ID that is randomized.\n        const loadedFont = SoundBankLoader.fromArrayBuffer(bank);\n        this.soundBankManager.addSoundBank(\n            loadedFont,\n            EMBEDDED_SOUND_BANK_ID,\n            offset\n        );\n        // Rearrange so the embedded is first (most important as it overrides all others)\n        const order = this.soundBankManager.priorityOrder;\n        order.pop();\n        order.unshift(EMBEDDED_SOUND_BANK_ID);\n        this.soundBankManager.priorityOrder = order;\n\n        // Apply snapshot again if applicable\n        if (this.savedSnapshot !== undefined) {\n            this.applySynthesizerSnapshot(this.savedSnapshot);\n        }\n        SpessaSynthInfo(\n            `%cEmbedded sound bank set at offset %c${offset}`,\n            consoleColors.recognized,\n            consoleColors.value\n        );\n    }\n\n    // Removes the embedded sound bank from the synthesizer.\n    public clearEmbeddedBank() {\n        if (\n            this.soundBankManager.soundBankList.some(\n                (s) => s.id === EMBEDDED_SOUND_BANK_ID\n            )\n        ) {\n            this.soundBankManager.deleteSoundBank(EMBEDDED_SOUND_BANK_ID);\n        }\n    }\n\n    // Creates a new MIDI channel for the synthesizer.\n    public createMIDIChannel() {\n        this.createMIDIChannelInternal(true);\n    }\n\n    /**\n     * Stops all notes on all channels.\n     * @param force if true, all notes are stopped immediately, otherwise they are stopped gracefully.\n     */\n    public stopAllChannels(force = false) {\n        SpessaSynthInfo(\"%cStop all received!\", consoleColors.info);\n        for (const channel of this.midiChannels) {\n            channel.stopAllNotes(force);\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Renders float32 audio data to stereo outputs; buffer size of 128 is recommended.\n     * All float arrays must have the same length.\n     * @param outputs output stereo channels (L, R).\n     * @param reverb reverb stereo channels (L, R).\n     * @param chorus chorus stereo channels (L, R).\n     * @param startIndex start offset of the passed arrays, rendering starts at this index, defaults to 0.\n     * @param sampleCount the length of the rendered buffer, defaults to float32array length - startOffset.\n     */\n    public renderAudio(\n        outputs: Float32Array[],\n        reverb: Float32Array[],\n        chorus: Float32Array[],\n        startIndex = 0,\n        sampleCount = 0\n    ) {\n        this.renderAudioSplit(\n            reverb,\n            chorus,\n            Array(16).fill(outputs) as Float32Array[][],\n            startIndex,\n            sampleCount\n        );\n    }\n\n    /**\n     * Renders the float32 audio data of each channel; buffer size of 128 is recommended.\n     * All float arrays must have the same length.\n     * @param reverbChannels reverb stereo channels (L, R).\n     * @param chorusChannels chorus stereo channels (L, R).\n     * @param separateChannels a total of 16 stereo pairs (L, R) for each MIDI channel.\n     * @param startIndex start offset of the passed arrays, rendering starts at this index, defaults to 0.\n     * @param sampleCount the length of the rendered buffer, defaults to float32array length - startOffset.\n     */\n    public renderAudioSplit(\n        reverbChannels: Float32Array[],\n        chorusChannels: Float32Array[],\n        separateChannels: Float32Array[][],\n        startIndex = 0,\n        sampleCount = 0\n    ) {\n        // Process event queue\n        const time = this.currentSynthTime;\n        while (this.eventQueue[0]?.time <= time) {\n            this.eventQueue.shift()?.callback();\n        }\n        const revL = reverbChannels[0];\n        const revR = reverbChannels[1];\n        const chrL = chorusChannels[0];\n        const chrR = chorusChannels[1];\n\n        // Validate\n        startIndex = Math.max(startIndex, 0);\n        const quantumSize =\n            sampleCount || separateChannels[0][0].length - startIndex;\n\n        // For every channel\n        this.totalVoicesAmount = 0;\n        this.midiChannels.forEach((channel, index) => {\n            if (channel.voices.length < 1 || channel.isMuted) {\n                // There's nothing to do!\n                return;\n            }\n            const voiceCount = channel.voices.length;\n            const ch = index % 16;\n\n            // Render to the appropriate output\n            channel.renderAudio(\n                separateChannels[ch][0],\n                separateChannels[ch][1],\n                revL,\n                revR,\n                chrL,\n                chrR,\n                startIndex,\n                quantumSize\n            );\n\n            this.totalVoicesAmount += channel.voices.length;\n            // If voice count changed, update voice amount\n            if (channel.voices.length !== voiceCount) {\n                channel.sendChannelProperty();\n            }\n        });\n\n        // Advance the time appropriately\n        this.currentSynthTime += quantumSize * this.sampleTime;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     *  Destroy the synthesizer processor, clearing all channels and voices.\n     *  This is irreversible, so use with caution.\n     */\n    public destroySynthProcessor() {\n        this.midiChannels.forEach((c) => {\n            c.voices.length = 0;\n            c.sustainedVoices.length = 0;\n            c.lockedControllers = [];\n            c.preset = undefined;\n        });\n        this.clearCache();\n        this.midiChannels.length = 0;\n        this.soundBankManager.destroy();\n    }\n\n    /**\n     * Executes a MIDI controller change message on the specified channel.\n     * @param channel The MIDI channel to change the controller on.\n     * @param controllerNumber The MIDI controller number to change.\n     * @param controllerValue The value to set the controller to.\n     */\n    public controllerChange(\n        channel: number,\n        controllerNumber: MIDIController,\n        controllerValue: number\n    ) {\n        this.midiChannels[channel].controllerChange(\n            controllerNumber,\n            controllerValue\n        );\n    }\n\n    /**\n     * Executes a MIDI Note-on message on the specified channel.\n     * @param channel The MIDI channel to send the note on.\n     * @param midiNote The MIDI note number to play.\n     * @param velocity The velocity of the note, from 0 to 127.\n     * @remarks\n     * If the velocity is 0, it will be treated as a Note-off message.\n     */\n    public noteOn(channel: number, midiNote: number, velocity: number) {\n        this.midiChannels[channel].noteOn(midiNote, velocity);\n    }\n\n    /**\n     * Executes a MIDI Note-off message on the specified channel.\n     * @param channel The MIDI channel to send the note off.\n     * @param midiNote The MIDI note number to stop playing.\n     */\n    public noteOff(channel: number, midiNote: number) {\n        this.midiChannels[channel].noteOff(midiNote);\n    }\n\n    /**\n     * Executes a MIDI Poly Pressure (Aftertouch) message on the specified channel.\n     * @param channel The MIDI channel to send the poly pressure on.\n     * @param midiNote The MIDI note number to apply the pressure to.\n     * @param pressure The pressure value, from 0 to 127.\n     */\n    public polyPressure(channel: number, midiNote: number, pressure: number) {\n        this.midiChannels[channel].polyPressure(midiNote, pressure);\n    }\n\n    /**\n     * Executes a MIDI Channel Pressure (Aftertouch) message on the specified channel.\n     * @param channel The MIDI channel to send the channel pressure on.\n     * @param pressure The pressure value, from 0 to 127.\n     */\n    public channelPressure(channel: number, pressure: number) {\n        this.midiChannels[channel].channelPressure(pressure);\n    }\n\n    /**\n     * Executes a MIDI Pitch Wheel message on the specified channel.\n     * @param channel The MIDI channel to send the pitch wheel on.\n     * @param pitch The new pitch value: 0-16384\n     */\n    public pitchWheel(channel: number, pitch: number) {\n        this.midiChannels[channel].pitchWheel(pitch);\n    }\n\n    /**\n     * Executes a MIDI Program Change message on the specified channel.\n     * @param channel The MIDI channel to send the program change on.\n     * @param programNumber The program number to change to, from 0 to 127.\n     */\n    public programChange(channel: number, programNumber: number) {\n        this.midiChannels[channel].programChange(programNumber);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Processes a raw MIDI message.\n     * @param message The message to process.\n     * @param channelOffset The channel offset for the message.\n     * @param force If true, forces the message to be processed.\n     * @param options Additional options for scheduling the message.\n     */\n    public processMessage(\n        message: Uint8Array | number[],\n        channelOffset = 0,\n        force = false,\n        options: SynthMethodOptions = DEFAULT_SYNTH_METHOD_OPTIONS\n    ) {\n        const call = () => {\n            const statusByteData = getEvent(message[0] as MIDIMessageType);\n\n            const channel = statusByteData.channel + channelOffset;\n            // Process the event\n            switch (statusByteData.status as MIDIMessageType) {\n                case midiMessageTypes.noteOn: {\n                    const velocity = message[2];\n                    if (velocity > 0) {\n                        this.noteOn(channel, message[1], velocity);\n                    } else {\n                        this.noteOff(channel, message[1]);\n                    }\n                    break;\n                }\n\n                case midiMessageTypes.noteOff:\n                    if (force) {\n                        this.midiChannels[channel].killNote(message[1]);\n                    } else {\n                        this.noteOff(channel, message[1]);\n                    }\n                    break;\n\n                case midiMessageTypes.pitchWheel:\n                    // LSB | (MSB << 7)\n                    this.pitchWheel(channel, (message[2] << 7) | message[1]);\n                    break;\n\n                case midiMessageTypes.controllerChange:\n                    this.controllerChange(\n                        channel,\n                        message[1] as MIDIController,\n                        message[2]\n                    );\n                    break;\n\n                case midiMessageTypes.programChange:\n                    this.programChange(channel, message[1]);\n                    break;\n\n                case midiMessageTypes.polyPressure:\n                    this.polyPressure(channel, message[0], message[1]);\n                    break;\n\n                case midiMessageTypes.channelPressure:\n                    this.channelPressure(channel, message[1]);\n                    break;\n\n                case midiMessageTypes.systemExclusive:\n                    this.systemExclusive(\n                        new IndexedByteArray(message.slice(1)),\n                        channelOffset\n                    );\n                    break;\n\n                case midiMessageTypes.reset:\n                    this.stopAllChannels(true);\n                    this.resetAllControllers();\n                    break;\n\n                default:\n                    break;\n            }\n        };\n\n        const time = options.time;\n        if (time > this.currentSynthTime) {\n            this.eventQueue.push({\n                callback: call.bind(this),\n                time: time\n            });\n            this.eventQueue.sort((e1, e2) => e1.time - e2.time);\n        } else {\n            call();\n        }\n    }\n\n    // Clears the synthesizer's voice cache.\n    public clearCache() {\n        this.privateProps.cachedVoices = [];\n    }\n\n    /**\n     * @param volume {number} 0 to 1\n     */\n    protected setMIDIVolume(volume: number) {\n        // GM2 specification, section 4.1: volume is squared.\n        // Though, according to my own testing, Math.E seems like a better choice\n        this.privateProps.midiVolume = Math.pow(volume, Math.E);\n    }\n\n    /**\n     * Sets the synth's primary tuning.\n     * @param cents\n     */\n    protected setMasterTuning(cents: number) {\n        cents = Math.round(cents);\n        for (const channel of this.midiChannels) {\n            channel.setCustomController(customControllers.masterTuning, cents);\n        }\n    }\n\n    /**\n     * Calls synth event\n     * @param eventName the event name\n     * @param eventData the event data\n     */\n    protected callEvent<K extends keyof SynthProcessorEventData>(\n        eventName: K,\n        eventData: SynthProcessorEventData[K]\n    ) {\n        this.onEventCall?.({\n            type: eventName,\n            data: eventData\n        } as SynthProcessorEvent);\n    }\n\n    protected getCachedVoice(\n        patch: MIDIPatch,\n        midiNote: number,\n        velocity: number\n    ): VoiceList | undefined {\n        let bankMSB = patch.bankMSB;\n        let bankLSB = patch.bankLSB;\n        const { isGMGSDrum, program } = patch;\n        if (isGMGSDrum) {\n            bankMSB = 128;\n            bankLSB = 0;\n        }\n        return this.privateProps.cachedVoices?.[bankMSB]?.[bankLSB]?.[\n            program\n        ]?.[midiNote]?.[velocity];\n    }\n\n    protected setCachedVoice(\n        patch: MIDIPatch,\n        midiNote: number,\n        velocity: number,\n        voices: VoiceList\n    ) {\n        let bankMSB = patch.bankMSB;\n        let bankLSB = patch.bankLSB;\n        const { isGMGSDrum, program } = patch;\n        if (isGMGSDrum) {\n            bankMSB = 128;\n            bankLSB = 0;\n        }\n        // Make sure that it exists\n        if (!this.privateProps.cachedVoices[bankMSB]) {\n            this.privateProps.cachedVoices[bankMSB] = [];\n        }\n        if (!this.privateProps.cachedVoices[bankMSB][bankLSB]) {\n            this.privateProps.cachedVoices[bankMSB][bankLSB] = [];\n        }\n        if (!this.privateProps.cachedVoices[bankMSB][bankLSB][program]) {\n            this.privateProps.cachedVoices[bankMSB][bankLSB][program] = [];\n        }\n        if (\n            !this.privateProps.cachedVoices[bankMSB][bankLSB][program][midiNote]\n        ) {\n            this.privateProps.cachedVoices[bankMSB][bankLSB][program][\n                midiNote\n            ] = [];\n        }\n\n        // Cache\n        this.privateProps.cachedVoices[bankMSB][bankLSB][program][midiNote][\n            velocity\n        ] = voices;\n    }\n\n    private createMIDIChannelInternal(sendEvent: boolean) {\n        const channel: MIDIChannel = new MIDIChannel(\n            this,\n            this.privateProps,\n            this.privateProps.defaultPreset,\n            this.midiChannels.length\n        );\n        this.midiChannels.push(channel);\n        if (sendEvent) {\n            this.callEvent(\"newChannel\", undefined);\n            channel.sendChannelProperty();\n            this.midiChannels[this.midiChannels.length - 1].setDrums(true);\n        }\n    }\n\n    private updatePresetList() {\n        const mainFont = this.soundBankManager.presetList;\n        this.clearCache();\n        this.privateProps.callEvent(\"presetListChange\", mainFont);\n        this.getDefaultPresets();\n        // Unlock presets\n        this.midiChannels.forEach((c) => {\n            c.setPresetLock(false);\n        });\n        this.resetAllControllers(false);\n    }\n\n    private getDefaultPresets() {\n        // Override this to XG, to set the default preset to NOT be XG drums!\n        this.privateProps.defaultPreset = this.soundBankManager.getPreset(\n            {\n                bankLSB: 0,\n                bankMSB: 0,\n                program: 0,\n                isGMGSDrum: false\n            },\n            \"xg\"\n        );\n        this.privateProps.drumPreset = this.soundBankManager.getPreset(\n            {\n                bankLSB: 0,\n                bankMSB: 0,\n                program: 0,\n                isGMGSDrum: true\n            },\n            \"gs\"\n        );\n    }\n}\n", "/**\n * Other.js\n * purpose: contains some useful functions that don't belong in any specific category\n */\n\nimport { SpessaSynthCoreUtils } from \"spessasynth_core\";\n\nconst consoleColors = SpessaSynthCoreUtils.consoleColors;\n\nexport { consoleColors };\n\n", "export const WORKLET_PROCESSOR_NAME = \"spessasynth-worklet-processor\";\n", "/**\n * Fills the object with default values.\n * @param obj object to fill.\n * @param defObj object to fill with.\n */\nexport function fillWithDefaults<T>(obj: Partial<T> | undefined, defObj: T): T {\n    return {\n        ...defObj,\n        ...(obj ?? {})\n    };\n}\n", "import type { SequencerOptions } from \"./types\";\n\nexport const DEFAULT_SEQUENCER_OPTIONS: SequencerOptions = {\n    skipToFirstNoteOn: true,\n    initialPlaybackRate: 1\n};\n", "import { BasicMIDI, MIDITrack } from \"spessasynth_core\";\n\nexport class MIDIDataTrack extends MIDITrack {\n    /**\n     * THIS DATA WILL BE EMPTY! USE sequencer.getMIDI() TO GET THE ACTUAL DATA!\n     */\n    public events: never[] = [];\n\n    public constructor(track: MIDITrack) {\n        super();\n        super.copyFrom(track);\n        this.events = [];\n    }\n}\n\n/**\n * A simplified version of the MIDI, accessible at all times from the Sequencer.\n * Use getMIDI() to get the actual sequence.\n * This class contains all properties that MIDI does, except for tracks and the embedded sound bank.\n */\nexport class MIDIData extends BasicMIDI {\n    public override tracks: MIDIDataTrack[];\n\n    /**\n     * THIS DATA WILL BE EMPTY! USE sequencer.getMIDI() TO GET THE ACTUAL DATA!\n     */\n    public override embeddedSoundBank = undefined;\n\n    /**\n     * The byte length of the sound bank if it exists.\n     */\n    public readonly embeddedSoundBankSize?: number;\n\n    public constructor(mid: BasicMIDI) {\n        super();\n        super.copyMetadataFrom(mid);\n        this.tracks = mid.tracks.map((t) => new MIDIDataTrack(t));\n        if (mid instanceof MIDIData) {\n            this.embeddedSoundBankSize = mid.embeddedSoundBankSize;\n        } else {\n            this.embeddedSoundBankSize = mid?.embeddedSoundBank?.byteLength;\n        }\n    }\n}\n", "export const songChangeType = {\n    shuffleOn: 1, // No additional data\n    shuffleOff: 2, // No additional data\n    index: 3 // SongIndex<number>\n} as const;\nexport type SongChangeType =\n    (typeof songChangeType)[keyof typeof songChangeType];\n", "import {\n    ALL_CHANNELS_OR_DIFFERENT_ACTION,\n    BasicMIDI,\n    SoundBankLoader,\n    SpessaSynthCoreUtils as util,\n    SpessaSynthLogging,\n    SpessaSynthProcessor,\n    SpessaSynthSequencer,\n    SynthesizerSnapshot,\n    type SynthProcessorOptions\n} from \"spessasynth_core\";\nimport type {\n    BasicSynthesizerMessage,\n    BasicSynthesizerReturnMessage,\n    SynthesizerProgress,\n    SynthesizerReturn\n} from \"../types.ts\";\nimport { MIDIData } from \"../../sequencer/midi_data.ts\";\nimport { songChangeType } from \"../../sequencer/enums.ts\";\n\nexport type PostMessageSynthCore = (\n    data: BasicSynthesizerReturnMessage,\n    transfer?: Transferable[]\n) => unknown;\n\n/**\n * The interface for the audio processing code that uses spessasynth_core and runs on a separate thread.\n */\nexport abstract class BasicSynthesizerCore {\n    public readonly synthesizer: SpessaSynthProcessor;\n    public readonly sequencer: SpessaSynthSequencer;\n    protected readonly post: PostMessageSynthCore;\n    /**\n     * Indicates if the processor is alive.\n     * @protected\n     */\n    protected alive = false;\n\n    protected constructor(\n        sampleRate: number,\n        options: SynthProcessorOptions,\n        postMessage: PostMessageSynthCore\n    ) {\n        this.synthesizer = new SpessaSynthProcessor(sampleRate, options);\n        this.sequencer = new SpessaSynthSequencer(this.synthesizer);\n        this.post = postMessage;\n\n        // Prepare synthesizer connections\n        this.synthesizer.onEventCall = (event) => {\n            this.post({\n                type: \"eventCall\",\n                data: event,\n                currentTime: this.synthesizer.currentSynthTime\n            });\n        };\n\n        // Prepare sequencer connections\n        this.sequencer.onEventCall = (e) => {\n            if (e.type === \"songListChange\") {\n                const songs = e.data.newSongList;\n                const midiDatas = songs.map((s) => {\n                    return new MIDIData(s);\n                });\n                this.post({\n                    type: \"sequencerReturn\",\n                    data: {\n                        type: e.type,\n                        data: { newSongList: midiDatas }\n                    },\n                    currentTime: this.synthesizer.currentSynthTime\n                });\n                return;\n            }\n            this.post({\n                type: \"sequencerReturn\",\n                data: e,\n                currentTime: this.synthesizer.currentSynthTime\n            });\n        };\n    }\n\n    protected postReady<K extends keyof SynthesizerReturn>(\n        type: K,\n        data: SynthesizerReturn[K],\n        transferable: Transferable[] = []\n    ) {\n        this.post(\n            {\n                type: \"isFullyInitialized\",\n                data: {\n                    type,\n                    data\n                } as {\n                    [K in keyof SynthesizerReturn]: {\n                        type: K;\n                        data: SynthesizerReturn[K];\n                    };\n                }[keyof SynthesizerReturn],\n                currentTime: this.synthesizer.currentSynthTime\n            },\n            transferable\n        );\n    }\n\n    protected postProgress<K extends keyof SynthesizerProgress>(\n        type: K,\n        data: SynthesizerProgress[K]\n    ) {\n        this.post({\n            type: \"renderingProgress\",\n            data: {\n                type,\n                data\n            } as {\n                [K in keyof SynthesizerProgress]: {\n                    type: K;\n                    data: SynthesizerProgress[K];\n                };\n            }[keyof SynthesizerProgress],\n            currentTime: this.synthesizer.currentSynthTime\n        });\n    }\n\n    protected destroy() {\n        this.synthesizer.destroySynthProcessor();\n        // @ts-expect-error JS Deletion\n        // noinspection JSConstantReassignment\n        delete this.synthesizer;\n        // @ts-expect-error JS Deletion\n        // noinspection JSConstantReassignment\n        delete this.sequencer;\n    }\n\n    protected handleMessage(m: BasicSynthesizerMessage) {\n        const channel = m.channelNumber;\n\n        let channelObject:\n            | (typeof this.synthesizer.midiChannels)[number]\n            | undefined = undefined;\n        if (channel >= 0) {\n            channelObject = this.synthesizer.midiChannels[channel];\n            if (channelObject === undefined) {\n                util.SpessaSynthWarn(\n                    `Trying to access channel ${channel} which does not exist... ignoring!`\n                );\n                return;\n            }\n        }\n        switch (m.type) {\n            case \"midiMessage\":\n                this.synthesizer.processMessage(\n                    m.data.messageData,\n                    m.data.channelOffset,\n                    m.data.force,\n                    m.data.options\n                );\n                break;\n\n            case \"customCcChange\":\n                // Custom controller change\n                channelObject?.setCustomController(\n                    m.data.ccNumber,\n                    m.data.ccValue\n                );\n                break;\n\n            case \"ccReset\":\n                if (channel === ALL_CHANNELS_OR_DIFFERENT_ACTION) {\n                    this.synthesizer.resetAllControllers();\n                } else {\n                    channelObject?.resetControllers();\n                }\n                break;\n\n            case \"setChannelVibrato\":\n                if (channel === ALL_CHANNELS_OR_DIFFERENT_ACTION) {\n                    for (const chan of this.synthesizer.midiChannels) {\n                        if (m.data.rate === ALL_CHANNELS_OR_DIFFERENT_ACTION) {\n                            chan.disableAndLockGSNRPN();\n                        } else {\n                            chan.setVibrato(\n                                m.data.depth,\n                                m.data.rate,\n                                m.data.delay\n                            );\n                        }\n                    }\n                } else if (m.data.rate === ALL_CHANNELS_OR_DIFFERENT_ACTION) {\n                    channelObject?.disableAndLockGSNRPN();\n                } else {\n                    channelObject?.setVibrato(\n                        m.data.depth,\n                        m.data.rate,\n                        m.data.delay\n                    );\n                }\n                break;\n\n            case \"stopAll\":\n                if (channel === ALL_CHANNELS_OR_DIFFERENT_ACTION) {\n                    this.synthesizer.stopAllChannels(m.data === 1);\n                } else {\n                    channelObject?.stopAllNotes(m.data === 1);\n                }\n                break;\n\n            case \"killNotes\":\n                this.synthesizer.killVoices(m.data);\n                break;\n\n            case \"muteChannel\":\n                channelObject?.muteChannel(m.data);\n                break;\n\n            case \"addNewChannel\":\n                this.synthesizer.createMIDIChannel();\n                break;\n\n            case \"setMasterParameter\":\n                this.synthesizer.setMasterParameter(m.data.type, m.data.data);\n                break;\n\n            case \"setDrums\":\n                channelObject?.setDrums(m.data);\n                break;\n\n            case \"transposeChannel\":\n                channelObject?.transposeChannel(m.data.semitones, m.data.force);\n                break;\n\n            case \"lockController\":\n                if (\n                    m.data.controllerNumber === ALL_CHANNELS_OR_DIFFERENT_ACTION\n                ) {\n                    channelObject?.setPresetLock(m.data.isLocked);\n                } else {\n                    if (!channelObject) {\n                        return;\n                    }\n                    channelObject.lockedControllers[m.data.controllerNumber] =\n                        m.data.isLocked;\n                }\n                break;\n\n            case \"sequencerSpecific\": {\n                if (!this.sequencer) {\n                    return;\n                }\n                const seq = this.sequencer;\n                const seqMsg = m.data;\n                switch (seqMsg.type) {\n                    default:\n                        break;\n\n                    case \"loadNewSongList\":\n                        try {\n                            const sList = seqMsg.data;\n                            const songMap = sList.map((s) => {\n                                if (\"duration\" in s) {\n                                    // Cloned objects don't have methods\n                                    return BasicMIDI.copyFrom(s);\n                                }\n                                return BasicMIDI.fromArrayBuffer(\n                                    s.binary,\n                                    s.fileName\n                                );\n                            });\n                            seq.loadNewSongList(songMap);\n                        } catch (e) {\n                            console.error(e);\n                            this.post({\n                                type: \"sequencerReturn\",\n                                data: {\n                                    type: \"midiError\",\n                                    data: e as Error\n                                },\n                                currentTime: this.synthesizer.currentSynthTime\n                            });\n                        }\n                        break;\n\n                    case \"pause\":\n                        seq.pause();\n                        break;\n\n                    case \"play\":\n                        seq.play();\n                        break;\n\n                    case \"setTime\":\n                        seq.currentTime = seqMsg.data;\n                        break;\n\n                    case \"changeMIDIMessageSending\":\n                        seq.externalMIDIPlayback = seqMsg.data;\n                        break;\n\n                    case \"setPlaybackRate\":\n                        seq.playbackRate = seqMsg.data;\n                        break;\n\n                    case \"setLoopCount\":\n                        seq.loopCount = seqMsg.data;\n                        break;\n\n                    case \"changeSong\":\n                        switch (seqMsg.data.changeType) {\n                            case songChangeType.shuffleOff:\n                                seq.shuffleMode = false;\n                                break;\n\n                            case songChangeType.shuffleOn:\n                                seq.shuffleMode = true;\n                                break;\n\n                            case songChangeType.index:\n                                if (seqMsg.data.data !== undefined) {\n                                    console.log(\"INDEX\", seqMsg.data);\n                                    seq.songIndex = seqMsg.data.data;\n                                }\n                                break;\n                        }\n                        break;\n\n                    case \"getMIDI\":\n                        if (!seq.midiData) {\n                            throw new Error(\"No MIDI is loaded!\");\n                        }\n                        this.post({\n                            type: \"sequencerReturn\",\n                            data: {\n                                type: \"getMIDI\",\n                                data: seq.midiData\n                            },\n                            currentTime: this.synthesizer.currentSynthTime\n                        });\n                        break;\n\n                    case \"setSkipToFirstNote\":\n                        seq.skipToFirstNoteOn = seqMsg.data;\n                        break;\n                }\n                break;\n            }\n\n            case \"soundBankManager\":\n                try {\n                    const sfManager = this.synthesizer.soundBankManager;\n                    const sfManMsg = m.data;\n                    let font;\n                    switch (sfManMsg.type) {\n                        case \"addSoundBank\":\n                            font = SoundBankLoader.fromArrayBuffer(\n                                sfManMsg.data.soundBankBuffer\n                            );\n                            sfManager.addSoundBank(\n                                font,\n                                sfManMsg.data.id,\n                                sfManMsg.data.bankOffset\n                            );\n                            this.postReady(\"soundBankManager\", null);\n                            break;\n\n                        case \"deleteSoundBank\":\n                            sfManager.deleteSoundBank(sfManMsg.data);\n                            this.postReady(\"soundBankManager\", null);\n                            break;\n\n                        case \"rearrangeSoundBanks\":\n                            sfManager.priorityOrder = sfManMsg.data;\n                            this.postReady(\"soundBankManager\", null);\n                    }\n                } catch (e) {\n                    this.post({\n                        type: \"soundBankError\",\n                        data: e as Error,\n                        currentTime: this.synthesizer.currentSynthTime\n                    });\n                }\n                break;\n\n            case \"keyModifierManager\": {\n                const kmMsg = m.data;\n                const man = this.synthesizer.keyModifierManager;\n                switch (kmMsg.type) {\n                    default:\n                        return;\n\n                    case \"addMapping\":\n                        man.addMapping(\n                            kmMsg.data.channel,\n                            kmMsg.data.midiNote,\n                            kmMsg.data.mapping\n                        );\n                        break;\n\n                    case \"clearMappings\":\n                        man.clearMappings();\n                        break;\n\n                    case \"deleteMapping\":\n                        man.deleteMapping(\n                            kmMsg.data.channel,\n                            kmMsg.data.midiNote\n                        );\n                }\n                break;\n            }\n\n            case \"requestSynthesizerSnapshot\": {\n                const snapshot = SynthesizerSnapshot.create(this.synthesizer);\n                this.postReady(\"synthesizerSnapshot\", snapshot);\n                break;\n            }\n\n            case \"setLogLevel\":\n                SpessaSynthLogging(\n                    m.data.enableInfo,\n                    m.data.enableWarning,\n                    m.data.enableGroup\n                );\n                break;\n\n            case \"destroyWorklet\":\n                this.alive = false;\n                this.synthesizer.destroySynthProcessor();\n                this.destroy();\n                break;\n\n            default:\n                util.SpessaSynthWarn(\"Unrecognized event!\", m);\n                break;\n        }\n    }\n}\n", "// A worklet processor for the WorkletSynthesizer\nimport {\n    BasicMIDI,\n    SoundBankLoader,\n    SpessaSynthCoreUtils as util\n} from \"spessasynth_core\";\nimport type {\n    BasicSynthesizerMessage,\n    OfflineRenderWorkletData,\n    PassedProcessorParameters\n} from \"../types.ts\";\nimport type { SequencerOptions } from \"../../sequencer/types.ts\";\nimport { consoleColors } from \"../../utils/other.ts\";\nimport { fillWithDefaults } from \"../../utils/fill_with_defaults.ts\";\nimport { DEFAULT_SEQUENCER_OPTIONS } from \"../../sequencer/default_sequencer_options.ts\";\nimport { BasicSynthesizerCore } from \"../basic/basic_synthesizer_core.ts\";\n\nexport class WorkletSynthesizerCore extends BasicSynthesizerCore {\n    protected alive = true;\n    /**\n     * Instead of 18 stereo outputs, there's one with 32 channels (no effects).\n     */\n    private readonly oneOutputMode: boolean;\n    private readonly port: MessagePort;\n\n    public constructor(\n        sampleRate: number,\n        currentTime: number,\n        port: MessagePort,\n        opts: PassedProcessorParameters\n    ) {\n        super(\n            sampleRate,\n            {\n                enableEffects: !opts.oneOutput, // One output mode disables effects\n                enableEventSystem: opts?.enableEventSystem, // Enable message port?\n                initialTime: currentTime\n            },\n            (data, transfer) => {\n                port.postMessage(data, transfer!);\n            }\n        );\n        this.port = port;\n\n        this.oneOutputMode = opts.oneOutput;\n\n        void this.synthesizer.processorInitialized.then(() => {\n            // Receive messages from the main thread\n            this.port.onmessage = (e: MessageEvent<BasicSynthesizerMessage>) =>\n                this.handleMessage(e.data);\n            this.postReady(\"sf3Decoder\", null);\n        });\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * The audio worklet processing logic\n     * @param _inputs required by WebAudioAPI\n     * @param outputs the outputs to write to, only the first two channels of each are populated\n     * @returns true unless it's not alive\n     */\n    public process(\n        _inputs: Float32Array[][],\n        outputs: Float32Array[][]\n    ): boolean {\n        if (!this.alive) {\n            return false;\n        }\n        // Process sequencer\n        this.sequencer.processTick();\n\n        if (this.oneOutputMode) {\n            const out = outputs[0];\n            // 1 output with 32 channels.\n            // Channels are ordered as follows:\n            // MidiChannel1L, midiChannel1R,\n            // MidiChannel2L, midiChannel2R\n            // And so on\n            const channelMap: Float32Array[][] = [];\n            for (let i = 0; i < 32; i += 2) {\n                channelMap.push([out[i], out[i + 1]]);\n            }\n            this.synthesizer.renderAudioSplit(\n                [],\n                [], // Effects are disabled\n                channelMap\n            );\n        } else {\n            // 18 outputs, each a stereo one\n            // 0: reverb\n            // 1: chorus\n            // 2: channel 1\n            // 3: channel 2\n            // And so on\n            this.synthesizer.renderAudioSplit(\n                outputs[0], // Reverb\n                outputs[1], // Chorus\n                outputs.slice(2)\n            );\n        }\n        return true;\n    }\n\n    protected handleMessage(m: BasicSynthesizerMessage) {\n        if (m.type === \"startOfflineRender\") {\n            this.startOfflineRender(m.data);\n            return;\n        }\n        super.handleMessage(m);\n    }\n\n    private startOfflineRender(config: OfflineRenderWorkletData) {\n        if (!this.sequencer) {\n            return;\n        }\n\n        // Load the bank list\n        config.soundBankList.forEach((b, i) => {\n            try {\n                this.synthesizer.soundBankManager.addSoundBank(\n                    SoundBankLoader.fromArrayBuffer(b.soundBankBuffer),\n                    `bank-${i}`,\n                    b.bankOffset\n                );\n            } catch (e) {\n                this.post({\n                    type: \"soundBankError\",\n                    data: e as Error,\n                    currentTime: this.synthesizer.currentSynthTime\n                });\n            }\n        });\n\n        if (config.snapshot !== undefined) {\n            this.synthesizer.applySynthesizerSnapshot(config.snapshot);\n        }\n\n        // If sent, start rendering\n        util.SpessaSynthInfo(\n            \"%cRendering enabled! Starting render.\",\n            consoleColors.info\n        );\n        this.sequencer.loopCount = config.loopCount;\n        // Set voice cap to unlimited\n        this.synthesizer.setMasterParameter(\"voiceCap\", Infinity);\n\n        /**\n         * Set options\n         */\n        const seqOptions: SequencerOptions = fillWithDefaults(\n            config.sequencerOptions,\n            DEFAULT_SEQUENCER_OPTIONS\n        );\n        this.sequencer.skipToFirstNoteOn = seqOptions.skipToFirstNoteOn;\n        this.sequencer.playbackRate = seqOptions.initialPlaybackRate;\n        // Autoplay is ignored\n        try {\n            // Cloned objects don't have methods\n            this.sequencer.loadNewSongList([\n                BasicMIDI.copyFrom(config.midiSequence)\n            ]);\n            this.sequencer.play();\n        } catch (e) {\n            console.error(e);\n            this.post({\n                type: \"sequencerReturn\",\n                data: {\n                    type: \"midiError\",\n                    data: e as Error\n                },\n                currentTime: this.synthesizer.currentSynthTime\n            });\n        }\n        this.postReady(\"startOfflineRender\", null);\n    }\n}\n", "import { SpessaSynthCoreUtils } from \"spessasynth_core\";\nimport { consoleColors } from \"./utils/other.ts\";\nimport { WORKLET_PROCESSOR_NAME } from \"./synthesizer/worklet/worklet_processor_name.ts\";\nimport type { PassedProcessorParameters } from \"./synthesizer/types.ts\";\nimport { WorkletSynthesizerCore } from \"./synthesizer/worklet/worklet_synthesizer_core.ts\";\n\nclass WorkletSynthesizerProcessor extends AudioWorkletProcessor {\n    public readonly process: (\n        inputs: Float32Array[][],\n        outputs: Float32Array[][],\n        parameters: Record<string, Float32Array>\n    ) => boolean;\n    private readonly core: WorkletSynthesizerCore;\n\n    public constructor(options: {\n        processorOptions: PassedProcessorParameters;\n    }) {\n        super();\n        this.core = new WorkletSynthesizerCore(\n            sampleRate, // AudioWorkletGlobalScope\n            currentTime, // AudioWorkletGlobalScope, sync with audioContext time\n            this.port,\n            options.processorOptions\n        );\n        this.process = this.core.process.bind(this.core);\n    }\n}\n\nregisterProcessor(WORKLET_PROCESSOR_NAME, WorkletSynthesizerProcessor);\nSpessaSynthCoreUtils.SpessaSynthInfo(\n    \"%cProcessor successfully registered!\",\n    consoleColors.recognized\n);\n"],
  "mappings": "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",
  "names": ["IndexedByteArray", "start", "end", "a", "readBinaryString", "dataArray", "bytes", "offset", "string", "i", "byte", "readBinaryStringIndexed", "startIndex", "getStringBytes", "addZero", "ensureEven", "len", "arr", "writeBinaryStringIndexed", "outArray", "padLength", "readLittleEndianIndexed", "bytesAmount", "res", "readLittleEndian", "out", "writeLittleEndianIndexed", "number", "byteTarget", "writeWord", "word", "writeDword", "dword", "signedInt16", "byte1", "byte2", "val", "signedInt8", "RIFFChunk", "header", "size", "data", "readRIFFChunk", "readData", "forceShift", "chunkData", "writeRIFFChunkRaw", "addZeroByte", "isList", "dataStartOffset", "headerWritten", "dataLength", "writtenSize", "finalSize", "writeRIFFChunkParts", "chunks", "dataOffset", "c", "findRIFFListType", "collection", "type", "fillWithDefaults", "obj", "defObj", "readBigEndian", "dataArray", "bytesAmount", "offset", "out", "i", "readBigEndianIndexed", "res", "writeBigEndian", "number", "bytes", "readVariableLengthQuantity", "MIDIbyteArray", "byte", "writeVariableLengthQuantity", "formatTime", "totalSeconds", "minutes", "seconds", "arrayToHexString", "arr", "hexString", "hex", "consoleColors", "tr", "l", "T", "ur", "W", "X", "wr", "Y", "r", "a", "e", "f", "v", "g", "Z", "$", "cr", "j", "hr", "Fr", "_", "c", "A", "k", "b", "m", "U", "x", "n", "o", "M", "L", "gr", "br", "q", "u", "C", "kr", "xr", "yr", "h", "Sr", "fr", "or", "lr", "S", "I", "z", "D", "G", "H", "N", "s", "d", "F", "P", "t", "rr", "Ar", "Mr", "ar", "w", "E", "O", "er", "y", "J", "K", "Ur", "zr", "Q", "p", "nr", "B", "R", "V", "vr", "ir", "Dr", "Tr", "mr", "Er", "pr", "inf", "ENABLE_INFO", "ENABLE_WARN", "ENABLE_GROUP", "SpessaSynthLogging", "enableInfo", "enableWarn", "enableGroup", "SpessaSynthInfo", "message", "SpessaSynthWarn", "SpessaSynthGroup", "SpessaSynthGroupCollapsed", "SpessaSynthGroupEnd", "SpessaSynthCoreUtils", "readLittleEndianIndexed", "readBinaryStringIndexed", "MIDIMessage", "ticks", "byte", "data", "getChannel", "statusByte", "eventType", "channel", "resultChannel", "getEvent", "status", "eventChannel", "eventStatus", "dataBytesAmount", "midiMessageTypes", "midiControllers", "writeMIDIInternal", "midi", "binaryTrackData", "track", "binaryTrack", "currentTick", "runningByte", "event", "deltaTicks", "messageData", "writeVariableLengthQuantity", "writeText", "text", "arr", "i", "binaryData", "writeBigEndian", "VOICE_CAP", "DEFAULT_PERCUSSION", "MIDI_CHANNEL_COUNT", "DEFAULT_SYNTH_MODE", "ALL_CHANNELS_OR_DIFFERENT_ACTION", "EMBEDDED_SOUND_BANK_ID", "GENERATOR_OVERRIDE_NO_CHANGE_VALUE", "DEFAULT_SYNTH_METHOD_OPTIONS", "MIN_NOTE_LENGTH", "MIN_EXCLUSIVE_LENGTH", "SYNTHESIZER_GAIN", "XG_SFX_VOICE", "GM2_DEFAULT_BANK", "BankSelectHacks", "sys", "bankMSB", "system", "bankOffset", "xgDrums", "isXGOn", "isGSDrumsOn", "isGSOn", "isGMOn", "isGM2On", "getGsOn", "IndexedByteArray", "MIDIPatchTools", "_MIDIPatchTools", "patch", "string", "parts", "patch1", "patch2", "firstSpace", "name", "a", "b", "DEFAULT_COPYRIGHT", "correctBankOffsetInternal", "mid", "soundBank", "unwantedSystems", "ports", "channelsAmount", "channelsInfo", "e", "trackNum", "portOffset", "sysexChannel", "chNum", "targetPreset", "SpessaSynthInfo", "consoleColors", "isLSB", "has", "ch", "midiChannel", "port", "t", "indexToAdd", "programIndex", "programTicks", "targetProgram", "targetBank", "m", "index", "DEFAULT_RMIDI_WRITE_OPTIONS", "writeRMIDIInternal", "soundBankBinary", "options", "metadata", "SpessaSynthGroup", "newMid", "v", "val", "infoContent", "type", "writeInfo", "writeRIFFChunkRaw", "DBNK", "writeLittleEndianIndexed", "SpessaSynthGroupEnd", "writeRIFFChunkParts", "getStringBytes", "getUsedProgramsAndKeys", "SpessaSynthGroupCollapsed", "channelPresets", "isDrum", "usedProgramsAndKeys", "combos", "preset", "getNoteTimesInternal", "minDrumLength", "getTempo", "readBigEndian", "noteTimes", "events", "e1", "e2", "elapsedTime", "oneTickToSeconds", "eventIndex", "unfinished", "unfinishedNotes", "noteOff", "midiNote", "noteIndex", "n", "note", "time", "noteTime", "channelNotes", "interpolationTypes", "dataEntryStates", "customControllers", "getControllerChange", "cc", "value", "getDrumChange", "chanAddress", "sysexData", "checksum", "modifyMIDIInternal", "desiredProgramChanges", "desiredControllerChanges", "desiredChannelsToClear", "desiredChannelsToTranspose", "channelsToChangeProgram", "c", "addedGs", "midiPorts", "midiPortChannelOffsets", "midiPortChannelOffset", "assignMIDIPort", "isFirstNoteOn", "coarseTranspose", "fineTranspose", "transpose", "coarse", "fine", "eventIndexes", "deleteThisEvent", "addEventBefore", "offset", "change", "ccChange", "fineTune", "centsCoarse", "rpnCoarse", "rpnFine", "dataEntryCoarse", "dataEntryFine", "desiredBankMSB", "desiredBankLSB", "desiredProgram", "programChange", "addBank", "bankChange", "ccNum", "applySnapshotInternal", "snapshot", "channelsToTranspose", "channelsToClear", "programChanges", "controllerChanges", "channelNumber", "transposeFloat", "l", "ccNumber", "targetValue", "metadataTypes", "referenceTypeIds", "resourceFormatIDs", "formatTypeIDs", "unpackerIDs", "XMFNode", "_XMFNode", "nodeStartIndex", "readVariableLengthQuantity", "headerLength", "readBytes", "remainingHeader", "headerData", "metadataChunk", "fieldSpecifier", "key", "k", "stringLength", "readBinaryStringIndexed", "numberOfVersions", "dataLength", "contentsChunk", "unpackersStart", "unpackersLength", "unpackersData", "unpacker", "manufacturerID", "manufacturerInternalID", "compressed", "inf", "resourceFormat", "SpessaSynthWarn", "resourceFormatID", "nodeLength", "nodeData", "loadXMF", "sanityCheck", "version", "fileTypeId", "readBigEndianIndexed", "fileTypeRevisionId", "metadataTableLength", "rootNode", "midiArray", "searchNode", "node", "checkMeta", "xmf", "rmid", "MIDITrack", "_MIDITrack", "loadMIDIFromArrayBufferInternal", "outputMIDI", "arrayBuffer", "fileName", "smfFileBinary", "readMIDIChunk", "fileByteArray", "size", "chunk", "dataSlice", "initialString", "readBinaryString", "riff", "readRIFFChunk", "isSF2RMIDI", "foundDbnk", "startIndex", "currentChunk", "infoChunk", "headerTyped", "infoData", "readLittleEndian", "headerChunk", "trackCount", "trackChunk", "totalTicks", "statusByteCheck", "statusByteChannel", "eventDataLength", "eventData", "translationPortuguese", "translations", "tryTranslate", "dateString", "translation", "translated", "english", "pt", "regex", "date", "tryDotted", "match", "day", "month", "year", "tryAWE", "tryYear", "parseDateString", "filtered", "dotted", "awe", "BasicMIDI", "_BasicMIDI", "encodingInfo", "lengthToRead", "file", "tempoIndex", "totalSeconds", "tempo", "ticksSinceLastTempo", "soundbank", "sortEvents", "configuration", "fillWithDefaults", "encoding", "rawName", "decoder", "d", "infoType", "encoded", "infoBuffer", "callback", "remainingTracks", "findFirstEventIndex", "karaokeHasTitle", "nameDetected", "loopStart", "loopEnd", "usedChannels", "trackHasVoiceMessages", "eventText", "checkedText", "trackName", "firstNoteOns", "firstNoteOn", "defaultPort", "message", "formatTime", "processEventInternal", "event", "trackIndex", "track", "statusByteData", "getEvent", "offset", "midiMessageTypes", "velocity", "toDelete", "n", "tempoBPM", "readBigEndian", "SpessaSynthInfo", "k", "consoleColors", "processTick", "currentTime", "nextTrackIndex", "nextTrack", "eventNext", "assignMIDIPortInternal", "trackNum", "port", "loadNewSequenceInternal", "parsedMidi", "SpessaSynthGroupCollapsed", "combos", "preset", "combo", "midiNote", "SpessaSynthGroupEnd", "formatTime", "SpessaSynthWarn", "generatorTypes", "GENERATORS_AMOUNT", "MAX_GENERATOR", "generatorLimits", "sampleTypes", "modulatorSources", "modulatorCurveTypes", "dlsSources", "dlsDestinations", "DLSLoopTypes", "NON_CC_INDEX_OFFSET", "CONTROLLER_TABLE_SIZE", "defaultMIDIControllerValues", "setResetValue", "i", "v", "midiControllers", "PORTAMENTO_CONTROL_UNSET", "modulatorSources", "CUSTOM_CONTROLLER_TABLE_SIZE", "customControllers", "customResetArray", "resetAllControllersInternal", "log", "SpessaSynthInfo", "consoleColors", "DEFAULT_SYNTH_MODE", "channelNumber", "ch", "ccNum", "val", "resetControllers", "sendCCEvents", "resetValue", "transpose", "resetPreset", "BankSelectHacks", "DEFAULT_PERCUSSION", "nonResettableCCs", "resetControllersRP15Compliant", "resetParameters", "dataEntryStates", "defaultControllerArray", "setTimeToInternal", "time", "ticks", "channelsToSave", "pitchWheels", "programs", "isCCNonSkippable", "cc", "savedControllers", "savedTempo", "savedTempoTrack", "resetAllControllers", "chan", "trackIndex", "track", "event", "info", "getEvent", "channel", "midiMessageTypes", "p", "controllerNumber", "ccV", "tempoBPM", "readBigEndian", "nextEvent", "value", "index", "bank", "SpessaSynthSequencer", "processTick", "assignMIDIPortInternal", "loadNewSequenceInternal", "processEventInternal", "spessasynthProcessor", "on", "SpessaSynthWarn", "n", "midiBuffers", "type", "data", "isFinished", "note", "c", "MIDI_CHANNEL_COUNT", "message", "indexes", "_", "program", "MSB", "LSB", "seconds", "isNotFinished", "stbvorbis", "isReady", "readySolver", "A", "atob", "I", "g", "B", "E", "Q", "C", "h", "o", "G", "D", "a", "S", "F", "R", "s", "w", "y", "U", "$", "e", "t", "k", "N", "r", "__require", "Y", "J", "II", "f", "H", "L", "M", "AN", "Ae", "d", "q", "K", "l", "u", "b", "X", "m", "Z", "V", "x", "W", "IE", "T", "IA", "A9", "A5", "Ai", "O", "j", "Ag", "P", "Ax", "Ap", "A6", "AV", "z", "AA", "A8", "AI", "A0", "AQ", "AB", "AE", "AC", "Ah", "Ao", "AG", "AD", "Aa", "AS", "AF", "AR", "As", "Aw", "Ay", "Ac", "An", "AU", "A$", "Az", "Ak", "Ar", "AY", "AJ", "Af", "AH", "AL", "AM", "Ad", "Aq", "AK", "Al", "Au", "Ab", "AX", "Am", "AZ", "A7", "A1", "AW", "A_", "AT", "A2", "Av", "AO", "Aj", "AP", "A4", "A3", "Ig", "IB", "stb", "MIN_TIMECENT", "MAX_TIMECENT", "timecentLookupTable", "timecents", "timecentsToSeconds", "MIN_ABS_CENT", "MAX_ABS_CENT", "absoluteCentLookupTable", "absoluteCents", "absCentsToHz", "cents", "MIN_DECIBELS", "MAX_DECIBELS", "decibelLookUpTable", "decibels", "decibelAttenuationToGain", "VOLUME_ENVELOPE_SMOOTHING_FACTOR", "DB_SILENCE", "PERCEIVED_DB_SILENCE", "PERCEIVED_GAIN_SILENCE", "VolumeEnvelope", "_VolumeEnvelope", "sampleRate", "initialDecay", "voice", "env", "timecentsToSamples", "tc", "generatorTypes", "sustainDb", "fullChange", "keyNumAddition", "fraction", "holdExcursion", "elapsed", "releaseFraction", "audioBuffer", "centibelOffset", "smoothingFactor", "decibelOffset", "attenuationSmoothing", "elapsedRelease", "dbDifference", "db", "filledBuffer", "linearAttenuation", "setMasterParameterInternal", "parameter", "pan", "semitones", "item", "getMasterParameterInternal", "getAllMasterParametersInternal", "bitMaskToBool", "num", "bit", "toNumericBool", "bool", "MODULATOR_RESOLUTION", "MOD_CURVE_TYPES_AMOUNT", "modulatorCurveTypes", "MOD_SOURCE_TRANSFORM_POSSIBILITIES", "concave", "convex", "getModulatorCurveValue", "transformType", "curveType", "isBipolar", "ModulatorSource", "_ModulatorSource", "isCC", "isNegative", "sourceEnum", "source", "rawValue", "precomputedTransforms", "tableIndex", "MOD_BYTE_SIZE", "getModSourceEnum", "defaultResonantModSource", "Modulator", "_Modulator", "primarySource", "secondarySource", "destination", "amount", "isEffectModulator", "isDefaultResonantModulator", "mod1", "mod2", "checkAmount", "mod", "modData", "writeWord", "modulator", "DecodedModulator", "secondarySourceEnum", "MAX_GENERATOR", "DEFAULT_ATTENUATION_MOD_AMOUNT", "DEFAULT_ATTENUATION_MOD_CURVE_TYPE", "defaultSoundFont2Modulators", "defaultSpessaSynthModulators", "SPESSASYNTH_DEFAULT_MODULATORS", "GEN_BYTE_SIZE", "Generator", "validate", "lim", "generatorLimits", "genData", "addAndClampGenerator", "generatorType", "presetGens", "instrumentGens", "limits", "presetGen", "presetValue", "instrGen", "instValue", "BAG_BYTE_SIZE", "BasicZone", "currentCoarse", "currentFine", "tuningCents", "coarse", "fine", "genValue", "generators", "modulators", "notFoundValue", "zone", "BasicGlobalZone", "BasicPresetZone", "preset", "instrument", "gens", "instrumentID", "BasicInstrumentZone", "sample", "sampleID", "INST_BYTE_SIZE", "notGlobalizedTypes", "BasicInstrument", "stays", "force", "globalZone", "checkedType", "occurrencesForValues", "defaultForChecked", "relativeCounterpart", "valueToGlobalize", "max", "curr", "targetValue", "checkedModulator", "existsForAllZones", "instData", "writeBinaryStringIndexed", "PHDR_BYTE_SIZE", "BasicPreset", "parentSoundBank", "xg", "keyMin", "keyMax", "key", "velocity", "synthesisData", "MIDIPatchTools", "midiNote", "isInRange", "range", "number", "addUnique", "main", "adder", "mg", "addUniqueMods", "mm", "parsedGeneratorsAndSamples", "globalPresetGenerators", "globalPresetModulators", "globalKeyRange", "globalVelRange", "currentZone", "presetZone", "presetGenerators", "presetModulators", "globalInstrumentGenerators", "globalInstrumentModulators", "instrumentZone", "instrumentGenerators", "instrumentModulators", "finalModulatorList", "identicalInstrumentModulator", "subtractRanges", "r1", "r2", "outputInstrument", "globalPresetZone", "globalPresetKeyRange", "globalPresetVelRange", "presetZoneKeyRange", "presetZoneVelRange", "iZones", "globalInstGenerators", "globalInstModulators", "globalInstZone", "globalInstKeyRange", "globalInstVelRange", "instZone", "instZoneKeyRange", "instZoneVelRange", "instGenerators", "instModulators", "finalModList", "identicalInstMod", "finalGenList", "gen", "identicalInstGen", "newAmount", "phdrData", "wBank", "writeDword", "getAnyDrums", "presets", "preferXG", "selectPreset", "patch", "system", "isGMGSDrum", "bankLSB", "bankMSB", "isXG", "xgDrums", "returnReplacement", "pres", "matchingPrograms", "SoundBankManagerPreset", "offset", "SoundBankManager", "presetListChangeCallback", "newList", "id", "font", "bankOffset", "foundBank", "presetList", "addedPresets", "selectablePreset", "PAN_SMOOTHING_FACTOR", "REVERB_DIVIDER", "CHORUS_DIVIDER", "HALF_PI", "MIN_PAN", "MAX_PAN", "PAN_RESOLUTION", "panTableLeft", "panTableRight", "realPan", "panAndMixVoice", "inputBuffer", "outputLeft", "outputRight", "reverbLeft", "reverbRight", "chorusLeft", "chorusRight", "startIndex", "gain", "gainLeft", "gainRight", "reverbSend", "reverbGain", "idx", "chorusSend", "chorusGain", "chorusLeftGain", "chorusRightGain", "FILTER_SMOOTHING_FACTOR", "LowpassFilter", "_LowpassFilter", "outputBuffer", "fcExcursion", "initialFc", "filter", "targetCutoff", "modulatedResonance", "input", "filtered", "cutoffCents", "qCb", "cached", "cutoffHz", "qDb", "resonanceGain", "qGain", "cosw", "alpha", "b1", "b0", "b2", "a0", "a1", "a2", "toCache", "dummy", "DEFAULT_SYNTH_OPTIONS", "getPriority", "priority", "killVoicesIntenral", "allVoices", "voicesToRemove", "MODENV_PEAK", "CONVEX_ATTACK", "ModulationEnvelope", "_ModulationEnvelope", "decayKeyExcursionCents", "decayTime", "holdKeyExcursionCents", "releaseTime", "currentTime", "ignoreRelease", "AudioSample", "playbackStep", "cursorStart", "rootKey", "loopStart", "loopEnd", "endIndex", "loopingMode", "EXCLUSIVE_CUTOFF_TIME", "EXCLUSIVE_MOD_CUTOFF_TIME", "Voice", "_Voice", "audioSample", "targetKey", "realKey", "sampleToCopy", "MIN_EXCLUSIVE_LENGTH", "minNoteLength", "MIN_NOTE_LENGTH", "getVoicesForPresetInternal", "voices", "GENERATORS_AMOUNT", "sampleData", "voiceVelocity", "getVoicesInternal", "channelObject", "overridePatch", "getTuning", "byte1", "byte2", "byte3", "systemExclusiveInternal", "syx", "channelOffset", "manufacturer", "ALL_CHANNELS_OR_DIFFERENT_ACTION", "niceLogging", "what", "units", "arrayToHexString", "vol", "tuningValue", "currentMessageIndex", "tuningName", "readBinaryString", "tuningProgram", "numberOfChanges", "newOctaveTuning", "tuning", "notRecognized", "messageValue", "isDrums", "keyShift", "panPosition", "tuningBytes", "newTuning", "centeredValue", "normalizedValue", "normalizedNotCentered", "setupReceivers", "sourceName", "bipolar", "patchName", "ChannelSnapshot", "_ChannelSnapshot", "lockPreset", "lockedSystem", "lockedControllers", "lockVibrato", "channelVibrato", "channelTransposeKeyShift", "channelOctaveTuning", "isMuted", "drumChannel", "snapshot", "spessaSynthProcessor", "KeyModifierManager", "channel", "midiNote", "mapping", "mappings", "bank", "modifier", "SynthesizerSnapshot", "_SynthesizerSnapshot", "channelSnapshots", "masterParameters", "keyMappings", "processor", "_", "i", "ChannelSnapshot", "snapshot", "s", "parameter", "value", "channelSnapshot", "DEFAULT_MASTER_PARAMETERS", "SYNTHESIZER_GAIN", "VOICE_CAP", "interpolationTypes", "DEFAULT_SYNTH_MODE", "ALL_CHANNELS_OR_DIFFERENT_ACTION", "ProtectedSynthValues", "eventCallbackHandler", "getVoices", "voiceKillingFunction", "volumeEnvelopeSmoothingFactor", "panSmoothingFactor", "filterSmoothingFactor", "eventName", "eventData", "getLFOValue", "startTime", "frequency", "currentTime", "xVal", "WavetableOscillator", "_WavetableOscillator", "voice", "outputBuffer", "interpolation", "step", "sample", "cur", "sampleData", "loopLength", "floor", "ceil", "fraction", "upper", "lower", "y0", "y1", "y2", "y3", "t", "xm1", "x0", "x1", "x2", "c", "v", "w", "a", "b", "renderVoice", "timeNow", "outputLeft", "outputRight", "reverbOutputLeft", "reverbOutputRight", "chorusOutputLeft", "chorusOutputRight", "startIndex", "sampleCount", "VolumeEnvelope", "ModulationEnvelope", "generatorTypes", "targetKey", "cents", "semitones", "tuning", "elapsed", "diff", "lowpassExcursion", "volumeExcursionCentibels", "vibPitchDepth", "vibVolDepth", "vibFilterDepth", "vibStart", "timecentsToSeconds", "vibFreqHz", "absCentsToHz", "vibLfoValue", "customControllers", "modPitchDepth", "modVolDepth", "modFilterDepth", "modStart", "modFreqHz", "modLfoValue", "channelVibrato", "modEnvPitchDepth", "modEnvFilterDepth", "modEnv", "centsTotal", "bufferOut", "LowpassFilter", "registeredParameterTypes", "nonRegisteredMSB", "nonRegisteredGSLSB", "dataEntryCoarse", "dataValue", "midiControllers", "addDefaultVibrato", "coolInfo", "what", "type", "SpessaSynthInfo", "consoleColors", "dataEntryStates", "NRPNCoarse", "NRPNFine", "dataEntryFine", "gen", "offset", "rpnValue", "NON_CC_INDEX_OFFSET", "modulatorSources", "AWE_NRPN_GENERATOR_MAPPINGS", "handleAWE32NRPN", "aweGen", "dataLSB", "dataMSB", "clip", "min", "max", "msecToTimecents", "ms", "hzToCents", "hz", "generator", "SpessaSynthWarn", "milliseconds", "hertz", "centibels", "fcCents", "actualTune", "finalTuning", "controllerChange", "controllerNumber", "controllerValue", "sendEvent", "actualCCNum", "DEFAULT_PERCUSSION", "BankSelectHacks", "portamentoLookup", "getLookup", "k", "key", "lowerTime", "upperTime", "portamentoTimeToSeconds", "time", "distance", "noteOn", "velocity", "realKey", "internalMidiNote", "program", "tune", "keyVel", "voiceGain", "portamentoFromKey", "portamentoDuration", "portamentoTime", "control", "currentFromKey", "voices", "panOverride", "channelVoices", "m", "mod", "existingModIndex", "voiceMod", "Modulator", "overrideValue", "generatorType", "GENERATOR_OVERRIDE_NO_CHANGE_VALUE", "exclusive", "cursorStartOffset", "endOffset", "loopStartOffset", "loopEndOffset", "sm", "clamp", "num", "temp", "noteOff", "programChange", "preset", "BasicPreset", "DynamicModulatorSystem", "source", "destination", "amount", "isBipolar", "isNegative", "id", "srcNum", "isCC", "modulator", "ModulatorSource", "modulatorCurveTypes", "EFFECT_MODULATOR_TRANSFORM_MULTIPLIER", "computeModulator", "controllerTable", "sourceValue", "secondSrcValue", "transformAmount", "computedValue", "computeModulators", "sourceUsesCC", "sourceIndex", "modulators", "generators", "modulatedGenerators", "limit", "generatorLimits", "volumeEnvelopeNeedsRecalculation", "computedDestinations", "sourceCC", "outputValue", "limits", "dest", "MIDIChannel", "CONTROLLER_TABLE_SIZE", "CUSTOM_CONTROLLER_TABLE_SIZE", "resetControllers", "resetPreset", "resetControllersRP15Compliant", "resetParameters", "GENERATORS_AMOUNT", "panAndMixVoice", "synth", "synthProps", "channelNumber", "force", "keyShift", "currentTranspose", "log", "pitch", "pressure", "locked", "isDrum", "patch", "drums", "depth", "rate", "delay", "realtime", "releaseTime", "isMuted", "data", "bankMSB", "bankLSB", "SDTA_TO_DATA_OFFSET", "getSDTA", "smplStartOffsets", "smplEndOffsets", "compress", "decompress", "vorbisFunc", "progressFunc", "writtenCount", "smplChunkSize", "sampleDatas", "r", "sdta", "IndexedByteArray", "writeBinaryStringIndexed", "writeLittleEndianIndexed", "startOffset", "RESAMPLE_RATE", "BasicSample", "sampleName", "sampleRate", "originalKey", "pitchCorrection", "sampleType", "loopStart", "loopEnd", "sampleTypes", "allowVorbis", "newSampleRate", "audioData", "ratio", "resampled", "encodeVorbis", "compressed", "e", "instrument", "index", "data16", "len", "decoded", "stb", "EmptySample", "SF3_BIT_FLIT", "SoundFontSample", "sampleStartIndex", "sampleEndIndex", "sampleLoopStartIndex", "sampleLoopEndIndex", "samplePitch", "samplePitchCorrection", "linkedSampleIndex", "sampleDataArray", "sampleIndex", "smplStart", "samplesArray", "linked", "byteLength", "convertedSigned16", "readSamples", "sampleHeadersChunk", "smplChunkData", "linkSamples", "samples", "readSample", "sampleHeaderData", "smplArrayData", "readBinaryStringIndexed", "readLittleEndianIndexed", "signedInt8", "sampleLink", "getSHDR", "shdrSize", "shdrData", "xshdrData", "maxSampleLink", "dwStart", "writeDword", "dwEnd", "sampleLinkIndex", "writeWord", "shdr", "writeRIFFChunkRaw", "xshdr", "writeSF2Elements", "isPreset", "elements", "genHeader", "modHeader", "bagHeader", "hdrHeader", "hdrByteSize", "PHDR_BYTE_SIZE", "INST_BYTE_SIZE", "currentGenIndex", "generatorIndexes", "currentModIndex", "modulatorIndexes", "zoneIndex", "zoneIndexes", "writeZone", "z", "gens", "mods", "el", "Generator", "DecodedModulator", "genSize", "GEN_BYTE_SIZE", "genData", "g", "modSize", "MOD_BYTE_SIZE", "modData", "bagSize", "BAG_BYTE_SIZE", "bagData", "modulatorIndex", "generatorIndex", "hdrSize", "hdrData", "DEFAULT_SF2_WRITE_OPTIONS", "writeSF2Internal", "writeOptions", "options", "fillWithDefaults", "SpessaSynthGroupCollapsed", "SpessaSynthGroup", "infoArrays", "writeSF2Info", "getStringBytes", "ifilData", "commentText", "d", "SPESSASYNTH_DEFAULT_MODULATORS", "dmodSize", "dmodData", "SpessaSynthGroupEnd", "sdtaChunk", "shdrChunk", "instData", "presData", "chunks", "pdtaChunk", "writeRIFFChunkParts", "p", "xpdtaChunk", "infoChunk", "main", "DLSVerifier", "chunk", "expected", "expect", "text", "error", "readRIFFChunk", "WSMP_SIZE", "WSMP_LOOP_SIZE", "WaveSample", "_WaveSample", "inputWaveSample", "outputWaveSample", "l", "waveSample", "cbSize", "signedInt16", "loopType", "DLSLoopTypes", "zone", "attenuationCb", "loopingMode", "dlsLoopType", "loop", "wsmpAttenuationCorrected", "diffStart", "diffEnd", "fine", "coarse", "wsmpData", "W_FORMAT_TAG", "readPCM", "bytesPerSample", "maxSampleValue", "maxUnsigned", "normalizationFactor", "isUnsigned", "sampleLength", "s16", "readALAW", "input", "exponent", "mantissa", "s16sample", "DLSSample", "name", "dataChunk", "wFormatTag", "DownloadableSoundsSample", "_DownloadableSoundsSample", "waveChunk", "fmtChunk", "channelsAmount", "waveInfo", "findRIFFListType", "wsmpChunk", "raw", "dlsSample", "RIFFChunk", "soundBank", "samplePitchSemitones", "fmt", "wsmp", "inam", "info", "fmtData", "DEFAULT_DLS_REVERB", "DEFAULT_DLS_CHORUS", "DLS_1_NO_VIBRATO_MOD", "DLS_1_NO_VIBRATO_PRESSURE", "ConnectionSource", "_ConnectionSource", "dlsSources", "transform", "bipolar", "invert", "inputSource", "sourceEnum", "invalidGeneratorTypes", "ConnectionBlock", "_ConnectionBlock", "scale", "dlsDestinations", "artData", "usSource", "usControl", "usDestination", "usTransform", "lScale", "controlTransform", "controlBipolar", "bitMaskToBool", "controlInvert", "sourceTransform", "sourceBipolar", "sourceInvert", "articulation", "failed", "msg", "dlsDestination", "bloc", "inputBlock", "out", "transformEnum", "modulatorDestination", "primarySource", "secondarySource", "specialDestination", "controlSF", "convertedDestination", "convertedPrimary", "convertedSecondary", "DownloadableSoundsArticulation", "_DownloadableSoundsArticulation", "inputArticulation", "block", "BasicZone", "relativeGenerator", "absoluteCounterpart", "absoluteValue", "dlsRelative", "subtraction", "newAbsolute", "lart", "lar2", "art1", "connectionsAmount", "art2", "art2Data", "applyKeyToCorrection", "keyToGen", "realGen", "keyToGenValue", "correction", "realValueConnection", "connection", "specialGen", "generatorAmount", "WaveLink", "_WaveLink", "tableIndex", "waveLink", "wlnk", "fusOptions", "phaseGroup", "ulChannel", "ulTableIndex", "wlnkData", "DownloadableSoundsRegion", "_DownloadableSoundsRegion", "inputRegion", "outputRegion", "regionChunks", "waveSampleChunk", "waveLinkChunk", "regionHeader", "region", "keyMin", "keyMax", "velMin", "velMax", "rgnhData", "DownloadableSoundsInstrument", "_DownloadableSoundsInstrument", "inputInstrument", "outputInstrument", "instrumentHeader", "instrumentName", "regions", "ulBank", "ulInstrument", "regionListChunk", "BasicInstrument", "inshData", "DEFAULT_DLS_OPTIONS", "DownloadableSounds", "_DownloadableSounds", "buffer", "dataArray", "firstChunk", "dls", "infoPart", "headerTyped", "parseDateString", "colhChunk", "instrumentAmount", "waveListChunk", "wave", "instrumentListChunk", "instruments", "ins", "aliasingChunk", "pgalData", "drumInstrument", "drumAliases", "keyNum", "alias", "copied", "aliasBankNum", "aliasBankLSB", "aliasBankMSB", "aliasProgram", "nullByte", "inputBankNum", "inputBankLSB", "inputBankMSB", "inputProgram", "inst", "colhNum", "colh", "lins", "currentIndex", "ptblOffsets", "written", "wvpl", "ptblData", "ptbl", "infos", "writeDLSInfo", "BasicSoundBank", "_BasicSoundBank", "soundBanks", "mainSf", "presets", "newPresets", "newPreset", "existingPreset", "font", "instrumentList", "sampleList", "duplicate", "newSample", "clonedLinked", "newInstrument", "MIDIPatchTools", "mid", "trimInstrumentZones", "combos", "trimmedIZones", "iZoneIndex", "iZone", "iKeyRange", "iVelRange", "isIZoneUsed", "iCombo", "usedProgramsAndKeys", "presetIndex", "used", "split", "trimmedZones", "keyRange", "velRange", "isZoneUsed", "combo", "deletable", "system", "selectPreset", "allowedPrograms", "ReadGenerator", "generatorValue", "readGenerators", "generatorChunk", "SoundFontPresetZone", "BasicPresetZone", "instrumentID", "applyPresetZones", "indexes", "presetGens", "presetMods", "genStartIndexes", "modStartIndexes", "modIndex", "genIndex", "gensStart", "gensEnd", "modsStart", "modsEnd", "SoundFontPreset", "presetChunk", "sf2", "wBank", "readPresets", "parent", "previous", "SoundFontInstrumentZone", "BasicInstrumentZone", "sampleID", "applyInstrumentZones", "instrumentGenerators", "instrumentModulators", "SoundFontInstrument", "instrumentChunk", "readInstruments", "readModulators", "modulatorChunk", "secondarySourceEnum", "transformType", "readZoneIndexes", "zonesChunk", "SoundFont2", "arrayBuffer", "warnDeprecated", "mainFileArray", "isSF2Pack", "infoString", "xdtaChunk", "readBinaryString", "major", "minor", "xChunks", "sampleDataChunk", "phdrChunk", "pbagChunk", "pmodChunk", "pgenChunk", "instChunk", "ibagChunk", "imodChunk", "igenChunk", "xSamples", "xInst", "ibagIndexes", "extraIndexes", "presetGenerators", "presetModulators", "xPreset", "pres", "pbagIndexes", "SoundBankLoader", "check", "SpessaSynthProcessor", "SoundBankManager", "systemExclusiveInternal", "resetAllControllersInternal", "setMasterParameterInternal", "getMasterParameterInternal", "getAllMasterParametersInternal", "getVoicesForPresetInternal", "killVoicesIntenral", "getVoicesInternal", "opts", "DEFAULT_SYNTH_OPTIONS", "VOLUME_ENVELOPE_SMOOTHING_FACTOR", "PAN_SMOOTHING_FACTOR", "FILTER_SMOOTHING_FACTOR", "MIDI_CHANNEL_COUNT", "loadedFont", "EMBEDDED_SOUND_BANK_ID", "order", "outputs", "reverb", "chorus", "reverbChannels", "chorusChannels", "separateChannels", "revL", "revR", "chrL", "chrR", "quantumSize", "voiceCount", "ch", "programNumber", "message", "channelOffset", "DEFAULT_SYNTH_METHOD_OPTIONS", "call", "statusByteData", "getEvent", "midiMessageTypes", "e1", "e2", "volume", "isGMGSDrum", "mainFont", "consoleColors", "SpessaSynthCoreUtils", "WORKLET_PROCESSOR_NAME", "fillWithDefaults", "obj", "defObj", "DEFAULT_SEQUENCER_OPTIONS", "MIDIDataTrack", "MIDITrack", "track", "MIDIData", "_MIDIData", "BasicMIDI2", "mid", "songChangeType", "BasicSynthesizerCore", "sampleRate", "options", "postMessage", "SpessaSynthProcessor3", "SpessaSynthSequencer", "event", "e", "midiDatas", "s", "MIDIData", "type", "data", "transferable", "m", "channel", "channelObject", "SpessaSynthCoreUtils", "ALL_CHANNELS_OR_DIFFERENT_ACTION", "chan", "seq", "seqMsg", "songMap", "BasicMIDI2", "songChangeType", "sfManager", "sfManMsg", "font", "SoundBankLoader", "kmMsg", "man", "snapshot", "SynthesizerSnapshot", "SpessaSynthLogging", "WorkletSynthesizerCore", "BasicSynthesizerCore", "sampleRate", "currentTime", "port", "opts", "data", "transfer", "e", "_inputs", "outputs", "out", "channelMap", "i", "m", "config", "b", "SoundBankLoader", "SpessaSynthCoreUtils", "consoleColors", "seqOptions", "fillWithDefaults", "DEFAULT_SEQUENCER_OPTIONS", "BasicMIDI2", "WorkletSynthesizerProcessor", "options", "WorkletSynthesizerCore", "WORKLET_PROCESSOR_NAME", "SpessaSynthCoreUtils", "consoleColors"]
}
